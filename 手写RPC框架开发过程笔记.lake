<!doctype lake><title>手写RPC框架开发过程笔记</title><meta name="doc-version" content="1" /><meta name="viewport" content="adapt" /><meta name="typography" content="classic" /><meta name="paragraphSpacing" content="relax" /><h1 data-lake-id="Vcspg" id="Vcspg"><span data-lake-id="u33a01b85" id="u33a01b85">一、简易版RPC框架</span></h1><h2 data-lake-id="DKf45" id="DKf45"><span data-lake-id="ud024e7e4" id="ud024e7e4">一、基本概念</span></h2><h3 data-lake-id="qq37C" id="qq37C" style="text-align: left"><span data-lake-id="u14fcfc20" id="u14fcfc20" style="color: rgb(47, 48, 52)">什么是 RPC？</span></h3><p data-lake-id="u08c33753" id="u08c33753" style="text-align: left"><span data-lake-id="ucb97d916" id="ucb97d916" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">专业定义：RPC（Remote Procedure Call）即远程过程调用，是一种计算机通信协议，它允许程序在不同的计算机之间进行通信和交互，就像本地调用一样。</span></p><p data-lake-id="udb530c7c" id="udb530c7c" style="text-align: left"><span data-lake-id="ud653b121" id="ud653b121" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">简单理解，新开了一家卖鱼皮的熟食店，现在你作为消费者想要把鱼皮购买到家。如果是以前，你只能自己跑腿到线下店铺购买，耗时耗力。但现在有了手机、网络、外卖平台，你只需要在家动动手指，就能点个外卖让骑手把鱼皮配送到家，你不需要关注网络是怎么传输的、外卖平台是怎么操作的、骑手小哥是怎么配送的，只负责享受鱼皮就行了。</span></p><h3 data-lake-id="nAaPe" id="nAaPe" style="text-align: left"><span data-lake-id="uaa3ea527" id="uaa3ea527" style="color: rgb(47, 48, 52)">为什么需要 RPC？</span></h3><p data-lake-id="u42cb469b" id="u42cb469b" style="text-align: left"><span data-lake-id="u17822bac" id="u17822bac" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">回到 RPC 的概念，RPC 允许一个程序（称为服务消费者）像调用自己程序的方法一样，调用另一个程序（称为服务提供者）的接口，而不需要了解数据的传输处理过程、底层网络通信的细节等。这些都会由 RPC 框架帮你完成，使得开发者可以轻松调用远程服务，快速开发分布式系统。</span></p><p data-lake-id="u74370f46" id="u74370f46" style="text-align: left"><span data-lake-id="u828ee065" id="u828ee065" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">举个例子，现在有个项目 A 提供了点餐服务，项目 B 需要调用点餐服务完成下单。</span></p><p data-lake-id="ueffb5164" id="ueffb5164" style="text-align: left"><span data-lake-id="u3322198a" id="u3322198a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">点餐服务和接口的示例伪代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22interface%20OrderService%20%7B%5Cn%20%20%20%20%2F%2F%20%E7%82%B9%E9%A4%90%EF%BC%8C%E8%BF%94%E5%9B%9E%20orderId%5Cn%20%20%20%20long%20order(%E5%8F%82%E6%95%B01%2C%20%E5%8F%82%E6%95%B02%2C%20%E5%8F%82%E6%95%B03)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22JHO0E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9ae4c840" id="u9ae4c840" style="text-align: left"><span data-lake-id="u316f7ac6" id="u316f7ac6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如果没有 RPC 框架，项目 B 怎么调用项目 A 的服务呢？</span></p><p data-lake-id="u3c11fb88" id="u3c11fb88" style="text-align: left"><span data-lake-id="u27f67dc4" id="u27f67dc4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">首先，由于项目 A 和项目 B 都是独立的系统，不能像 SDK 一样作为依赖包引入。那么就需要项目 A 提供 web 服务，并且编写一个点餐接口暴露服务，比如访问 </span><span data-lake-id="u915a0031" id="u915a0031" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">http://yupi.icu</span><span data-lake-id="u20dbeac3" id="u20dbeac3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 就能调用点餐服务；然后项目 B 作为服务消费者，需要自己构造请求，并通过 HttpClient 请求上述地址。如果项目 B 需要调用更多第三方服务，每个服务和方法的调用都编写一个 HTTP 请求，那么会非常麻烦！</span></p><p data-lake-id="ue2d07ac2" id="ue2d07ac2" style="text-align: left"><span data-lake-id="ubd29f772" id="ubd29f772" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">示例伪代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22url%20%3D%20%5C%22http%3A%2F%2Fyupi.icu%5C%22%5Cnreq%20%3D%20new%20Req(%E5%8F%82%E6%95%B01%2C%20%E5%8F%82%E6%95%B02%2C%20%E5%8F%82%E6%95%B03)%5Cnres%20%3D%20httpClient.post(url).body(req).execute()%5CnorderId%20%3D%20res.data.orderId%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TkbgK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9a46ede8" id="u9a46ede8" style="text-align: left"><span data-lake-id="u8b5c23ff" id="u8b5c23ff" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">而有了 RPC 框架，项目 B 可以通过一行代码完成调用！</span></p><p data-lake-id="u00c5b507" id="u00c5b507" style="text-align: left"><span data-lake-id="ua7e1d7c5" id="ua7e1d7c5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">示例伪代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22orderId%20%3D%20orderService.order(%E5%8F%82%E6%95%B01%2C%20%E5%8F%82%E6%95%B02%2C%20%E5%8F%82%E6%95%B03)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Gzi5N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><card type="block" name="hr" value="data:%7B%22id%22%3A%22vO0Ss%22%7D"></card><p data-lake-id="u628725d2" id="u628725d2" style="text-align: left"><strong><span data-lake-id="u5cc3a907" id="u5cc3a907">总结：RPC框架可以让不同的项目之间的服务调用更加的方便，消费者通过RPC框架可以像调用自己项目的方法一样调用提供者的服务。</span></strong><span data-lake-id="u4a7cc26a" id="u4a7cc26a"><br /></span><span data-lake-id="u497341eb" id="u497341eb"> </span></p><h2 data-lake-id="iASHO" id="iASHO" style="text-align: left"><span data-lake-id="ue8ddd6c6" id="ue8ddd6c6" style="color: rgb(47, 48, 52)">二、RPC 框架实现思路</span></h2><h3 data-lake-id="WFUDn" id="WFUDn" style="text-align: left"><span data-lake-id="uac78cdde" id="uac78cdde" style="color: rgb(47, 48, 52)">基本设计</span></h3><p data-lake-id="ud654e1b7" id="ud654e1b7" style="text-align: left"><span data-lake-id="uf32de02d" id="uf32de02d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RPC 框架为什么能帮我们简化调用？如何实现一个 RPC 框架呢？</span></p><p data-lake-id="u073c2482" id="u073c2482" style="text-align: left"><span data-lake-id="u5672e151" id="u5672e151" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其实很简单，开局一张图，有服务消费者和服务提供者两个角色：</span></p><p data-lake-id="ufdbd0661" id="ufdbd0661"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710327460868-1974fd67-164d-4b2a-84b1-62522b85a724.png%22%2C%22taskId%22%3A%22u42dd2d84-d6b2-44d1-b12b-904c0382eab%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A897%2C%22height%22%3A236%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A36151%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A897%2C%22originHeight%22%3A236%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%20%E6%96%B9%E6%B3%95%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A626%2C%22y%22%3A51%2C%22width%22%3A86%2C%22height%22%3A29%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A548%2C%22y%22%3A101%2C%22width%22%3A239%2C%22height%22%3A29%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A114%2C%22y%22%3A101%2C%22width%22%3A86%2C%22height%22%3A30%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A601%2C%22y%22%3A151%2C%22width%22%3A136%2C%22height%22%3A29%2C%22text%22%3A%22ORDER%20%E6%96%B9%E6%B3%95%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22u0346c00c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7cefdb2d" id="u7cefdb2d" style="text-align: left"><span data-lake-id="u1845fdd1" id="u1845fdd1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">消费者想要调用提供者，就需要提供者启动一个 </span><span data-lake-id="ua887877a" id="ua887877a" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">web 服务</span><span data-lake-id="u827efcf9" id="u827efcf9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，然后通过 </span><span data-lake-id="uacb63127" id="uacb63127" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">请求客户端</span><span data-lake-id="uc21eb324" id="uc21eb324" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">发送 HTTP 或者其他协议的</span></p><p data-lake-id="ue960ed87" id="ue960ed87" style="text-align: left"><span data-lake-id="u8cbf6fb4" id="u8cbf6fb4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">请求来调用。</span></p><p data-lake-id="u7c3d0045" id="u7c3d0045" style="text-align: left"><span data-lake-id="ub2b62103" id="ub2b62103" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u45308eee" id="u45308eee" style="text-align: left"><span data-lake-id="u5dff6aa2" id="u5dff6aa2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">比如请求 </span><span data-lake-id="u49a156e2" id="u49a156e2" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">chen.icu/order</span><span data-lake-id="u442447d8" id="u442447d8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 地址后，提供者会调用 orderService 的 order 方法：</span></p><p data-lake-id="u06ee1b76" id="u06ee1b76"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710327507647-bf7b50b2-55da-4aeb-8726-b709b15a4d68.jpeg%22%2C%22taskId%22%3A%22u66a48745-1064-41d5-8571-8497b89b108%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FjTg4apIkQyK03Z0ozJcbCtRSOMr.jpg%22%2C%22size%22%3A38135%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1107%2C%22originHeight%22%3A542%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%20%E6%96%B9%E6%B3%95%20WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E8%AF%B7%E6%B1%82%20HTTP%2F%E5%85%B6%E4%BB%96%20YUPI.ICU%2FORDER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A817%2C%22y%22%3A43%2C%22width%22%3A103%2C%22height%22%3A36%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A726%2C%22y%22%3A102%2C%22width%22%3A281%2C%22height%22%3A37%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A110%2C%22y%22%3A105%2C%22width%22%3A102%2C%22height%22%3A34%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A787%2C%22y%22%3A166%2C%22width%22%3A164%2C%22height%22%3A34%2C%22text%22%3A%22ORDER%20%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A776%2C%22y%22%3A406%2C%22width%22%3A183%2C%22height%22%3A39%2C%22text%22%3A%22WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A69%2C%22y%22%3A407%2C%22width%22%3A174%2C%22height%22%3A37%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A447%2C%22y%22%3A436%2C%22width%22%3A70%2C%22height%22%3A35%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A64%2C%22y%22%3A470%2C%22width%22%3A186%2C%22height%22%3A35%2C%22text%22%3A%22HTTP%2F%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A758%2C%22y%22%3A472%2C%22width%22%3A222%2C%22height%22%3A37%2C%22text%22%3A%22YUPI.ICU%2FORDER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22u07fb2295%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ubbdda00a" id="ubbdda00a" style="text-align: left"><span data-lake-id="u48275706" id="u48275706" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但如果提供者提供了多个服务和方法，每个接口和方法都要单独写一个接口？消费者要针对每个接口写一</span></p><p data-lake-id="ue5d45625" id="ue5d45625" style="text-align: left"><span data-lake-id="u11a0f9f4" id="u11a0f9f4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">段 HTTP 调用的逻辑么？</span></p><p data-lake-id="u55a06da1" id="u55a06da1" style="text-align: left"><span data-lake-id="u242f2ec3" id="u242f2ec3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其实可以提供一个统一的服务调用接口，通过 </span><span data-lake-id="u6fe78ff7" id="u6fe78ff7" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">请求处理器</span><span data-lake-id="u58c7e4fb" id="u58c7e4fb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 根据客户端的请求参数来进行不同的处理、调用</span></p><p data-lake-id="u3cae1c35" id="u3cae1c35" style="text-align: left"><span data-lake-id="uc6a8195d" id="uc6a8195d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">不同的服务和方法。</span></p><p data-lake-id="u06683e34" id="u06683e34" style="text-align: left"><span data-lake-id="u125a48a6" id="u125a48a6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以在服务提供者程序维护一个 </span><span data-lake-id="udb8764ce" id="udb8764ce" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">本地服务注册器</span><span data-lake-id="u072a491f" id="u072a491f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，记录服务和对应实现类的映射。</span></p><p data-lake-id="u764a32ea" id="u764a32ea" style="text-align: left"><span data-lake-id="uc1c2c3fb" id="uc1c2c3fb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u64337ff4" id="u64337ff4" style="text-align: left"><span data-lake-id="u221baf59" id="u221baf59" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">举个例子，消费者要调用 orderService 服务的 order 方法，可以发送请求，参数为 </span></p><p data-lake-id="ue7702b19" id="ue7702b19" style="text-align: left"><span data-lake-id="uf6c9a474" id="uf6c9a474" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">service=orderService,method=order</span><span data-lake-id="uaf0abd50" id="uaf0abd50" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，然后请求处理器会根据 service 从服务注册器中找到对应的服务实现</span></p><p data-lake-id="u50660a99" id="u50660a99" style="text-align: left"><span data-lake-id="u67d7acfe" id="u67d7acfe" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">类，并且通过 Java 的反射机制调用 method 指定的方法。</span></p><p data-lake-id="u6298c4e6" id="u6298c4e6" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710328218781-ffa07403-a7f1-4f64-a3d7-659cd14bcafb.jpeg%22%2C%22taskId%22%3A%22ua8c628ca-7fd3-4362-bdd0-8feaae7d306%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22Fo58U29CJkxjC1AWhj4rWH0CU8PZ.jpg%22%2C%22size%22%3A71165%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1460%2C%22originHeight%22%3A945%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%E6%96%B9%E6%B3%95%20%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%20%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%20%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%20WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%20SERVICEORDERSERVICE%20HTTP%2F%E5%85%B6%E4%BB%96%20METHOD%20ORDER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1128%2C%22y%22%3A43%2C%22width%22%3A105%2C%22height%22%3A36%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A1038%2C%22y%22%3A104%2C%22width%22%3A285%2C%22height%22%3A36%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A105%2C%22width%22%3A102%2C%22height%22%3A36%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1098%2C%22y%22%3A165%2C%22width%22%3A167%2C%22height%22%3A34%2C%22text%22%3A%22ORDER%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A1061%2C%22y%22%3A338%2C%22width%22%3A241%2C%22height%22%3A36%2C%22text%22%3A%22%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%22%7D%2C%7B%22x%22%3A970%2C%22y%22%3A399%2C%22width%22%3A425%2C%22height%22%3A36%2C%22text%22%3A%22%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%22%7D%2C%7B%22x%22%3A1093%2C%22y%22%3A593%2C%22width%22%3A175%2C%22height%22%3A38%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%22%7D%2C%7B%22x%22%3A537%2C%22y%22%3A769%2C%22width%22%3A139%2C%22height%22%3A35%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%22%7D%2C%7B%22x%22%3A68%2C%22y%22%3A799%2C%22width%22%3A173%2C%22height%22%3A36%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A1090%2C%22y%22%3A828%2C%22width%22%3A181%2C%22height%22%3A37%2C%22text%22%3A%22WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A422%2C%22y%22%3A831%2C%22width%22%3A367%2C%22height%22%3A35%2C%22text%22%3A%22SERVICEORDERSERVICE%22%7D%2C%7B%22x%22%3A60%2C%22y%22%3A861%2C%22width%22%3A188%2C%22height%22%3A37%2C%22text%22%3A%22HTTP%2F%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A484%2C%22y%22%3A896%2C%22width%22%3A247%2C%22height%22%3A28%2C%22text%22%3A%22METHOD%20ORDER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22u5a57a0a9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u9d27ac89" id="u9d27ac89" style="text-align: left"><span data-lake-id="uadf8bc3a" id="uadf8bc3a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">需要注意的是，由于 Java 对象无法直接在网络中传输，所以要对传输的参数进行 </span><span data-lake-id="u46934a94" id="u46934a94" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">序列化</span><span data-lake-id="u901cf0e2" id="u901cf0e2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 和 </span><span data-lake-id="u053a4e69" id="u053a4e69" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">反序列化</span><span data-lake-id="u08d74087" id="u08d74087" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。</span></p><p data-lake-id="ua18fb6fc" id="ua18fb6fc" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710328282758-7c40e80d-c93b-4985-b2c4-6f72f0552e68.jpeg%22%2C%22taskId%22%3A%22u0e1699a1-8ef3-412c-87f5-f2cb493de48%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22Fn8vnSUq8v0lhtyHUjzv_GF8seN0.jpg%22%2C%22size%22%3A69017%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1460%2C%22originHeight%22%3A1038%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%20%E6%96%B9%E6%B3%95%20%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%20%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%20WEB%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E8%AF%B7%E6%B1%82%20HTTP%2F%E5%85%B6%E4%BB%96%20%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1128%2C%22y%22%3A43%2C%22width%22%3A105%2C%22height%22%3A36%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A1038%2C%22y%22%3A104%2C%22width%22%3A286%2C%22height%22%3A36%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A107%2C%22y%22%3A105%2C%22width%22%3A102%2C%22height%22%3A36%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1097%2C%22y%22%3A166%2C%22width%22%3A169%2C%22height%22%3A36%2C%22text%22%3A%22ORDER%20%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A1061%2C%22y%22%3A338%2C%22width%22%3A241%2C%22height%22%3A37%2C%22text%22%3A%22%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%22%7D%2C%7B%22x%22%3A974%2C%22y%22%3A400%2C%22width%22%3A422%2C%22height%22%3A38%2C%22text%22%3A%22%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%22%7D%2C%7B%22x%22%3A1094%2C%22y%22%3A593%2C%22width%22%3A175%2C%22height%22%3A39%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%22%7D%2C%7B%22x%22%3A66%2C%22y%22%3A798%2C%22width%22%3A175%2C%22height%22%3A38%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A1091%2C%22y%22%3A829%2C%22width%22%3A181%2C%22height%22%3A36%2C%22text%22%3A%22WEB%20%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A569%2C%22y%22%3A830%2C%22width%22%3A73%2C%22height%22%3A35%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A58%2C%22y%22%3A861%2C%22width%22%3A191%2C%22height%22%3A39%2C%22text%22%3A%22HTTP%2F%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A473%2C%22y%22%3A961%2C%22width%22%3A272%2C%22height%22%3A38%2C%22text%22%3A%22%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22ufefe1020%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ua29269f8" id="ua29269f8" style="text-align: left"><span data-lake-id="ubd16d5f7" id="ubd16d5f7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">为了简化消费者发请求的代码，实现类似本地调用的体验。可以基于代理模式，为消费者要调用的接口生</span></p><p data-lake-id="uccd61702" id="uccd61702" style="text-align: left"><span data-lake-id="uba967cac" id="uba967cac" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">成一个代理对象，由代理对象完成请求和响应的过程。</span></p><p data-lake-id="ufbd48c2a" id="ufbd48c2a" style="text-align: left"><span data-lake-id="u13352c6d" id="u13352c6d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ub1358e80" id="ub1358e80" style="text-align: left"><span data-lake-id="u02f15ac6" id="u02f15ac6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">所谓代理，就是有人帮你做一些事情，不用自己操心。</span></p><p data-lake-id="u5c4f4bf4" id="u5c4f4bf4" style="text-align: left"><span data-lake-id="u51b464c6" id="u51b464c6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="udd5ac4cc" id="udd5ac4cc" style="text-align: left"><span data-lake-id="u57ea0bc0" id="u57ea0bc0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">至此，一个最简易的 RPC 框架架构图诞生了：</span></p><p data-lake-id="uec592121" id="uec592121" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710328301350-8654da66-04ec-470d-b490-a1dd8c3534a3.jpeg%22%2C%22taskId%22%3A%22u948475b8-09e3-4014-bd8b-f946780b484%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FtUDqWGvAhCfNH4toi5kbgx9fWgC.jpg%22%2C%22size%22%3A96188%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1537%2C%22originHeight%22%3A1134%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%E6%96%B9%E6%B3%95%20%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%20%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%20%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%20ORDERSERVICE%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E8%AF%B7%E6%B1%82%20WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%20HTTP%2F%E5%85%B6%E4%BB%96%20%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20RPC%E6%A1%86%E6%9E%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1165%2C%22y%22%3A41%2C%22width%22%3A105%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A1075%2C%22y%22%3A102%2C%22width%22%3A281%2C%22height%22%3A39%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A104%2C%22width%22%3A107%2C%22height%22%3A38%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1133%2C%22y%22%3A165%2C%22width%22%3A168%2C%22height%22%3A36%2C%22text%22%3A%22ORDER%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A1095%2C%22y%22%3A340%2C%22width%22%3A243%2C%22height%22%3A34%2C%22text%22%3A%22%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%22%7D%2C%7B%22x%22%3A1011%2C%22y%22%3A399%2C%22width%22%3A418%2C%22height%22%3A38%2C%22text%22%3A%22%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A456%2C%22width%22%3A139%2C%22height%22%3A34%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A521%2C%22width%22%3A205%2C%22height%22%3A32%2C%22text%22%3A%22ORDERSERVICE%22%7D%2C%7B%22x%22%3A1130%2C%22y%22%3A595%2C%22width%22%3A175%2C%22height%22%3A36%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%22%7D%2C%7B%22x%22%3A102%2C%22y%22%3A800%2C%22width%22%3A175%2C%22height%22%3A36%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A604%2C%22y%22%3A830%2C%22width%22%3A74%2C%22height%22%3A37%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A1127%2C%22y%22%3A831%2C%22width%22%3A180%2C%22height%22%3A34%2C%22text%22%3A%22WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A862%2C%22width%22%3A188%2C%22height%22%3A34%2C%22text%22%3A%22HTTP%2F%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A506%2C%22y%22%3A926%2C%22width%22%3A273%2C%22height%22%3A35%2C%22text%22%3A%22%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%22%7D%2C%7B%22x%22%3A632%2C%22y%22%3A1069%2C%22width%22%3A151%2C%22height%22%3A37%2C%22text%22%3A%22RPC%E6%A1%86%E6%9E%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22u12509a96%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u58e94eef" id="u58e94eef" style="text-align: left"><span data-lake-id="ue65ab601" id="ue65ab601" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">上图中的虚线框部分，就是 RPC 框架需要提供的模块和能力。</span></p><details data-lake-id="u4b33c3e6" id="u4b33c3e6" open="true" class="lake-collapse"><summary data-lake-id="uf945bafe" id="uf945bafe" class="lake-summary"><span data-lake-id="ueacfe1f2" id="ueacfe1f2" class="lake-fontsize-12">代理对象的作用</span></summary><p data-lake-id="u411d70bd" id="u411d70bd"><span data-lake-id="uaec34feb" id="uaec34feb">在RPC（远程过程调用）框架中，代理对象（Proxy Object）起着至关重要的作用。以下是代理对象在RPC框架中的几个主要作用：</span></p><p data-lake-id="u782531ed" id="u782531ed"><br></p><ol list="uad6acd34"><li fid="ub6ac4145" data-lake-id="u868c19a2" id="u868c19a2"><span data-lake-id="u782b6765" id="u782b6765"> </span><strong><span data-lake-id="u115fa9d4" id="u115fa9d4">隐藏远程调用的细节</span></strong><span data-lake-id="u36ac50f8" id="u36ac50f8">: 代理对象可以隐藏底层网络通信的细节，使得客户端在调用远程方法时感觉就像是调用本地方法一样。这样，客户端无需了解如何构建网络请求、处理序列化和反序列化等细节，简化了客户端的开发工作。 </span></li><li fid="ub6ac4145" data-lake-id="u68696a16" id="u68696a16"><span data-lake-id="ufb2f1879" id="ufb2f1879"> </span><strong><span data-lake-id="ub3089383" id="ub3089383">实现透明的远程调用</span></strong><span data-lake-id="ud77a0f7e" id="ud77a0f7e">: 代理对象可以将本地调用转换为远程调用，使得客户端无需知道调用的是本地方法还是远程方法。通过代理对象，客户端可以透明地调用远程服务，从而简化了分布式系统的开发。 </span></li><li fid="ub6ac4145" data-lake-id="uc236a0ef" id="uc236a0ef"><span data-lake-id="u01697ae3" id="u01697ae3"> </span><strong><span data-lake-id="u8261c07f" id="u8261c07f">提供远程服务的访问点</span></strong><span data-lake-id="u55f1089b" id="u55f1089b">: 代理对象作为客户端与远程服务之间的桥梁，允许客户端通过代理对象来访问远程服务。代理对象通常封装了与远程服务相关的通信细节，如网络连接、序列化和反序列化等，使得客户端可以方便地调用远程服务。 </span></li><li fid="ub6ac4145" data-lake-id="uc3c4d56e" id="uc3c4d56e"><span data-lake-id="u72d50ece" id="u72d50ece"> </span><strong><span data-lake-id="u1c4a04db" id="u1c4a04db">支持远程调用的额外功能</span></strong><span data-lake-id="u6ddcdd37" id="u6ddcdd37">: 代理对象通常还可以提供一些额外的功能，如负载均衡、容错处理、日志记录等。通过代理对象，可以在不修改客户端代码的情况下，实现对这些功能的支持，从而提高了系统的可扩展性和可维护性。 </span></li></ol><p data-lake-id="ue38cd769" id="ue38cd769"><br></p><p data-lake-id="uaadff9b0" id="uaadff9b0"><span data-lake-id="u7c86e2ff" id="u7c86e2ff">总之，代理对象在RPC框架中扮演着承上启下的角色，既隐藏了底层的通信细节，又提供了透明的远程调用机制，同时还支持了一些额外的功能，是RPC框架中不可或缺的组成部分。</span></p></details><h3 data-lake-id="z7iG7" id="z7iG7" style="text-align: left"><span data-lake-id="u79d6dde7" id="u79d6dde7" style="color: rgb(47, 48, 52)">扩展设计</span></h3><p data-lake-id="u7c8c471f" id="u7c8c471f" style="text-align: left"><span data-lake-id="u95bb7ad5" id="u95bb7ad5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">虽然上述设计已经跑通了基本调用流程，但离一个完备的 RPC 框架还有很大的差距，带着问题来进</span></p><p data-lake-id="ub99a2122" id="ub99a2122" style="text-align: left"><span data-lake-id="u0b5dfe1e" id="u0b5dfe1e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一步完善下架构设计。</span></p><h4 data-lake-id="MF2Xi" id="MF2Xi" style="text-align: left"><span data-lake-id="u70052511" id="u70052511" style="color: rgb(47, 48, 52)">1、服务注册发现</span></h4><p data-lake-id="ud2f9bbc8" id="ud2f9bbc8"><br></p><p data-lake-id="uf8100a9c" id="uf8100a9c" style="text-align: left"><span data-lake-id="u990d20a7" id="u990d20a7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">问题 1：消费者如何知道提供者的调用地址呢？</span></p><p data-lake-id="ubfb698a3" id="ubfb698a3" style="text-align: left"><span data-lake-id="u5afb2e58" id="u5afb2e58" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u51c2a7e1" id="u51c2a7e1" style="text-align: left"><span data-lake-id="u71fde3f6" id="u71fde3f6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">类比生活场景，点外卖时，外卖小哥如何知道买家地址和店铺的地址？肯定是买家和卖家分别填写</span></p><p data-lake-id="u499110f9" id="u499110f9" style="text-align: left"><span data-lake-id="u1f3f8763" id="u1f3f8763" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">地址，由平台来保存的。 因此，我们需要一个 </span><span data-lake-id="u9adc6e33" id="u9adc6e33" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">注册中心</span><span data-lake-id="u8c670743" id="u8c670743" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，来保存服务提供者的地址。消费者要调用服务</span></p><p data-lake-id="u64ae7166" id="u64ae7166" style="text-align: left"><span data-lake-id="u5f05eedf" id="u5f05eedf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">时，只需从注册中心获取对应服务的提供者地址即可。</span></p><p data-lake-id="u879e7428" id="u879e7428" style="text-align: left"><span data-lake-id="udb828681" id="udb828681" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf780218a" id="uf780218a" style="text-align: left"><span data-lake-id="ue65c804a" id="ue65c804a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">架构图如下：</span></p><p data-lake-id="u8c0351bc" id="u8c0351bc" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710328333420-910cc725-079f-4bbe-86af-bc692cbac7ce.jpeg%22%2C%22taskId%22%3A%22uece49bc4-20bb-4fec-9412-7138963cc0c%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22Fuif6xzTiVgGLrevi3Etdp-8DCtm.jpg%22%2C%22size%22%3A39673%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1498%2C%22originHeight%22%3A596%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%201%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%202%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%20ORDERSERVICE%2C1.1.1.1%20%E6%8F%90%E4%BE%9B%E8%80%85%203%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDERSERVICE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A631%2C%22y%22%3A76%2C%22width%22%3A139%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%22%7D%2C%7B%22x%22%3A1009%2C%22y%22%3A104%2C%22width%22%3A189%2C%22height%22%3A37%2C%22text%22%3A%221%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A253%2C%22y%22%3A105%2C%22width%22%3A191%2C%22height%22%3A36%2C%22text%22%3A%222%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A136%2C%22width%22%3A337%2C%22height%22%3A35%2C%22text%22%3A%22ORDERSERVICE%2C1.1.1.1%22%7D%2C%7B%22x%22%3A1213%2C%22y%22%3A379%2C%22width%22%3A103%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A585%2C%22y%22%3A406%2C%22width%22%3A196%2C%22height%22%3A41%2C%22text%22%3A%223%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A111%2C%22y%22%3A410%2C%22width%22%3A103%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1164%2C%22y%22%3A444%2C%22width%22%3A205%2C%22height%22%3A30%2C%22text%22%3A%22ORDERSERVICE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u28d69115%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u6b406ee5" id="u6b406ee5" style="text-align: left"><span data-lake-id="u79943297" id="u79943297" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一般用现成的第三方注册中心，比如 Redis、Zookeeper 即可。</span></p><h4 data-lake-id="jfjdx" id="jfjdx" style="text-align: left"><span data-lake-id="u22caff32" id="u22caff32" style="color: rgb(47, 48, 52)">2、负载均衡</span></h4><p data-lake-id="ua2e1da60" id="ua2e1da60" style="text-align: left"><span data-lake-id="u8da31c2d" id="u8da31c2d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">问题 2：如果有多个服务提供者，消费者应该调用哪个服务提供者呢？</span></p><p data-lake-id="ucd731dc7" id="ucd731dc7" style="text-align: left"><span data-lake-id="u353ba1ef" id="u353ba1ef" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u915f7180" id="u915f7180" style="text-align: left"><span data-lake-id="ufa5559d0" id="ufa5559d0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以给服务调用方增加负载均衡能力，通过指定不同的算法来决定调用哪一个服务提供者，比如轮</span></p><p data-lake-id="u0493ae07" id="u0493ae07" style="text-align: left"><span data-lake-id="u5899d7cd" id="u5899d7cd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">询、随机、根据性能动态调用等。</span></p><p data-lake-id="u34d8d37a" id="u34d8d37a" style="text-align: left"><span data-lake-id="u1fe8c096" id="u1fe8c096" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u6cf689f1" id="u6cf689f1" style="text-align: left"><span data-lake-id="u581625a1" id="u581625a1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">架构图如下：</span></p><p data-lake-id="u616620ff" id="u616620ff" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710332203098-ffb0affc-b71a-4fdb-a5fb-cff57c586437.jpeg%22%2C%22taskId%22%3A%22u409408ff-4447-4606-ba94-575debdd55f%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FomehBfZf87R5w66XW3DhLIMr_Pn.jpg%22%2C%22size%22%3A51745%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1498%2C%22originHeight%22%3A961%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%201%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%202%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%20ORDERSERVICE%2C1.1.1.1%20%E6%8F%90%E4%BE%9B%E8%80%85%20%E6%B6%88%E8%B4%B9%E8%80%85%204%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%20ORDERSERVICE%203%2C%E9%80%89%E5%8F%96%E6%8F%90%E4%BE%9B%E8%80%85%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A631%2C%22y%22%3A77%2C%22width%22%3A139%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%22%7D%2C%7B%22x%22%3A1010%2C%22y%22%3A104%2C%22width%22%3A191%2C%22height%22%3A38%2C%22text%22%3A%221%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A225%2C%22y%22%3A107%2C%22width%22%3A199%2C%22height%22%3A35%2C%22text%22%3A%222%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A530%2C%22y%22%3A137%2C%22width%22%3A338%2C%22height%22%3A35%2C%22text%22%3A%22ORDERSERVICE%2C1.1.1.1%22%7D%2C%7B%22x%22%3A1216%2C%22y%22%3A381%2C%22width%22%3A105%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A413%2C%22width%22%3A106%2C%22height%22%3A36%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A580%2C%22y%22%3A412%2C%22width%22%3A198%2C%22height%22%3A39%2C%22text%22%3A%224%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A1165%2C%22y%22%3A443%2C%22width%22%3A206%2C%22height%22%3A32%2C%22text%22%3A%22ORDERSERVICE%22%7D%2C%7B%22x%22%3A45%2C%22y%22%3A602%2C%22width%22%3A231%2C%22height%22%3A37%2C%22text%22%3A%223%2C%E9%80%89%E5%8F%96%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A819%2C%22width%22%3A139%2C%22height%22%3A37%2C%22text%22%3A%22%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f9f9%22%2C%22id%22%3A%22ueb2440bf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="PcE8O" id="PcE8O" style="text-align: left"><span data-lake-id="ub491d2b9" id="ub491d2b9" style="color: rgb(47, 48, 52)">3、容错机制</span></h4><p data-lake-id="u44604e63" id="u44604e63" style="text-align: left"><span data-lake-id="u362f5067" id="u362f5067" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">问题 3：如果服务调用失败，应该如何处理呢？</span></p><p data-lake-id="uad8ce8f1" id="uad8ce8f1" style="text-align: left"><span data-lake-id="ub5fdf016" id="ub5fdf016" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u6fae5e29" id="u6fae5e29" style="text-align: left"><span data-lake-id="u65d53cf5" id="u65d53cf5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">为了保证分布式系统的高可用，我们通常会给服务的调用增加一定的容错机制，比如失败重试、降级调用</span></p><p data-lake-id="ud26c78bc" id="ud26c78bc" style="text-align: left"><span data-lake-id="u5ab8a781" id="u5ab8a781" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其他接口等等。</span></p><p data-lake-id="u2b488e2e" id="u2b488e2e" style="text-align: left"><span data-lake-id="ucaf608c5" id="ucaf608c5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ued3ac621" id="ued3ac621" style="text-align: left"><span data-lake-id="udeb04bca" id="udeb04bca" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">架构图如下：</span></p><p data-lake-id="u7443ec9f" id="u7443ec9f" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710332225843-6cdb5e48-6dff-4841-99ca-c2acd86315ad.jpeg%22%2C%22taskId%22%3A%22u0ccc08b1-70c5-4633-9383-b4509d4bafa%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FoKMcdhjcVe__uKshzr5T18_uzzT.jpg%22%2C%22size%22%3A60684%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1498%2C%22originHeight%22%3A961%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%201%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%202%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%20ORDERSERVICE%2C1.1.1.1%20%E6%8F%90%E4%BE%9B%E8%80%85%204%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDERSERVICE%203%2C%E9%80%89%E5%8F%96%E6%8F%90%E4%BE%9B%E8%80%85%205%2C%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%20%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A631%2C%22y%22%3A77%2C%22width%22%3A139%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%22%7D%2C%7B%22x%22%3A1010%2C%22y%22%3A104%2C%22width%22%3A191%2C%22height%22%3A38%2C%22text%22%3A%221%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A225%2C%22y%22%3A107%2C%22width%22%3A199%2C%22height%22%3A35%2C%22text%22%3A%222%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A530%2C%22y%22%3A137%2C%22width%22%3A338%2C%22height%22%3A35%2C%22text%22%3A%22ORDERSERVICE%2C1.1.1.1%22%7D%2C%7B%22x%22%3A1216%2C%22y%22%3A381%2C%22width%22%3A105%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A579%2C%22y%22%3A410%2C%22width%22%3A210%2C%22height%22%3A42%2C%22text%22%3A%224%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A412%2C%22width%22%3A106%2C%22height%22%3A37%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1165%2C%22y%22%3A443%2C%22width%22%3A206%2C%22height%22%3A32%2C%22text%22%3A%22ORDERSERVICE%22%7D%2C%7B%22x%22%3A45%2C%22y%22%3A602%2C%22width%22%3A231%2C%22height%22%3A37%2C%22text%22%3A%223%2C%E9%80%89%E5%8F%96%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A421%2C%22y%22%3A602%2C%22width%22%3A196%2C%22height%22%3A36%2C%22text%22%3A%225%2C%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%22%7D%2C%7B%22x%22%3A443%2C%22y%22%3A819%2C%22width%22%3A137%2C%22height%22%3A37%2C%22text%22%3A%22%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A819%2C%22width%22%3A140%2C%22height%22%3A37%2C%22text%22%3A%22%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u92a78606%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="iN5vl" id="iN5vl" style="text-align: left"><span data-lake-id="ueec4dd9c" id="ueec4dd9c" style="color: rgb(47, 48, 52)">4、其他</span></h4><p data-lake-id="udcfc9251" id="udcfc9251" style="text-align: left"><span data-lake-id="ucfa18427" id="ucfa18427" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">除了上面几个经典设计外，如果想要做一个优秀的 RPC 框架，还要考虑很多问题。</span></p><p data-lake-id="uef20ba8b" id="uef20ba8b" style="text-align: left"><span data-lake-id="u3a0f095c" id="u3a0f095c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf89a5352" id="uf89a5352" style="text-align: left"><span data-lake-id="u78d7bdfd" id="u78d7bdfd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">比如：</span></p><ol list="u4de26770"><li fid="uf07843f1" data-lake-id="u5a71d3ce" id="u5a71d3ce" style="text-align: left"><span data-lake-id="u35e71cfb" id="u35e71cfb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务提供者下线了怎么办？需要一个失效节点剔除机制。</span></li><li fid="uf07843f1" data-lake-id="u9b363700" id="u9b363700" style="text-align: left"><span data-lake-id="u27fa7ced" id="u27fa7ced" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务消费者每次都从注册中心拉取信息，性能会不会很差？可以使用缓存来优化性能。</span></li><li fid="uf07843f1" data-lake-id="u1b707822" id="u1b707822" style="text-align: left"><span data-lake-id="u81d1320f" id="u81d1320f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何优化 RPC 框架的传输通讯性能？比如选择合适的网络框架、自定义协议头、节约传输体积等。</span></li><li fid="uf07843f1" data-lake-id="u5c7020f2" id="u5c7020f2" style="text-align: left"><span data-lake-id="u7170afc9" id="u7170afc9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何让整个框架更利于扩展？比如使用 Java 的 SPI 机制、配置化等等。</span></li></ol><p data-lake-id="u57444337" id="u57444337" style="text-align: left"><span data-lake-id="ud94e705a" id="ud94e705a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ub9992ae9" id="ub9992ae9" style="text-align: left"><span data-lake-id="uffa19e0d" id="uffa19e0d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">总结一下，可以通过做一个 RPC 项目学习到网络、序列化、代理、服务注册发现、负载均衡、容错、可扩展设计等知识</span></p><h2 data-lake-id="pwBH2" id="pwBH2" style="text-align: left"><span data-lake-id="u9ecd18e5" id="u9ecd18e5" style="color: rgb(47, 48, 52)">三、开发简易版 RPC 框架</span></h2><p data-lake-id="udddaf3c5" id="udddaf3c5" style="text-align: left"><span data-lake-id="u660e1b07" id="u660e1b07" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">先完成一个简易版的 RPC 框架，后面再持续扩展优化。</span></p><p data-lake-id="u40805fdf" id="u40805fdf" style="text-align: left"><span data-lake-id="u9d2d547f" id="u9d2d547f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">架构设计图如下：<br /></span><span data-lake-id="u56476213" id="u56476213" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1710332308458-38b88096-4a6e-403f-8d53-04ab8d171bb3.jpeg%22%2C%22taskId%22%3A%22ua3664952-278f-40c9-82e2-5d4f162f61e%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FtUDqWGvAhCfNH4toi5kbgx9fWgC.jpg%22%2C%22size%22%3A96188%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1537%2C%22originHeight%22%3A1134%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%20ORDERSERVICE%E6%8E%A5%E5%8F%A3%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDER%E6%96%B9%E6%B3%95%20%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%20%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%20%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%20ORDERSERVICE%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%20%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%20%E8%AF%B7%E6%B1%82%20WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%20HTTP%2F%E5%85%B6%E4%BB%96%20%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20RPC%E6%A1%86%E6%9E%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1165%2C%22y%22%3A41%2C%22width%22%3A105%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A1075%2C%22y%22%3A102%2C%22width%22%3A281%2C%22height%22%3A39%2C%22text%22%3A%22ORDERSERVICE%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A104%2C%22width%22%3A107%2C%22height%22%3A38%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1133%2C%22y%22%3A165%2C%22width%22%3A168%2C%22height%22%3A36%2C%22text%22%3A%22ORDER%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A1095%2C%22y%22%3A340%2C%22width%22%3A243%2C%22height%22%3A34%2C%22text%22%3A%22%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%22%7D%2C%7B%22x%22%3A1011%2C%22y%22%3A399%2C%22width%22%3A418%2C%22height%22%3A38%2C%22text%22%3A%22%5C%22ORDERSERVICE%5C%22%2C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A456%2C%22width%22%3A139%2C%22height%22%3A34%2C%22text%22%3A%22%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A521%2C%22width%22%3A205%2C%22height%22%3A32%2C%22text%22%3A%22ORDERSERVICE%22%7D%2C%7B%22x%22%3A1130%2C%22y%22%3A595%2C%22width%22%3A175%2C%22height%22%3A36%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%22%7D%2C%7B%22x%22%3A102%2C%22y%22%3A800%2C%22width%22%3A175%2C%22height%22%3A36%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A604%2C%22y%22%3A830%2C%22width%22%3A74%2C%22height%22%3A37%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A1127%2C%22y%22%3A831%2C%22width%22%3A180%2C%22height%22%3A34%2C%22text%22%3A%22WEB%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A862%2C%22width%22%3A188%2C%22height%22%3A34%2C%22text%22%3A%22HTTP%2F%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A506%2C%22y%22%3A926%2C%22width%22%3A273%2C%22height%22%3A35%2C%22text%22%3A%22%E5%BA%8F%E5%88%97%E5%8C%96%2F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%22%7D%2C%7B%22x%22%3A632%2C%22y%22%3A1069%2C%22width%22%3A151%2C%22height%22%3A37%2C%22text%22%3A%22RPC%E6%A1%86%E6%9E%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22u8c7ec30e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u1f9fe525" id="u1f9fe525" style="text-align: left"><span data-lake-id="u78e18422" id="u78e18422" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="TcOP5" id="TcOP5"><span data-lake-id="u8e6cc6bd" id="u8e6cc6bd" style="color: rgb(47, 48, 52)">项目模块介绍</span></h3><ul list="u324f929b"><li fid="u5ffdc73e" data-lake-id="u7ed77ffa" id="u7ed77ffa" style="text-align: left"><span data-lake-id="u5c69df8d" id="u5c69df8d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">example-common：示例代码的公共依赖，包括接口、Model 等</span></li><li fid="u5ffdc73e" data-lake-id="u832a7f6d" id="u832a7f6d" style="text-align: left"><span data-lake-id="ua99affcf" id="ua99affcf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">example-consumer：示例服务消费者代码</span></li><li fid="u5ffdc73e" data-lake-id="u564733c4" id="u564733c4" style="text-align: left"><span data-lake-id="u7e9a1271" id="u7e9a1271" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">example-provider：示例服务提供者代码</span></li><li fid="u5ffdc73e" data-lake-id="u82cf0539" id="u82cf0539" style="text-align: left"><span data-lake-id="u1a90aa25" id="u1a90aa25" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">chen-rpc-easy：简易版 RPC 框架</span></li></ul><h4 data-lake-id="jz1eO" id="jz1eO" data-lake-index-type="2"><span data-lake-id="u303fd45d" id="u303fd45d" style="color: rgb(47, 48, 52)">公共模块（</span><span data-lake-id="u2c57360a" id="u2c57360a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">example-common</span><span data-lake-id="ud83f4b0a" id="ud83f4b0a" style="color: rgb(47, 48, 52)">）</span></h4><p data-lake-id="u643b2ab4" id="u643b2ab4" style="text-align: left"><span data-lake-id="u319ef957" id="u319ef957" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">公共模块需要同时被消费者和服务提供者引入，主要是编写和服务相关的接口和数据模型。</span></p><p data-lake-id="u07994078" id="u07994078" style="text-align: left"><span data-lake-id="u1f2f33c7" id="u1f2f33c7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">整个模块的结构如下：</span></p><p data-lake-id="uc5f2285e" id="uc5f2285e" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710332642117-8c8b3d09-967b-40fe-9825-e82601fae5e8.png%22%2C%22taskId%22%3A%22u0c23c538-a630-421b-af37-635dc5e9dbe%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A482%2C%22height%22%3A387%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A128330%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A482%2C%22originHeight%22%3A387%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLE-COMMON%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLE%20COMMON%20MODEL%20USER%20SERVICE%20USERSERVICE%20TEST%20TARGET%20POM.XML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A75%2C%22y%22%3A13%2C%22width%22%3A142%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLE-COMMON%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A39%2C%22width%22%3A23%2C%22height%22%3A12%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A120%2C%22y%22%3A63%2C%22width%22%3A36%2C%22height%22%3A13%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A143%2C%22y%22%3A88%2C%22width%22%3A30%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A165%2C%22y%22%3A114%2C%22width%22%3A33%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A188%2C%22y%22%3A137%2C%22width%22%3A34%2C%22height%22%3A16%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A210%2C%22y%22%3A163%2C%22width%22%3A63%2C%22height%22%3A13%2C%22text%22%3A%22EXAMPLE%22%7D%2C%7B%22x%22%3A233%2C%22y%22%3A189%2C%22width%22%3A66%2C%22height%22%3A12%2C%22text%22%3A%22COMMON%22%7D%2C%7B%22x%22%3A256%2C%22y%22%3A214%2C%22width%22%3A47%2C%22height%22%3A12%2C%22text%22%3A%22MODEL%22%7D%2C%7B%22x%22%3A280%2C%22y%22%3A238%2C%22width%22%3A33%2C%22height%22%3A13%2C%22text%22%3A%22USER%22%7D%2C%7B%22x%22%3A254%2C%22y%22%3A264%2C%22width%22%3A53%2C%22height%22%3A13%2C%22text%22%3A%22SERVICE%22%7D%2C%7B%22x%22%3A278%2C%22y%22%3A287%2C%22width%22%3A87%2C%22height%22%3A14%2C%22text%22%3A%22USERSERVICE%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A314%2C%22width%22%3A29%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A340%2C%22width%22%3A47%2C%22height%22%3A12%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A99%2C%22y%22%3A364%2C%22width%22%3A65%2C%22height%22%3A14%2C%22text%22%3A%22POM.XML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23404954%22%2C%22id%22%3A%22u60704ec1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u9997560c" id="u9997560c" style="text-align: left"><span data-lake-id="u233fde58" id="u233fde58" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">1）编写用户实体类 User：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22User%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.common.model%3B%5Cn%5Cnimport%20java.io.Serializable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%A8%E6%88%B7%E5%AE%9E%E4%BD%93%E7%B1%BB%5Cn%20*%5Cn%20*%20%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E5%BA%8F%E5%88%97%E5%8C%96%E6%8E%A5%E5%8F%A3%EF%BC%8C%E6%96%B9%E4%BE%BF%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%BC%A0%E8%BE%93%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F11%5Cn%20*%2F%5Cnpublic%20class%20User%20implements%20Serializable%20%7B%5Cn%20%20%20%20private%20String%20name%3B%5Cn%5Cn%20%20%20%20public%20String%20getName()%7B%5Cn%20%20%20%20%20%20%20%20return%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setName(String%20name)%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22User%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22p63IW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u28a06b51" id="u28a06b51" style="text-align: left"><span data-lake-id="uf5136355" id="uf5136355" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注意，对象需要实现序列化接口，为后续网络传输序列化提供支持。</span></p><details data-lake-id="u568b1337" id="u568b1337" open="false" class="lake-collapse"><summary data-lake-id="u3a151dac" id="u3a151dac" class="lake-summary"><span data-lake-id="u5b0f69d5" id="u5b0f69d5">关于Serializable（序列化）接口</span></summary><p data-lake-id="u3d59ca7d" id="u3d59ca7d"><span data-lake-id="u773920ef" id="u773920ef">在Java中，一个类实现了</span><code data-lake-id="u77c3450e" id="u77c3450e"><span data-lake-id="ue9826f6b" id="ue9826f6b">Serializable</span></code><span data-lake-id="u572195e9" id="u572195e9">接口，这确实表示这个类的对象可以被序列化。序列化是一个将对象的状态信息转换为可以存储或传输的形式的过程，这对于对象的持久化存储以及在网络中传输对象是非常重要的。实现了</span><code data-lake-id="uef51b86b" id="uef51b86b"><span data-lake-id="u77d7f0b0" id="u77d7f0b0">Serializable</span></code><span data-lake-id="u7425216a" id="u7425216a">接口的类可以使用如</span><code data-lake-id="u1e68d2ad" id="u1e68d2ad"><span data-lake-id="u330fa0c2" id="u330fa0c2">ObjectOutputStream</span></code><span data-lake-id="uefe335f0" id="uefe335f0">这样的流来进行对象的序列化。</span></p><p data-lake-id="u8af8e6ce" id="u8af8e6ce"><br></p><p data-lake-id="u16c33306" id="u16c33306"><span data-lake-id="u30f6b0e9" id="u30f6b0e9">然而，值得注意的是，实现</span><code data-lake-id="u329fb0a2" id="u329fb0a2"><span data-lake-id="u22c97d18" id="u22c97d18">Serializable</span></code><span data-lake-id="u2484ff81" id="u2484ff81">接口本身不会自动对对象进行任何特定的序列化操作，也不会添加任何方法到类中，因为</span><code data-lake-id="u731f8275" id="u731f8275"><span data-lake-id="u7f0081db" id="u7f0081db">Serializable</span></code><span data-lake-id="ubb605c51" id="ubb605c51">是一个标记接口（marker interface），它不包含任何方法。这个接口的作用是给出一个信号，表示这个类的对象是可以被默认的序列化机制序列化的。</span></p><p data-lake-id="ua79d3474" id="ua79d3474"><br></p><p data-lake-id="uea4acffa" id="uea4acffa"><span data-lake-id="u01a3d473" id="u01a3d473">要使一个类能够被序列化，仅仅实现</span><code data-lake-id="u743efc48" id="u743efc48"><span data-lake-id="ue9149391" id="ue9149391">Serializable</span></code><span data-lake-id="u75a802f0" id="u75a802f0">接口通常是不够的，你可能还需要考虑以下几点：</span></p><p data-lake-id="u4584e496" id="u4584e496"><br></p><ul list="u151cec0f"><li fid="ueff4caee" data-lake-id="u66943e2d" id="u66943e2d"><strong><span data-lake-id="u09de5d5f" id="u09de5d5f">默认序列化行为</span></strong><span data-lake-id="u7306134c" id="u7306134c">：如果不提供自定义的序列化逻辑，那么类的非</span><code data-lake-id="uf8f9d24c" id="uf8f9d24c"><span data-lake-id="u1e3890c7" id="u1e3890c7">transient</span></code><span data-lake-id="u135294a7" id="u135294a7">（瞬时的）字段将会被默认序列化。</span></li><li fid="ueff4caee" data-lake-id="u4d8c9914" id="u4d8c9914"><code data-lake-id="u869e64f7" id="u869e64f7"><strong><span data-lake-id="ue85e54e9" id="ue85e54e9">transient</span></strong></code><strong><span data-lake-id="u876e9a77" id="u876e9a77">关键字</span></strong><span data-lake-id="uf569c096" id="uf569c096">：你可以使用</span><code data-lake-id="ub2dfbd38" id="ub2dfbd38"><span data-lake-id="uaa2021b1" id="uaa2021b1">transient</span></code><span data-lake-id="uc3f5e94d" id="uc3f5e94d">关键字来标记那些不应该被序列化的字段。被标记为</span><code data-lake-id="ude0c6169" id="ude0c6169"><span data-lake-id="uba8b274a" id="uba8b274a">transient</span></code><span data-lake-id="u010c0697" id="u010c0697">的字段在对象序列化时会被忽略。</span></li><li fid="ueff4caee" data-lake-id="udde847b4" id="udde847b4"><strong><span data-lake-id="ub306e908" id="ub306e908">自定义序列化</span></strong><span data-lake-id="u014117d2" id="u014117d2">：通过实现</span><code data-lake-id="u59ea6581" id="u59ea6581"><span data-lake-id="u908d0341" id="u908d0341">private void writeObject(ObjectOutputStream out)</span></code><span data-lake-id="u378f8409" id="u378f8409">和</span><code data-lake-id="u632abc58" id="u632abc58"><span data-lake-id="u12310e2e" id="u12310e2e">private void readObject(ObjectInputStream in)</span></code><span data-lake-id="ua1e45b2d" id="ua1e45b2d">方法，你可以为你的类提供自定义的序列化逻辑。</span></li><li fid="ueff4caee" data-lake-id="u5d70ce83" id="u5d70ce83"><strong><span data-lake-id="ubab20376" id="ubab20376">版本控制</span></strong><span data-lake-id="ue6673627" id="ue6673627">：通过声明</span><code data-lake-id="u9825b6d3" id="u9825b6d3"><span data-lake-id="u208f209d" id="u208f209d">serialVersionUID</span></code><span data-lake-id="uabbd349f" id="uabbd349f">字段，你可以为你的类提供一个版本号，这对于序列化过程的兼容性控制是很重要的。</span></li></ul><p data-lake-id="u7d515aba" id="u7d515aba"><br></p><p data-lake-id="ua504821c" id="ua504821c"><span data-lake-id="ud0f2f8df" id="ud0f2f8df">因此，尽管实现</span><code data-lake-id="u4f769220" id="u4f769220"><span data-lake-id="u12875f08" id="u12875f08">Serializable</span></code><span data-lake-id="u87de6c41" id="u87de6c41">接口是使Java类可序列化的第一步，但在实际应用中，你可能还需要根据具体需求对序列化过程进行更细致的控制和定制。</span></p></details><blockquote data-lake-id="uf75bca98" id="uf75bca98"><p data-lake-id="u78fd3985" id="u78fd3985" style="text-align: left"><span data-lake-id="u7675d03a" id="u7675d03a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">总结：</span><span data-lake-id="u2b4c9b9c" id="u2b4c9b9c" class="lake-fontsize-12" style="color: rgb(51, 51, 51)">Serializable接口仅用于标识该类可以被序列化，并不会执行任何操作</span></p></blockquote><p data-lake-id="ua7c689fb" id="ua7c689fb" style="text-align: left"><span data-lake-id="uc81947ce" id="uc81947ce" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf249b083" id="uf249b083" style="text-align: left"><span data-lake-id="ue016cbe6" id="ue016cbe6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">2）编写用户服务接口 UserService，提供一个获取用户的方法：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22UserService%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.common.service%3B%5Cn%5Cnimport%20com.yybf.example.common.model.User%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%5Cn%20*%20%40date%202024%2F3%2F11-13%3A30%5Cn%20*%2F%5Cnpublic%20interface%20UserService%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20user%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.example.common.model.User%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F11%2013%3A37%5Cn%20%20%20%20%20*%2F%20%20%5Cn%20%20%20%20User%20getUser(User%20user)%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22UserService%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MGzdd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u3c9ea378" id="u3c9ea378" style="text-align: left"><span data-lake-id="ue002e73a" id="ue002e73a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="WnS4h" id="WnS4h" data-lake-index-type="2"><span data-lake-id="u4a1e178d" id="u4a1e178d">服务提供者（</span><span data-lake-id="u1188bff8" id="u1188bff8" style="color: rgb(47, 48, 52)">example-provider）</span></h4><p data-lake-id="u7b763d36" id="u7b763d36" style="text-indent: 2em"><span data-lake-id="u6e4afd70" id="u6e4afd70" class="lake-fontsize-12">-- 是真正实现了接口模块的项目</span></p><p data-lake-id="uaf02a254" id="uaf02a254" style="text-indent: 2em"><span data-lake-id="u18821440" id="u18821440" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">整个模块的结构如下：</span></p><p data-lake-id="uab022709" id="uab022709" style="text-indent: 2em"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710332971449-57ccd0a8-767c-4aab-a228-63285f26cfc1.png%22%2C%22taskId%22%3A%22ucb2ba029-ba7e-4ad4-8e9d-b75bb9a53d5%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A481%2C%22height%22%3A325%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A117559%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A481%2C%22originHeight%22%3A325%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLE-PROVIDER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLE%20PROVIDER%20EASYPROVIDEREXAMPLE%20USERSERVICELMPL%20TEST%20TARGET%20POMXML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A71%2C%22y%22%3A5%2C%22width%22%3A138%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLE-PROVIDER%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A32%2C%22width%22%3A22%2C%22height%22%3A11%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A116%2C%22y%22%3A57%2C%22width%22%3A36%2C%22height%22%3A11%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A140%2C%22y%22%3A81%2C%22width%22%3A29%2C%22height%22%3A13%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A161%2C%22y%22%3A106%2C%22width%22%3A33%2C%22height%22%3A11%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A183%2C%22y%22%3A129%2C%22width%22%3A35%2C%22height%22%3A16%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A205%2C%22y%22%3A154%2C%22width%22%3A65%2C%22height%22%3A16%2C%22text%22%3A%22EXAMPLE%22%7D%2C%7B%22x%22%3A229%2C%22y%22%3A179%2C%22width%22%3A65%2C%22height%22%3A16%2C%22text%22%3A%22PROVIDER%22%7D%2C%7B%22x%22%3A252%2C%22y%22%3A204%2C%22width%22%3A155%2C%22height%22%3A16%2C%22text%22%3A%22EASYPROVIDEREXAMPLE%22%7D%2C%7B%22x%22%3A251%2C%22y%22%3A230%2C%22width%22%3A120%2C%22height%22%3A14%2C%22text%22%3A%22USERSERVICELMPL%22%7D%2C%7B%22x%22%3A116%2C%22y%22%3A256%2C%22width%22%3A30%2C%22height%22%3A13%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A281%2C%22width%22%3A48%2C%22height%22%3A14%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A306%2C%22width%22%3A65%2C%22height%22%3A13%2C%22text%22%3A%22POMXML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233f4853%22%2C%22id%22%3A%22u08ba5627%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><details data-lake-id="uda987aa9" id="uda987aa9" open="false" class="lake-collapse"><summary data-lake-id="u0e249a6c" id="u0e249a6c" class="lake-summary"><span data-lake-id="uf57ee20c" id="uf57ee20c" style="color: rgb(47, 48, 52)">example-provider需要引入的依赖</span></summary><p data-lake-id="ue81e6b2e" id="ue81e6b2e"><span data-lake-id="u5d89bdcb" id="u5d89bdcb">依赖需要同时引入rpc框架和common类，common存储数据模型和被调用的接口的信息，rpc负责简化调用操作</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependencies%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Echen-rpc-easy%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Eexample-common%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%3C!--%20https%3A%2F%2Fdoc.hutool.cn%2F%20--%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecn.hutool%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Ehutool-all%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E5.8.16%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C!--%20https%3A%2F%2Fprojectlombok.org%2F%20--%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Elombok%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.18.30%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%3Cscope%3Eprovided%3C%2Fscope%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sTfdg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></details><p data-lake-id="u5c6819bf" id="u5c6819bf" style="text-align: left"><span data-lake-id="ueeb8f9a5" id="ueeb8f9a5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">1） 编写服务实现类UserServiceImpl</span></p><p data-lake-id="ub89f69b5" id="ub89f69b5" style="text-align: left"><span data-lake-id="ue9693131" id="ue9693131" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实现公共模块中定义的用户服务接口。</span></p><p data-lake-id="ufdf4b3cc" id="ufdf4b3cc" style="text-align: left"><span data-lake-id="u7d005318" id="u7d005318" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">功能是打印用户的名称，并且返回参数中的用户对象。</span></p><p data-lake-id="u0c27e223" id="u0c27e223" style="text-align: left"><span data-lake-id="ua6fba393" id="ua6fba393" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22UserServiceImpl%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.provider%3B%5Cn%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%5Cn%20*%20%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F11%5Cn%20*%2F%5Cnpublic%20class%20UserServiceImpl%20implements%20UserService%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20User%20getUser(User%20user)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%A8%E6%88%B7%E5%90%8D%EF%BC%9A%5C%22%20%2B%20user.getName())%3B%5Cn%20%20%20%20%20%20%20%20return%20user%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22UserServiceImpl%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22y3cKf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6d7ca9e2" id="u6d7ca9e2" style="text-align: left"><span data-lake-id="u6485a885" id="u6485a885" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">2） 编写服务提供者启动类 EasyProviderExample，在该类的 main 方法中编写提供服务的代码。</span></p><p data-lake-id="u0c42f2e4" id="u0c42f2e4" style="text-align: left"><span data-lake-id="uafd08fed" id="uafd08fed" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22EasyProviderExample%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.provider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.server.HttpServer%3B%5Cnimport%20com.yybf.chenrpc.server.VertxHttpServer%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%A4%BA%E4%BE%8B%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F11%5Cn%20*%2F%5Cnpublic%20class%20EasyProviderExample%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%20%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%90%8D%E8%B0%83%E7%94%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20LocalRegistry.register(UserService.class.getName()%2C%20UserServiceImpl.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8web%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20HttpServer%20httpServer%20%3D%20new%20VertxHttpServer()%3B%5Cn%20%20%20%20%20%20%20%20httpServer.doStart(18080)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22EasyProviderExample%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qqe7o%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="njdWW" id="njdWW" data-lake-index-type="2"><span data-lake-id="uc4370079" id="uc4370079">服务消费者（</span><span data-lake-id="ud03f12fe" id="ud03f12fe" style="color: rgb(47, 48, 52)">example-comsumer）</span></h4><p data-lake-id="u8f54f977" id="u8f54f977" style="text-indent: 2em"><span data-lake-id="u88db5f14" id="u88db5f14" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">-- 服务消费者是需要调用服务的模块。</span></p><p data-lake-id="u9bc36eed" id="u9bc36eed" style="text-indent: 2em"><span data-lake-id="u8480ca0c" id="u8480ca0c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">整个模块的结构如下：</span></p><p data-lake-id="u1b65ab1f" id="u1b65ab1f" style="text-indent: 2em"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710335164654-43d1f51b-590e-489e-bfbd-b1105135dbdb.png%22%2C%22taskId%22%3A%22u7b4b3171-67ca-4987-b06e-29f63cde5e0%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A476%2C%22height%22%3A355%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A120274%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A476%2C%22originHeight%22%3A355%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLE-CONSUMER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLE%20CONSUMER%20EASYCONSUMEREXAMPLE%20USERSERVICEPROXY%20TEST%20JAVA%20TARGET%20POM.XML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A68%2C%22y%22%3A13%2C%22width%22%3A149%2C%22height%22%3A14%2C%22text%22%3A%22EXAMPLE-CONSUMER%22%7D%2C%7B%22x%22%3A89%2C%22y%22%3A38%2C%22width%22%3A23%2C%22height%22%3A11%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A112%2C%22y%22%3A62%2C%22width%22%3A37%2C%22height%22%3A13%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A136%2C%22y%22%3A87%2C%22width%22%3A28%2C%22height%22%3A13%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A113%2C%22width%22%3A32%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A179%2C%22y%22%3A135%2C%22width%22%3A35%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A202%2C%22y%22%3A162%2C%22width%22%3A63%2C%22height%22%3A14%2C%22text%22%3A%22EXAMPLE%22%7D%2C%7B%22x%22%3A225%2C%22y%22%3A188%2C%22width%22%3A74%2C%22height%22%3A11%2C%22text%22%3A%22CONSUMER%22%7D%2C%7B%22x%22%3A247%2C%22y%22%3A211%2C%22width%22%3A168%2C%22height%22%3A16%2C%22text%22%3A%22EASYCONSUMEREXAMPLE%22%7D%2C%7B%22x%22%3A247%2C%22y%22%3A235%2C%22width%22%3A128%2C%22height%22%3A17%2C%22text%22%3A%22USERSERVICEPROXY%22%7D%2C%7B%22x%22%3A114%2C%22y%22%3A263%2C%22width%22%3A29%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A138%2C%22y%22%3A288%2C%22width%22%3A27%2C%22height%22%3A12%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A90%2C%22y%22%3A313%2C%22width%22%3A48%2C%22height%22%3A13%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A92%2C%22y%22%3A337%2C%22width%22%3A62%2C%22height%22%3A13%2C%22text%22%3A%22POM.XML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23414a55%22%2C%22id%22%3A%22u0c8b10c2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><details data-lake-id="u9d07b134" id="u9d07b134" open="false" class="lake-collapse"><summary data-lake-id="u5b7f74c3" id="u5b7f74c3" class="lake-summary"><span data-lake-id="ue0ebd5f5" id="ue0ebd5f5" style="color: rgb(47, 48, 52)">example-consumer需要引入的依赖</span></summary><p data-lake-id="u2ec80544" id="u2ec80544"><span data-lake-id="ucba7912a" id="ucba7912a">依赖需要同时引入rpc框架和common类，common存储数据模型和被调用的接口的信息，rpc负责简化调用操作</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependencies%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Echen-rpc-easy%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Eexample-common%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%5Cn%20%20%20%20%3C!--%20https%3A%2F%2Fdoc.hutool.cn%2F%20--%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Ecn.hutool%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Ehutool-all%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E5.8.16%3C%2Fversion%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C!--%20https%3A%2F%2Fprojectlombok.org%2F%20--%3E%5Cn%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%3CartifactId%3Elombok%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%3Cversion%3E1.18.30%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%3Cscope%3Eprovided%3C%2Fscope%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Aeuyz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></details><p data-lake-id="ub6e03ee5" id="ub6e03ee5" style="text-align: left"><span data-lake-id="u7ead4dad" id="u7ead4dad" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">1） 创建服务消费者启动类 EasyConsumerExample，编写调用接口的代码。</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22EasyConsumerExample%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.consumer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.proxy.ServiceProxyFactory%3B%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E7%A4%BA%E4%BE%8B%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F11%5Cn%20*%2F%5Cnpublic%20class%20EasyConsumerExample%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96UserService%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%5Cn%2F%2F%20%20%20%20%20%20%20%20UserService%20userService%20%3D%20new%20UserServiceProxy()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20%20%20%20UserService%20userService%20%3D%20ServiceProxyFactory.getProxy(UserService.class)%3B%5Cn%20%20%20%20%20%20%20%20User%20user%20%3D%20new%20User()%3B%5Cn%20%20%20%20%20%20%20%20user.setName(%5C%22yybf%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20User%20newUser%20%3D%20userService.getUser(user)%3B%5Cn%20%20%20%20%20%20%20%20if%20(newUser%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(newUser.getName())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22user%20%3D%3D%20null%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22EasyConsumerExample%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22x6FMU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><blockquote data-lake-id="u1fdb733d" id="u1fdb733d"><p data-lake-id="u7a5696f6" id="u7a5696f6" style="text-align: left"><span data-lake-id="u79e698bc" id="u79e698bc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">该类就是模拟在项目中调用别的项目的服务</span></p></blockquote><p data-lake-id="u050808cc" id="u050808cc" style="text-align: left"><span data-lake-id="ud298b763" id="ud298b763" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u8f4c2427" id="u8f4c2427" style="text-align: left"><span data-lake-id="u276f85e2" id="u276f85e2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">2） 创建一个UserService的代理类</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22UserServiceProxy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.consumer%3B%5Cn%5Cnimport%20cn.hutool.http.HttpRequest%3B%5Cnimport%20cn.hutool.http.HttpResponse%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.serializer.JdkSerializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20UserServiceProxy%20implements%20UserService%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20User%20getUser(User%20user)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20Serializer%20serializer%20%3D%20new%20JdkSerializer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(UserService.class.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(%5C%22getUser%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(new%20Class%5B%5D%7BUser.class%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(new%20Object%5B%5D%7Buser%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%AF%B7%E6%B1%82%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20bodyBytes%20%3D%20serializer.serializer(rpcRequest)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20result%20%3D%20null%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try(HttpResponse%20httpResponse%20%3D%20HttpRequest.post(%5C%22http%3A%2F%2Flocalhost%3A18080%5C%22).body(bodyBytes).execute())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20httpResponse.bodyBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%93%8D%E5%BA%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20serializer.deserializer(result%2C%20RpcResponse.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20(User)%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22UserServiceProxy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Zpasj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2e64ceb5" id="u2e64ceb5" style="text-align: left"><span data-lake-id="ub4149575" id="ub4149575" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里是通过使用静态代理的方法来简化消费方的调用。</span></p><p data-lake-id="ubcd24dbb" id="ubcd24dbb" style="text-align: left"><span data-lake-id="u877a715a" id="u877a715a" class="lake-fontsize-12">静态代理详解：</span><a href="#ah6ko" data-lake-id="ud39d86be" id="ud39d86be"><span data-lake-id="ud4f165c4" id="ud4f165c4" class="lake-fontsize-12">https://www.yuque.com/yangyibufeng/lokkqq/emdt8u7fn84htl50#ah6ko</span></a></p><card type="block" name="hr" value="data:%7B%22id%22%3A%22M3qYc%22%7D"></card><h4 data-lake-id="lINql" id="lINql" data-lake-index-type="2"><span data-lake-id="u9638c774" id="u9638c774" style="color: rgb(47, 48, 52)">简易RPC框架（</span><span data-lake-id="u39bc5001" id="u39bc5001" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">chen-rpc-easy）</span></h4><p data-lake-id="ua15463b2" id="ua15463b2"><span data-lake-id="u53bae5ee" id="u53bae5ee" class="lake-fontsize-12">这个项目中包含了例如：封装的rpc请求响应实体类，代理类，注册中心，序列化器，web服务等用于为consumer和provider提供RPC服务的类。</span></p><p data-lake-id="u382b7222" id="u382b7222"><span data-lake-id="u16aeb79f" id="u16aeb79f" class="lake-fontsize-12">下面将详细分析项目的核心功能 -- 简易RPC框架（chen-rpc-easy）</span></p><p data-lake-id="u64de7db7" id="u64de7db7"><span data-lake-id="u040bc9d1" id="u040bc9d1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">整个模块的结构如下：</span></p><p data-lake-id="u5d14c469" id="u5d14c469"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710336482396-385998bc-21ee-424a-988b-d30ccb668702.png%22%2C%22taskId%22%3A%22u58f9dc9b-3355-4fa8-9db8-e8a9f5f324d%22%2C%22clientId%22%3A%22u4c721396-00ec-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A466%2C%22height%22%3A627%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A183294%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A466%2C%22originHeight%22%3A627%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CHEN-RPC-EASY%20SRC%20MAIN%20JAVA%20COM%20YYBF%20CHENRPC%20MODEL%20RPCREQUEST%20RPCRESPONSE%20PROXY%20SERVICEPROXY%20SERVICEPROXYFACTORY%20REGISTRY%20LOCALREGISTRY%20SERIALIZER%20JDKSERIALIZER%20SERIALIZER%20SERVER%20HTTPSERVER%20HTTPSERVERHANDLER%20VERTXHTTPSERVER%20TEST%20TARGET%20M%20POM.XML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A52%2C%22y%22%3A6%2C%22width%22%3A110%2C%22height%22%3A16%2C%22text%22%3A%22CHEN-RPC-EASY%22%7D%2C%7B%22x%22%3A72%2C%22y%22%3A33%2C%22width%22%3A23%2C%22height%22%3A11%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A57%2C%22width%22%3A37%2C%22height%22%3A12%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A117%2C%22y%22%3A81%2C%22width%22%3A31%2C%22height%22%3A15%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A107%2C%22width%22%3A34%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A130%2C%22width%22%3A35%2C%22height%22%3A16%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A185%2C%22y%22%3A156%2C%22width%22%3A62%2C%22height%22%3A15%2C%22text%22%3A%22CHENRPC%22%7D%2C%7B%22x%22%3A209%2C%22y%22%3A181%2C%22width%22%3A47%2C%22height%22%3A12%2C%22text%22%3A%22MODEL%22%7D%2C%7B%22x%22%3A229%2C%22y%22%3A206%2C%22width%22%3A92%2C%22height%22%3A16%2C%22text%22%3A%22RPCREQUEST%22%7D%2C%7B%22x%22%3A230%2C%22y%22%3A230%2C%22width%22%3A101%2C%22height%22%3A17%2C%22text%22%3A%22RPCRESPONSE%22%7D%2C%7B%22x%22%3A207%2C%22y%22%3A257%2C%22width%22%3A44%2C%22height%22%3A15%2C%22text%22%3A%22PROXY%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A280%2C%22width%22%3A96%2C%22height%22%3A17%2C%22text%22%3A%22SERVICEPROXY%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A304%2C%22width%22%3A151%2C%22height%22%3A21%2C%22text%22%3A%22SERVICEPROXYFACTORY%22%7D%2C%7B%22x%22%3A206%2C%22y%22%3A330%2C%22width%22%3A61%2C%22height%22%3A19%2C%22text%22%3A%22REGISTRY%22%7D%2C%7B%22x%22%3A230%2C%22y%22%3A355%2C%22width%22%3A100%2C%22height%22%3A18%2C%22text%22%3A%22LOCALREGISTRY%22%7D%2C%7B%22x%22%3A208%2C%22y%22%3A381%2C%22width%22%3A67%2C%22height%22%3A14%2C%22text%22%3A%22SERIALIZER%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A405%2C%22width%22%3A90%2C%22height%22%3A16%2C%22text%22%3A%22JDKSERIALIZER%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A430%2C%22width%22%3A67%2C%22height%22%3A14%2C%22text%22%3A%22SERIALIZER%22%7D%2C%7B%22x%22%3A208%2C%22y%22%3A458%2C%22width%22%3A46%2C%22height%22%3A10%2C%22text%22%3A%22SERVER%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A482%2C%22width%22%3A81%2C%22height%22%3A13%2C%22text%22%3A%22HTTPSERVER%22%7D%2C%7B%22x%22%3A230%2C%22y%22%3A505%2C%22width%22%3A141%2C%22height%22%3A15%2C%22text%22%3A%22HTTPSERVERHANDLER%22%7D%2C%7B%22x%22%3A230%2C%22y%22%3A531%2C%22width%22%3A122%2C%22height%22%3A15%2C%22text%22%3A%22VERTXHTTPSERVER%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A558%2C%22width%22%3A29%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A583%2C%22width%22%3A47%2C%22height%22%3A12%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A49%2C%22y%22%3A605%2C%22width%22%3A18%2C%22height%22%3A16%2C%22text%22%3A%22M%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A607%2C%22width%22%3A65%2C%22height%22%3A13%2C%22text%22%3A%22POM.XML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23434d58%22%2C%22id%22%3A%22u200e18b4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uba477256" id="uba477256" style="text-align: left"><span data-lake-id="u9da78288" id="u9da78288" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="TJlpR" id="TJlpR"><span data-lake-id="u4f8c5630" id="u4f8c5630" style="color: rgb(47, 48, 52)">简易RPC框架</span></h3><h4 data-lake-id="AgAY1" id="AgAY1" collapsed="true" style="text-align: left"><span data-lake-id="u72cf8ef5" id="u72cf8ef5" style="color: rgb(47, 48, 52)">本地服务注册器</span><span data-lake-id="ued4e4567" id="ued4e4567" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span></h4><p data-lake-id="u053c138d" id="u053c138d" style="text-align: left"><span data-lake-id="u16d9e553" id="u16d9e553" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 RPC 模块中创建本地服务注册器 LocalRegistry</span></p><p data-lake-id="u804c9e19" id="u804c9e19" style="text-align: left"><span data-lake-id="uc4d1ad92" id="uc4d1ad92" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="udb49a45a" id="udb49a45a" style="text-align: left"><span data-lake-id="u6847f71b" id="u6847f71b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">现在做的简易 RPC 框架主要是跑通流程，所以暂时先不用第三方注册中心，直接把服务注册到服务提供者</span></p><p data-lake-id="u2aa91b37" id="u2aa91b37" style="text-align: left"><span data-lake-id="udb908c91" id="udb908c91" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">本地即可。</span></p><p data-lake-id="u88d2753c" id="u88d2753c" style="text-align: left"><span data-lake-id="ueaf98794" id="ueaf98794" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u93f753c3" id="u93f753c3" style="text-align: left"><span data-lake-id="ud09ac809" id="ud09ac809" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用线程安全的 ConcurrentHashMap 存储服务注册信息，key 为服务名称、value 为服务的实现类。之</span></p><p data-lake-id="u6ae10ff4" id="u6ae10ff4" style="text-align: left"><span data-lake-id="u91c51fda" id="u91c51fda" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">后就可以根据要调用的服务名称获取到对应的实现类，然后通过反射进行方法调用了。</span></p><p data-lake-id="ua495f8af" id="ua495f8af" style="text-align: left"><span data-lake-id="ue9aa4f63" id="ue9aa4f63" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uad52c681" id="uad52c681" style="text-align: left"><span data-lake-id="u118a0ad5" id="u118a0ad5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22LocalRegistry%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.ConcurrentHashMap%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cnpublic%20class%20LocalRegistry%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%20%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%20ConcurrentHashMap%E5%AD%98%E5%82%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20final%20Map%3CString%2C%20Class%3C%3F%3E%3E%20map%20%3D%20new%20ConcurrentHashMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20register(String%20serviceName%2C%20Class%3C%3F%3E%20implClass)%20%7B%5Cn%20%20%20%20%20%20%20%20map.put(serviceName%2C%20implClass)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Class%3C%3F%3E%20get(String%20serviceName)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20map.get(serviceName)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%88%A0%E9%99%A4%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20remove(String%20serviceName)%20%7B%5Cn%20%20%20%20%20%20%20%20map.remove(serviceName)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22LocalRegistry%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cnUv3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ucf74ea1c" id="ucf74ea1c"><br></p><blockquote data-lake-id="ue38f6452" id="ue38f6452" class="lake-alert lake-alert-color2"><p data-lake-id="ua425bac8" id="ua425bac8"><strong><span data-lake-id="u697cb55d" id="u697cb55d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注意，本地服务注册器和注册中心的作用是有区别的。</span></strong></p><p data-lake-id="ufefe5e61" id="ufefe5e61"><strong><span data-lake-id="u082a0590" id="u082a0590" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注册中心的作用侧重于管理注册的服务、提供服务信息给消费者；</span></strong></p><p data-lake-id="u394e77ff" id="u394e77ff"><strong><span data-lake-id="u248f3861" id="u248f3861" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">而本地服务注册器的作用是根据服务名获取到对应的实现类，是完成调用必不可少的模块。</span></strong></p></blockquote><p data-lake-id="ua147bb7b" id="ua147bb7b"><br></p><p data-lake-id="u43667538" id="u43667538"><span data-lake-id="u6c7f1ca0" id="u6c7f1ca0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务提供者启动时，需要注册服务到注册器中</span></p><p data-lake-id="ue04cf001" id="ue04cf001"><span data-lake-id="ue7711c12" id="ue7711c12" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ubc101c93" id="ubc101c93"><span data-lake-id="u693a0387" id="u693a0387" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5CnLocalRegistry.register(UserService.class.getName()%2C%20UserServiceImpl.class)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pGrAr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u00f3cca1" id="u00f3cca1"><br></p><h4 data-lake-id="JQg8e" id="JQg8e"><span data-lake-id="u365f5244" id="u365f5244">序列化器</span></h4><p data-lake-id="u226c65ea" id="u226c65ea" style="text-align: left"><span data-lake-id="uf268decb" id="uf268decb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务在本地注册后，就可以根据请求信息取出实现类并调用方法了。</span></p><p data-lake-id="u4db8ed98" id="u4db8ed98" style="text-align: left"><span data-lake-id="ue12bc7bd" id="ue12bc7bd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但是在编写处理请求的逻辑前，要先实现序列化器模块。因为无论是请求或响应，都会涉及参数的传输。</span></p><p data-lake-id="ua3a78e85" id="ua3a78e85" style="text-align: left"><span data-lake-id="u83268081" id="u83268081" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">而 Java 对象是存活在 JVM 虚拟机中的，如果想在其他位置存储并访问、或者在网络中进行传输，就需要</span></p><p data-lake-id="ua1029ce7" id="ua1029ce7" style="text-align: left"><span data-lake-id="u14d57fdf" id="u14d57fdf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">进行序列化和反序列化。</span></p><p data-lake-id="u7c103cf1" id="u7c103cf1" style="text-align: left"><span data-lake-id="uefe1b9a8" id="uefe1b9a8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><blockquote data-lake-id="u9eab6656" id="u9eab6656" class="lake-alert lake-alert-color2"><p data-lake-id="ua3e85247" id="ua3e85247" style="text-align: left"><span data-lake-id="u684f7d5b" id="u684f7d5b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">什么是序列化和反序列化呢？</span></p><ol list="uc2a711a5"><li fid="uc6f8e9fd" data-lake-id="u80caf615" id="u80caf615" style="text-align: left"><span data-lake-id="u15073abb" id="u15073abb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化：将 Java 对象转为可传输的字节数组。</span></li><li fid="uc6f8e9fd" data-lake-id="u9a7dcb43" id="u9a7dcb43" style="text-align: left"><span data-lake-id="u406c0a1d" id="u406c0a1d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">反序列化：将字节数组转换为 Java 对象。</span></li></ol><p data-lake-id="u06d39802" id="u06d39802" style="text-align: left"><span data-lake-id="ud740c8bb" id="ud740c8bb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">有很多种不同的序列化方式，比如 Java 原生序列化、JSON、Hessian、Kryo、protobuf 等。</span></p></blockquote><p data-lake-id="u369f7d51" id="u369f7d51"><br></p><p data-lake-id="u39efb491" id="u39efb491" style="text-align: left"><span data-lake-id="ua7bbb1a4" id="ua7bbb1a4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">为了实现方便，此处选择 Java 原生的序列化器。</span></p><h5 data-lake-id="NyJG6" id="NyJG6"><span data-lake-id="ud0c73f4f" id="ud0c73f4f" style="color: rgb(47, 48, 52)">1）在 RPC 模块中编写序列化接口 Serializer</span></h5><p data-lake-id="u12ada6fa" id="u12ada6fa" style="text-align: left; text-indent: 2em"><span data-lake-id="u9cb3bf67" id="u9cb3bf67" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">-- 提供序列化和反序列化两个方法，便于后续扩展更多的序列化器。</span></p><p data-lake-id="u018ebe56" id="u018ebe56" style="text-align: left"><span data-lake-id="ue5be07ea" id="ue5be07ea" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22Serializer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E6%8E%A5%E5%8F%A3%5Cn%20*%20%40date%202024%2F3%2F12-21%3A55%5Cn%20*%2F%5Cnpublic%20interface%20Serializer%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20object%3A%20%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%40return%20byte%5B%5D%3A%20%E5%BA%8F%E5%88%97%E5%8C%96%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F12%2021%3A57%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%3CT%3E%20byte%5B%5D%20serializer(T%20object)%20throws%20IOException%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20bytes%3A%20%E9%9C%80%E8%A6%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20%40param%20type%3A%20%20%E9%9C%80%E8%A6%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40return%20T%3A%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E7%B1%BB%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F12%2021%3A57%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%3CT%3E%20T%20deserializer(byte%5B%5D%20bytes%2C%20Class%3CT%3E%20type)%20throws%20IOException%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22Serializer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q61yf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h5 data-lake-id="wZw9A" id="wZw9A"><span data-lake-id="u8c4dc2b5" id="u8c4dc2b5" style="color: rgb(47, 48, 52)">2）基于 Java 自带的序列化器实现 JdkSerializer</span></h5><p data-lake-id="u9574638e" id="u9574638e" style="text-align: left"><span data-lake-id="u6b706a26" id="u6b706a26" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22JdkSerializer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20java.io.*%3B%5Cn%5Cn%2F**%5Cn%20*%20JDK%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cnpublic%20class%20JdkSerializer%20implements%20Serializer%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20object%3A%5Cn%20%20%20%20%20*%20%40return%20byte%5B%5D%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F12%2022%3A00%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20byte%5B%5D%20serializer(T%20object)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayOutputStream%20outputStream%20%3D%20new%20ByteArrayOutputStream()%3B%5Cn%20%20%20%20%20%20%20%20ObjectOutputStream%20objectOutputStream%20%3D%20new%20ObjectOutputStream(outputStream)%3B%5Cn%20%20%20%20%20%20%20%20objectOutputStream.writeObject(object)%3B%5Cn%20%20%20%20%20%20%20%20objectOutputStream.close()%3B%5Cn%20%20%20%20%20%20%20%20return%20outputStream.toByteArray()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20bytes%3A%5Cn%20%20%20%20%20*%20%40param%20type%3A%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F12%2022%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20T%20deserializer(byte%5B%5D%20bytes%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayInputStream%20inputStream%20%3D%20new%20ByteArrayInputStream(bytes)%3B%5Cn%20%20%20%20%20%20%20%20ObjectInputStream%20objectInputStream%20%3D%20new%20ObjectInputStream(inputStream)%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20(T)%20objectInputStream.readObject()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(ClassNotFoundException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20finally%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20objectInputStream.close()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22JdkSerializer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u8gxM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u3d7c9ea4" id="u3d7c9ea4" open="false" class="lake-collapse"><summary data-lake-id="u602e0ecb" id="u602e0ecb" class="lake-summary"><span data-lake-id="u6f05bcf3" id="u6f05bcf3" class="lake-fontsize-12">关于序列化代码的解释</span></summary><p data-lake-id="u40409149" id="u40409149"><span data-lake-id="u215f0e5d" id="u215f0e5d">上面的 Java 方法 </span><code data-lake-id="u61ab03b7" id="u61ab03b7"><span data-lake-id="uede57973" id="uede57973" style="color: #A58F04">serializer</span></code><span data-lake-id="u228b85ef" id="u228b85ef"> 是一个泛型方法，用于将任何实现了 </span><code data-lake-id="u544c78ac" id="u544c78ac"><span data-lake-id="u492e0be4" id="u492e0be4" style="color: #A58F04">Serializable</span></code><span data-lake-id="u30ebe5fe" id="u30ebe5fe" style="color: #A58F04"> </span><span data-lake-id="ufa7084cb" id="ufa7084cb">接口的 Java 对象序列化为一个字节数组。这里是它的步骤解释：</span></p><p data-lake-id="ud09f02f7" id="ud09f02f7"><br></p><ol list="u33d9abba"><li fid="ua26f4ec0" data-lake-id="u53b8a161" id="u53b8a161"><span data-lake-id="u89a91824" id="u89a91824"> </span><strong><span data-lake-id="u73014eb2" id="u73014eb2">创建 </span></strong><code data-lake-id="u9b9df3ab" id="u9b9df3ab"><strong><span data-lake-id="uf8be9bb1" id="uf8be9bb1" style="color: #A58F04">ByteArrayOutputStream</span></strong></code><strong><span data-lake-id="u9e23afa9" id="u9e23afa9"> 实例</span></strong><span data-lake-id="u20408ee6" id="u20408ee6">：这个流会收集写入其中的数据，并将数据转换为字节数组。 </span></li><li fid="ua26f4ec0" data-lake-id="u2be0f2d3" id="u2be0f2d3"><span data-lake-id="u76af4cf7" id="u76af4cf7"> </span><strong><span data-lake-id="ua91eb8aa" id="ua91eb8aa">创建 </span></strong><code data-lake-id="ueac0c957" id="ueac0c957"><strong><span data-lake-id="u6b74bb2a" id="u6b74bb2a" style="color: #A58F04">ObjectOutputStream</span></strong></code><strong><span data-lake-id="u37f72a5d" id="u37f72a5d" style="color: #A58F04"> </span></strong><strong><span data-lake-id="udb566ad3" id="udb566ad3">实例</span></strong><span data-lake-id="u71f954d9" id="u71f954d9">：这个流包装了 </span><code data-lake-id="ua37cfa2c" id="ua37cfa2c"><span data-lake-id="u142f7dfc" id="u142f7dfc" style="color: #A58F04">ByteArrayOutputStream</span></code><span data-lake-id="u09679d36" id="u09679d36" style="color: #A58F04"> </span><span data-lake-id="uceb4388a" id="uceb4388a">实例，提供了将对象写入字节流的能力。 </span></li><li fid="ua26f4ec0" data-lake-id="uf963f27f" id="uf963f27f"><span data-lake-id="u7eae7098" id="u7eae7098"> </span><strong><span data-lake-id="u13b1bee4" id="u13b1bee4">写入对象</span></strong><span data-lake-id="udf717f7e" id="udf717f7e">：</span><code data-lake-id="ua0331e44" id="ua0331e44"><span data-lake-id="u7d9685f8" id="u7d9685f8" style="color: #A58F04">objectOutputStream</span><span data-lake-id="u7c7c89fd" id="u7c7c89fd">.</span><span data-lake-id="ubf3f5347" id="ubf3f5347" style="color: #A58F04">writeObject</span><span data-lake-id="u6b1aea85" id="u6b1aea85">(</span><span data-lake-id="u94c732ef" id="u94c732ef" style="color: #A58F04">object</span><span data-lake-id="u29cde3df" id="u29cde3df">)</span></code><span data-lake-id="udf41cbb1" id="udf41cbb1"> 调用实际执行序列化动作，将传入的对象转换为一系列字节。 </span></li><li fid="ua26f4ec0" data-lake-id="u8087ae90" id="u8087ae90"><span data-lake-id="u22834ed0" id="u22834ed0"> </span><strong><span data-lake-id="u226f0103" id="u226f0103">关闭流</span></strong><span data-lake-id="u99ce5aa0" id="u99ce5aa0">：在序列化完成后，通过 </span><code data-lake-id="u41ba945c" id="u41ba945c"><span data-lake-id="ubfcf9dd8" id="ubfcf9dd8" style="color: #A58F04">objectOutputStream.close()</span></code><span data-lake-id="ue6a86713" id="ue6a86713"> 关闭 </span><code data-lake-id="u76ef12ca" id="u76ef12ca"><span data-lake-id="u53d07fb6" id="u53d07fb6" style="color: #A58F04">ObjectOutputStream</span></code><span data-lake-id="u61b3f020" id="u61b3f020">。这个调用也会传递给包装的 </span><code data-lake-id="u89ec2556" id="u89ec2556"><span data-lake-id="u6983c8a6" id="u6983c8a6" style="color: #A58F04">ByteArrayOutputStream</span></code><span data-lake-id="u5282390d" id="u5282390d" style="color: #A58F04"> </span><span data-lake-id="uf547f2a8" id="uf547f2a8">并关闭它。不过，对于 </span><code data-lake-id="u4bfca242" id="u4bfca242"><span data-lake-id="u8c05fad6" id="u8c05fad6" style="color: #A58F04">ByteArrayOutputStream</span></code><span data-lake-id="u11d01230" id="u11d01230"> 来说，调用 </span><code data-lake-id="u5abde80f" id="u5abde80f"><span data-lake-id="uc9f8930f" id="uc9f8930f" style="color: #A58F04">close</span><span data-lake-id="u563e8848" id="u563e8848">()</span></code><span data-lake-id="u0aa5cbb2" id="u0aa5cbb2"> 方法不是必须的，因为它的关闭实现是空的，不会释放任何系统资源。 </span></li><li fid="ua26f4ec0" data-lake-id="u7b9b0531" id="u7b9b0531"><span data-lake-id="u4a3a28b7" id="u4a3a28b7"> </span><strong><span data-lake-id="u5388816d" id="u5388816d">获取字节数组</span></strong><span data-lake-id="u5fa74fdf" id="u5fa74fdf">：</span><code data-lake-id="ub3f50f93" id="ub3f50f93"><span data-lake-id="uc27ae8e0" id="uc27ae8e0" style="color: #A58F04">outputStream</span><span data-lake-id="uf304f2d7" id="uf304f2d7">.</span><span data-lake-id="u05d5a68e" id="u05d5a68e" style="color: #A58F04">toByteArray</span><span data-lake-id="u1ab616dd" id="u1ab616dd">()</span></code><span data-lake-id="ud780b8df" id="ud780b8df"> 从 </span><code data-lake-id="u451e673c" id="u451e673c"><span data-lake-id="u21e1ffe7" id="u21e1ffe7" style="color: #A58F04">ByteArrayOutputStream</span></code><span data-lake-id="u07ffc876" id="u07ffc876" style="color: #A58F04"> </span><span data-lake-id="ucf1872af" id="ucf1872af">中提取字节数据，这就是序列化对象的最终字节数组形式。 </span></li></ol><p data-lake-id="uca670710" id="uca670710"><br></p><p data-lake-id="ueaaeedab" id="ueaaeedab"><span data-lake-id="u2c7024d1" id="u2c7024d1">整个方法被声明为抛出 </span><code data-lake-id="u3a98d30f" id="u3a98d30f"><span data-lake-id="udae1a86b" id="udae1a86b" style="color: #A58F04">IOException</span></code><span data-lake-id="uefed43eb" id="uefed43eb">，这是因为序列化过程中可能会出现 I/O 相关的异常，尽管实际上 </span><code data-lake-id="uda11413c" id="uda11413c"><span data-lake-id="u506360c3" id="u506360c3" style="color: #A58F04">ByteArrayOutputStream</span></code><span data-lake-id="ua9f4dd50" id="ua9f4dd50" style="color: #A58F04"> </span><span data-lake-id="u73265708" id="u73265708">不会产生这样的异常。但是 </span><code data-lake-id="u2c0df6b4" id="u2c0df6b4"><span data-lake-id="u9d0ff767" id="u9d0ff767" style="color: #A58F04">ObjectOutputStream</span></code><span data-lake-id="ue26e703c" id="ue26e703c" style="color: #A58F04"> </span><span data-lake-id="u4de07c3d" id="u4de07c3d">在写入对象时可能会抛出 </span><code data-lake-id="ucf0b6fd0" id="ucf0b6fd0"><span data-lake-id="u8110a91c" id="u8110a91c" style="color: #A58F04">IOException</span></code><span data-lake-id="ufe183a87" id="ufe183a87">，比如当对象不支持序列化（即没有实现 </span><code data-lake-id="u923bfcb4" id="u923bfcb4"><span data-lake-id="u1938a9f5" id="u1938a9f5" style="color: #A58F04">Serializable</span></code><span data-lake-id="ue56fc61f" id="ue56fc61f" style="color: #A58F04"> </span><span data-lake-id="u4707b663" id="u4707b663">接口）时。</span></p><p data-lake-id="uc821bba9" id="uc821bba9"><br></p><p data-lake-id="u485770de" id="u485770de"><span data-lake-id="u858d647b" id="u858d647b">安全隐患方面，如前所述，Java 序列化存在多个已知的安全问题，特别是与不信任的数据源进行交互时。应当谨慎处理输入的序列化数据，并考虑使用更现代和安全的序列化机制。</span></p></details><p data-lake-id="u191b3aa5" id="u191b3aa5" style="text-align: left"><strong><span data-lake-id="ue4f18513" id="ue4f18513" class="lake-fontsize-12" style="color: #FBDE28">上面这段代码无需记忆，需要用到的时候照抄即可，关键是要理解序列化和反序列化的区别。</span></strong></p><h5 data-lake-id="iQkF3" id="iQkF3"><span data-lake-id="u4b858df9" id="u4b858df9" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">注意：Java原生的序列化器不推荐使用原因如下：</span></h5><details data-lake-id="u98609873" id="u98609873" open="false" class="lake-collapse"><summary data-lake-id="u13d2479d" id="u13d2479d" class="lake-summary"><strong><span data-lake-id="u15a4a615" id="u15a4a615" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">Java原生的序列化器不推荐使用的原因</span></strong></summary><p data-lake-id="u3e47d1d1" id="u3e47d1d1"><strong><span data-lake-id="uf783f6f4" id="uf783f6f4" class="lake-fontsize-12" style="color: #FBDE28">我们很少或者说几乎不会直接使用 JDK 自带的序列化方式，主要原因有下面这些原因：</span></strong></p><ul list="u1578fb21"><li fid="u8046c159" data-lake-id="uaf2741b9" id="uaf2741b9"><strong><span data-lake-id="ua420745a" id="ua420745a" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">不支持跨语言调用</span></strong><strong><span data-lake-id="u87413fd0" id="u87413fd0" class="lake-fontsize-12" style="color: #FBDE28"> : 如果调用的是其他语言开发的服务的时候就不支持了。</span></strong></li><li fid="u8046c159" data-lake-id="uf5b7534a" id="uf5b7534a"><strong><span data-lake-id="ua59b477c" id="ua59b477c" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">性能差</span></strong><strong><span data-lake-id="u242163af" id="u242163af" class="lake-fontsize-12" style="color: #FBDE28">：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。</span></strong></li><li fid="u8046c159" data-lake-id="u1d78da5f" id="u1d78da5f"><strong><span data-lake-id="u540b7791" id="u540b7791" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">存在安全问题</span></strong><strong><span data-lake-id="ue87f4e0c" id="ue87f4e0c" class="lake-fontsize-12" style="color: #FBDE28">：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。相关阅读：</span></strong><a href="https://cryin.github.io/blog/secure-development-java-deserialization-vulnerability/" target="_blank" data-lake-id="ub209c209" id="ub209c209"><strong><span data-lake-id="uaf820ef6" id="uaf820ef6" class="lake-fontsize-12" style="color: #FBDE28">应用安全：JAVA 反序列化漏洞之殇open in new window</span></strong></a><strong><span data-lake-id="u23034167" id="u23034167" class="lake-fontsize-12" style="color: #FBDE28"> 。</span></strong></li></ul></details><details data-lake-id="u22f1eaa6" id="u22f1eaa6" open="false" class="lake-collapse"><summary data-lake-id="u71605379" id="u71605379" class="lake-summary"><span data-lake-id="u0d6b462d" id="u0d6b462d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">关于序列化代码</span></summary><p data-lake-id="ufbd8bd14" id="ufbd8bd14"><span data-lake-id="u46a9de3a" id="u46a9de3a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这段代码是一个序列化方法，其作用是将任何实现了</span><code data-lake-id="u6667aadc" id="u6667aadc"><span data-lake-id="ubdf668d4" id="ubdf668d4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Serializable</span></code><span data-lake-id="u5ac79e80" id="u5ac79e80" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">接口的对象</span><code data-lake-id="u1d62fcb0" id="u1d62fcb0"><span data-lake-id="u76f6ef16" id="u76f6ef16" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">object</span></code><span data-lake-id="ucd7b2f71" id="ucd7b2f71" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">转换为一个字节数组</span><code data-lake-id="u42c29067" id="u42c29067"><span data-lake-id="u8d770939" id="u8d770939" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">byte[]</span></code><span data-lake-id="uea2a1f24" id="uea2a1f24" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。这个过程通常用于准备将对象通过文件、数据库或网络等途径保存或传输。下面是对这个方法的逐行解释：</span></p><p data-lake-id="ufaea9ebf" id="ufaea9ebf"><br></p><ol list="u065c901a"><li fid="uf081b10c" data-lake-id="u45888b75" id="u45888b75"><span data-lake-id="u76d77bbf" id="u76d77bbf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="ud1135866" id="ud1135866"><span data-lake-id="uef2afba7" id="uef2afba7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">public &lt;T&gt; byte[] serializer(T object) throws IOException {</span></code><span data-lake-id="u138ad248" id="u138ad248" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="u69978fa4" data-lake-indent="1"><li fid="u5f11948c" data-lake-id="ucde45d0a" id="ucde45d0a"><code data-lake-id="uf9fff8a6" id="uf9fff8a6"><span data-lake-id="u8ac68764" id="u8ac68764" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">public</span></code><span data-lake-id="u5abc1e82" id="u5abc1e82" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">：方法是公开的，可以被其他类调用。</span></li><li fid="u5f11948c" data-lake-id="ucfe650ae" id="ucfe650ae"><code data-lake-id="uf473dce0" id="uf473dce0"><span data-lake-id="u71afbb0a" id="u71afbb0a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">&lt;T&gt;</span></code><span data-lake-id="ueb8607ae" id="ueb8607ae" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">：这是一个泛型方法，意味着它可以接受任何类型</span><code data-lake-id="u092f90a6" id="u092f90a6"><span data-lake-id="ue70765ce" id="ue70765ce" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">T</span></code><span data-lake-id="u119beb7a" id="u119beb7a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的对象作为输入。</span></li><li fid="u5f11948c" data-lake-id="u91a37499" id="u91a37499"><code data-lake-id="uda7f6e34" id="uda7f6e34"><span data-lake-id="u9bd3e828" id="u9bd3e828" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">byte[]</span></code><span data-lake-id="u8ac254d1" id="u8ac254d1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">：方法返回值类型，表示将返回一个字节数组。</span></li><li fid="u5f11948c" data-lake-id="u53351fec" id="u53351fec"><code data-lake-id="uf91dcfe6" id="uf91dcfe6"><span data-lake-id="u834bb357" id="u834bb357" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">serializer(T object)</span></code><span data-lake-id="u9a6a7628" id="u9a6a7628" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">：方法名是</span><code data-lake-id="uc2a6aa5d" id="uc2a6aa5d"><span data-lake-id="u927af03f" id="u927af03f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">serializer</span></code><span data-lake-id="u965c2218" id="u965c2218" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，它接受一个类型为</span><code data-lake-id="u89d58614" id="u89d58614"><span data-lake-id="uf1b3c243" id="uf1b3c243" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">T</span></code><span data-lake-id="ud5eaa872" id="ud5eaa872" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的对象作为参数。</span></li><li fid="u5f11948c" data-lake-id="u11507999" id="u11507999"><code data-lake-id="u6e58f61d" id="u6e58f61d"><span data-lake-id="ub21fc4fc" id="ub21fc4fc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">throws IOException</span></code><span data-lake-id="udfaf85dc" id="udfaf85dc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">：表示这个方法可能会抛出</span><code data-lake-id="uba1b06a7" id="uba1b06a7"><span data-lake-id="u1057f14c" id="u1057f14c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">IOException</span></code><span data-lake-id="u5bfb50eb" id="u5bfb50eb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">异常，这通常是因为序列化过程中涉及到的输入输出操作失败或中断。</span></li></ul><ol list="u1ba2060a" start="2"><li fid="ucfb833f4" data-lake-id="uf21917cb" id="uf21917cb"><span data-lake-id="u8213cf8b" id="u8213cf8b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="u69497e50" id="u69497e50"><span data-lake-id="u9e3abf96" id="u9e3abf96" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream outputStream = new ByteArrayOutputStream();</span></code><span data-lake-id="ud15e65a6" id="ud15e65a6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="u362d5ab8" data-lake-indent="1"><li fid="u081f7fcb" data-lake-id="u1c955ecf" id="u1c955ecf"><span data-lake-id="u26373e45" id="u26373e45" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这行创建了一个</span><code data-lake-id="ua7d7d610" id="ua7d7d610"><span data-lake-id="uff814195" id="uff814195" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream</span></code><span data-lake-id="u739ebc6b" id="u739ebc6b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实例，它是一个可以捕获写入其中的数据，并将数据作为字节数组返回的输出流。</span></li></ul><ol list="ub34c2d21" start="3"><li fid="uc8012f4b" data-lake-id="u9cd2f521" id="u9cd2f521"><span data-lake-id="udd54814d" id="udd54814d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="u322ca906" id="u322ca906"><span data-lake-id="u3ee54e5e" id="u3ee54e5e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);</span></code><span data-lake-id="u07ee5fda" id="u07ee5fda" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="ude189536" data-lake-indent="1"><li fid="u49d72742" data-lake-id="udceb12d1" id="udceb12d1"><span data-lake-id="u55457c25" id="u55457c25" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这行创建了一个</span><code data-lake-id="u8fab5af1" id="u8fab5af1"><span data-lake-id="ue5a656eb" id="ue5a656eb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ObjectOutputStream</span></code><span data-lake-id="uae3bb57c" id="uae3bb57c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实例，它是一个可以将Java对象序列化到</span><code data-lake-id="u6985e39f" id="u6985e39f"><span data-lake-id="u2171aafe" id="u2171aafe" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">OutputStream</span></code><span data-lake-id="u315cba71" id="u315cba71" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的特定输出流。这里它被链接到了前面创建的</span><code data-lake-id="ue992145f" id="ue992145f"><span data-lake-id="u6629adae" id="u6629adae" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream</span></code><span data-lake-id="u9f245268" id="u9f245268" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实例。</span></li></ul><ol list="u2a89e270" start="4"><li fid="ufb2bfade" data-lake-id="ud5da1da6" id="ud5da1da6"><span data-lake-id="uc8b190f3" id="uc8b190f3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="u4bcbca3c" id="u4bcbca3c"><span data-lake-id="uae768df8" id="uae768df8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">objectOutputStream.writeObject(object);</span></code><span data-lake-id="u4d72152f" id="u4d72152f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="uce4cf66e" data-lake-indent="1"><li fid="u61103cc1" data-lake-id="u80001db6" id="u80001db6"><span data-lake-id="u2be9536c" id="u2be9536c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这行代码使用</span><code data-lake-id="ua9c9e2aa" id="ua9c9e2aa"><span data-lake-id="u7bfba84e" id="u7bfba84e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ObjectOutputStream</span></code><span data-lake-id="uf441c7c3" id="uf441c7c3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实例的</span><code data-lake-id="uc4860d1a" id="uc4860d1a"><span data-lake-id="u0ee64d69" id="u0ee64d69" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">writeObject</span></code><span data-lake-id="u42b768c5" id="u42b768c5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">方法将传入的对象</span><code data-lake-id="u53b3c449" id="u53b3c449"><span data-lake-id="uc4acee71" id="uc4acee71" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">object</span></code><span data-lake-id="u522bd217" id="u522bd217" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化。序列化后的数据被写入到</span><code data-lake-id="u7724b3a6" id="u7724b3a6"><span data-lake-id="ubdc38418" id="ubdc38418" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream</span></code><span data-lake-id="u885d6006" id="u885d6006" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">中。</span></li></ul><ol list="ud70d48c0" start="5"><li fid="u49eaf772" data-lake-id="ubd4a91b5" id="ubd4a91b5"><span data-lake-id="u7f4d9f8d" id="u7f4d9f8d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="u4c844af1" id="u4c844af1"><span data-lake-id="ubb2701c1" id="ubb2701c1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">objectOutputStream.close();</span></code><span data-lake-id="u446304c1" id="u446304c1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="u120a4978" data-lake-indent="1"><li fid="u43f1a90b" data-lake-id="ud3c9fd92" id="ud3c9fd92"><span data-lake-id="u0af55c73" id="u0af55c73" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">关闭</span><code data-lake-id="u629e98db" id="u629e98db"><span data-lake-id="uabe4c0b0" id="uabe4c0b0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ObjectOutputStream</span></code><span data-lake-id="u35c66b8a" id="u35c66b8a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实例。关闭流是一个好习惯，以释放系统资源。虽然在这种情况下，由于使用的是</span><code data-lake-id="u1eb9c506" id="u1eb9c506"><span data-lake-id="ue95298fa" id="ue95298fa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream</span></code><span data-lake-id="ub8155eec" id="ub8155eec" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，实际上并不会释放系统资源，但这是一个好的编程习惯。</span></li></ul><ol list="u652b9bde" start="6"><li fid="u58243ee9" data-lake-id="ueb5ada09" id="ueb5ada09"><span data-lake-id="u8f6636a5" id="u8f6636a5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span><code data-lake-id="u698d5007" id="u698d5007"><span data-lake-id="uc2b31ef4" id="uc2b31ef4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">return outputStream.toByteArray();</span></code><span data-lake-id="uf9a9d66c" id="uf9a9d66c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">： </span></li></ol><ul list="u5c409c4f" data-lake-indent="1"><li fid="u955a6444" data-lake-id="ubf7a28cf" id="ubf7a28cf"><span data-lake-id="u8d78bfe5" id="u8d78bfe5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这行代码调用</span><code data-lake-id="u303bcc5c" id="u303bcc5c"><span data-lake-id="u29d31a42" id="u29d31a42" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ByteArrayOutputStream</span></code><span data-lake-id="u9fdd9468" id="u9fdd9468" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的</span><code data-lake-id="uf25d2501" id="uf25d2501"><span data-lake-id="u221c21a3" id="u221c21a3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">toByteArray()</span></code><span data-lake-id="u152e58fb" id="u152e58fb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">方法，将流中积累的所有字节数据返回为一个字节数组。然后，这个字节数组作为方法的返回值。</span></li></ul><p data-lake-id="uec9c610f" id="uec9c610f"><br></p><p data-lake-id="ucff661cd" id="ucff661cd"><span data-lake-id="u47ea0ba1" id="u47ea0ba1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">总的来说，这个方法提供了一种通用方式，通过Java序列化机制将任何可序列化的对象转换为字节数组，这在进行对象的持久化存储或网络传输时非常有用。</span></p></details><h4 data-lake-id="MlZvz" id="MlZvz" collapsed="true"><span data-lake-id="u72ca7fb3" id="u72ca7fb3">请求处理实体类</span></h4><p data-lake-id="ua3c84fe6" id="ua3c84fe6"><br></p><p data-lake-id="u6f5f7d7f" id="u6f5f7d7f" style="text-align: left"><span data-lake-id="u217c9be0" id="u217c9be0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 RPC 模块中编写请求和响应封装类。</span></p><h5 data-lake-id="coOtW" id="coOtW"><span data-lake-id="uc15a7806" id="uc15a7806" style="color: rgb(47, 48, 52)">1）</span><span data-lake-id="ua1ceccc4" id="ua1ceccc4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">请求类 RpcRequest </span></h5><p data-lake-id="u156750d0" id="u156750d0"><span data-lake-id="u9d055d69" id="u9d055d69" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">作用是封装调用所需的信息，比如服务名称、方法名称、调用参数的类型列表、参数列表。这些都是 Java </span></p><p data-lake-id="u8dd06369" id="u8dd06369"><span data-lake-id="u050cfe8d" id="u050cfe8d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">反射机制所需的参数。</span></p><p data-lake-id="ud4898a63" id="ud4898a63"><span data-lake-id="u3af680c4" id="u3af680c4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ubaba37af" id="ubaba37af"><span data-lake-id="ua5998889" id="ua5998889" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RpcRequest%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.model%3B%5Cn%5Cnimport%20lombok.AllArgsConstructor%3B%5Cnimport%20lombok.Builder%3B%5Cnimport%20lombok.Data%3B%5Cnimport%20lombok.NoArgsConstructor%3B%5Cn%5Cnimport%20java.io.Serializable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%B0%81%E8%A3%85%E8%B0%83%E7%94%A8%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cn%40Data%5Cn%40Builder%5Cn%40NoArgsConstructor%5Cn%40AllArgsConstructor%5Cnpublic%20class%20RpcRequest%20implements%20Serializable%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20String%20serviceName%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20String%20methodName%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%88%97%E8%A1%A8%5Cn%20%20%20%20private%20Class%3C%3F%3E%5B%5D%20parameterTypes%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%5Cn%20%20%20%20private%20Object%5B%5D%20args%3B%5Cn%5Cn%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RpcRequest%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pNloy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u5612122e" id="u5612122e" style="text-align: left"><br></p><h5 data-lake-id="rM8BK" id="rM8BK"><span data-lake-id="u7753c4d0" id="u7753c4d0">2）</span><span data-lake-id="u02f933b3" id="u02f933b3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">响应类 RpcResponse</span></h5><p data-lake-id="u759b63e7" id="u759b63e7"><span data-lake-id="u9ecb61e8" id="u9ecb61e8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">作用是封装调用方法得到的返回值、以及调用的信息（比如异常情况）等。</span></p><p data-lake-id="u2bde4588" id="u2bde4588"><span data-lake-id="uaa710976" id="uaa710976" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u82f844ac" id="u82f844ac"><span data-lake-id="u30f25470" id="u30f25470" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RpcResponse%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.model%3B%5Cn%5Cnimport%20lombok.AllArgsConstructor%3B%5Cnimport%20lombok.Builder%3B%5Cnimport%20lombok.Data%3B%5Cnimport%20lombok.NoArgsConstructor%3B%5Cn%5Cnimport%20java.io.Serializable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%B0%81%E8%A3%85%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%BE%97%E5%88%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cn%40Data%5Cn%40Builder%5Cn%40NoArgsConstructor%5Cn%40AllArgsConstructor%5Cnpublic%20class%20RpcResponse%20implements%20Serializable%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20private%20Object%20data%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20private%20Class%3C%3F%3E%20dataType%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20private%20String%20message%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%BC%82%E5%B8%B8%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20private%20Exception%20exception%3B%5Cn%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RpcResponse%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u2KCf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="pVKsQ" id="pVKsQ"><span data-lake-id="ub7708da0" id="ub7708da0" style="color: rgb(47, 48, 52)">web 服务器</span></h4><p data-lake-id="uebcd93bd" id="uebcd93bd" style="text-align: left"><span data-lake-id="ua17b259d" id="ua17b259d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">接下来，我们要先让服务提供者提供 </span><strong><span data-lake-id="uf32eb939" id="uf32eb939" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可远程访问</span></strong><span data-lake-id="u2591d608" id="u2591d608" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 的服务。那么，就需要一个 web 服务器，能够接受处理</span></p><p data-lake-id="u0b3be387" id="u0b3be387" style="text-align: left"><span data-lake-id="u38b77f44" id="u38b77f44" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">请求、并返回响应。</span></p><p data-lake-id="u7487c175" id="u7487c175" style="text-align: left"><span data-lake-id="ue4e5985c" id="ue4e5985c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uffa720e7" id="uffa720e7" style="text-align: left"><span data-lake-id="u5667b15e" id="u5667b15e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">web 服务器的选择有很多，比如 Spring Boot 内嵌的 Tomcat、NIO 框架 Netty 和 Vert.x 等等。</span></p><p data-lake-id="u847d3478" id="u847d3478" style="text-align: left"><span data-lake-id="ud1e61022" id="ud1e61022" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u817bf4ec" id="u817bf4ec" style="text-align: left"><span data-lake-id="u8ab2d440" id="u8ab2d440" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">此处使用高性能的 NIO（非阻塞IO） 框架 Vert.x 来作为 RPC 框架的 web 服务器。</span></p><blockquote data-lake-id="u552a9e4f" id="u552a9e4f"><p data-lake-id="uc00fd4f0" id="uc00fd4f0" style="text-align: left"><span data-lake-id="u6c558be9" id="u6c558be9" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">Vert.x 是一个用于构建响应式应用的工具包，它在底层使用了非阻塞IO（NIO）。这意味着当Vert.x处理IO操作（例如网络请求）时，它不会阻塞执行线程。相反，它使用事件循环来处理异步事件，使得可以同时处理成千上万的并发连接，而不会导致线程池耗尽或性能下降。</span></p></blockquote><p data-lake-id="ubd75b5fb" id="ubd75b5fb" style="text-align: left"><span data-lake-id="uaf61e81a" id="uaf61e81a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u78187b2d" id="u78187b2d" style="text-align: left"><span data-lake-id="u7262c318" id="u7262c318" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Vert.x 官方文档：</span><a href="https://vertx.io/" target="_blank" data-lake-id="ua4857ae7" id="ua4857ae7"><span data-lake-id="u61bea595" id="u61bea595" class="lake-fontsize-12">https://vertx.io/</span></a></p><details data-lake-id="uab9a77bc" id="uab9a77bc" open="false" class="lake-collapse"><summary data-lake-id="uafef55c8" id="uafef55c8" class="lake-summary"><span data-lake-id="u96564e9f" id="u96564e9f" class="lake-fontsize-12">chen-rpc-easy项目需要引入的依赖</span></summary><p data-lake-id="u3900811b" id="u3900811b"><span data-lake-id="u95d381da" id="u95d381da" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">引入 Vert.x 和工具类的依赖：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependencies%3E%5Cn%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.vertx%2Fvertx-core%20--%3E%5Cn%20%20%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eio.vertx%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Evertx-core%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E4.5.1%3C%2Fversion%3E%5Cn%20%20%3C%2Fdependency%3E%5Cn%20%20%3C!--%20https%3A%2F%2Fdoc.hutool.cn%2F%20--%3E%5Cn%20%20%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Ecn.hutool%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Ehutool-all%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E5.8.16%3C%2Fversion%3E%5Cn%20%20%3C%2Fdependency%3E%5Cn%20%20%3C!--%20https%3A%2F%2Fprojectlombok.org%2F%20--%3E%5Cn%20%20%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Elombok%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E1.18.30%3C%2Fversion%3E%5Cn%20%20%20%20%3Cscope%3Eprovided%3C%2Fscope%3E%5Cn%20%20%3C%2Fdependency%3E%5Cn%3C%2Fdependencies%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Mkxms%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></details><p data-lake-id="ud1903aa9" id="ud1903aa9" style="text-align: left"><span data-lake-id="uf6172170" id="uf6172170" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span></p><h5 data-lake-id="Tg98e" id="Tg98e"><span data-lake-id="u7861b85a" id="u7861b85a" style="color: #74B602">1）编写一个web服务器接口</span></h5><p data-lake-id="u7aa94d4a" id="u7aa94d4a"><span data-lake-id="ub7ae6635" id="ub7ae6635" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">编写一个 web 服务器的接口 HttpServer，定义统一的启动服务器方法，便于后续的扩展，比如实现多种不同的 web 服务器。</span></p><p data-lake-id="u2398955b" id="u2398955b"><span data-lake-id="u92212b79" id="u92212b79" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22HttpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%8F%A3%5Cn%20*%20%40date%202024%2F3%2F12-14%3A02%5Cn%20*%2F%5Cnpublic%20interface%20HttpServer%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20port%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F12%2014%3A03%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20doStart(int%20port)%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22HttpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jmXvx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uc3fb2476" id="uc3fb2476" style="text-align: left"><span data-lake-id="u20244211" id="u20244211" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="l84zb" id="l84zb"><span data-lake-id="ue40b23e3" id="ue40b23e3" style="color: #74B602">2）编写一个基于Vert.x实现的web服务器</span></h5><p data-lake-id="u98acb458" id="u98acb458" style="text-align: left"><span data-lake-id="u627d6946" id="u627d6946" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">编写基于 Vert.x 实现的 web 服务器 VertxHttpServer，用于监听指定端口并处理请求。</span></p><p data-lake-id="u1efbd17f" id="u1efbd17f" style="text-align: left"><span data-lake-id="u43909ea3" id="u43909ea3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxHttpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server%3B%5Cn%5Cnimport%20io.vertx.core.Vertx%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20HTTP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cnpublic%20class%20VertxHttpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20port%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2015%3A08%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BAVert.x%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BAHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20io.vertx.core.http.HttpServer%20server%20%3D%20vertx.createHttpServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E9%80%BB%E8%BE%91%5Cn%20%20%20%20%20%20%20%20server.requestHandler(request%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Received%20request%EF%BC%9A%5C%22%20%2B%20request.method()%20%2B%20%5C%22%20%5C%22%20%2B%20request.uri())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81HTTP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20request.response()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.putHeader(%5C%22content-type%5C%22%2C%20%5C%22text%2Fplain%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.end(%5C%22Hello%20from%20Vert.x%20HTTP%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Server%20is%20now%20listening%20on%20port%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.err.println(%5C%22Failed%20to%20start%20server%3A%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxHttpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g5bRa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue4350cd6" id="ue4350cd6" style="text-align: left"><strong><span data-lake-id="u1a8a3412" id="u1a8a3412" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注意：</span></strong></p><ol list="u941ec577"><li fid="uf1354d78" data-lake-id="u2def0aea" id="u2def0aea" style="text-align: left"><strong><span data-lake-id="ud09bedbe" id="ud09bedbe" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里编写处理请求逻辑的这段是为了验证web服务器是否能正常启动，不是正常的业务处理逻辑</span></strong></li><li fid="uf1354d78" data-lake-id="u8dce2e65" id="u8dce2e65" style="text-align: left"><strong><span data-lake-id="ucf4df15d" id="ucf4df15d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里监听端口并处理请求的这段是异步处理HTTP请求</span></strong></li></ol><blockquote data-lake-id="uf67f10dc" id="uf67f10dc"><p data-lake-id="u382af398" id="u382af398" style="text-align: left"><span data-lake-id="u2c976b67" id="u2c976b67" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">通过</span><strong><span data-lake-id="u93a6af1f" id="u93a6af1f" style="color: rgb(13, 13, 13)">server.requestHandler</span></strong><span data-lake-id="u6c874303" id="u6c874303" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">设置的请求处理器（不论是直接使用Lambda表达式还是通过</span><strong><span data-lake-id="u0b830dfc" id="u0b830dfc" style="color: rgb(13, 13, 13)">HttpServerHandler</span></strong><span data-lake-id="u246552de" id="u246552de" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">实例）都是异步执行的。当HTTP请求到达时，Vert.x将请求交给事件循环，事件循环再调用请求处理器来处理该请求。请求处理器内部的所有操作，包括打印请求信息和发送HTTP响应，都是非阻塞的。这样，即便是在处理大量并发请求的情况下，Vert.x服务器也能保持高性能和低延迟。</span></p></blockquote><p data-lake-id="u36e03138" id="u36e03138" style="text-align: left"><span data-lake-id="ud24307f7" id="ud24307f7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="hJ5S1" id="hJ5S1"><span data-lake-id="u926ba416" id="u926ba416" style="color: #74B602">3） 验证 </span><span data-lake-id="u09f2873a" id="u09f2873a" class="lake-fontsize-12" style="color: #74B602">web 服务器能否启动成功并接受请求。</span></h5><p data-lake-id="u2e59ed4b" id="u2e59ed4b" style="text-align: left"><span data-lake-id="u787672e3" id="u787672e3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">只要在任意一个引入了rpc依赖的项目的类中，实例化VertxHttpServer，然后调用dostart方法，指定端口port之后，通过浏览器访问 </span><span data-lake-id="uc55d80b5" id="uc55d80b5" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">localhost:port</span><span data-lake-id="u0f6d6021" id="u0f6d6021" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，查看能正常访问并看到输出的文字就是启动成功。</span></p><p data-lake-id="ub7a12949" id="ub7a12949" style="text-align: left"><span data-lake-id="ubfb848a1" id="ubfb848a1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="bFPb1" id="bFPb1"><span data-lake-id="u8492ccbb" id="u8492ccbb" style="color: #74B602">4） </span><span data-lake-id="u9e47672d" id="u9e47672d" class="lake-fontsize-12" style="color: #74B602">编写请求处理器 HttpServerHandler</span></h5><p data-lake-id="u7ce172cd" id="u7ce172cd" style="text-align: left"><span data-lake-id="u16d3f623" id="u16d3f623" class="lake-fontsize-12" style="color: #A58F04">请求处理器是 RPC 框架的实现关键，它的作用是：处理接收到的请求，并根据请求参数找到对应的服务和</span></p><p data-lake-id="ue1478308" id="ue1478308" style="text-align: left"><span data-lake-id="u55461a9d" id="u55461a9d" class="lake-fontsize-12" style="color: #A58F04">方法，通过反射实现调用，最后封装返回结果并响应请求。</span></p><p data-lake-id="u3519f131" id="u3519f131" style="text-align: left"><span data-lake-id="u37e16689" id="u37e16689" class="lake-fontsize-12" style="color: #A58F04">​</span><br></p><p data-lake-id="ua82a89e2" id="ua82a89e2" style="text-align: left"><span data-lake-id="u8df26f1a" id="u8df26f1a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">业务流程如下：</span></p><ol list="u3e046ca6"><li fid="u9aef6f2f" data-lake-id="ucc828d16" id="ucc828d16" style="text-align: left"><span data-lake-id="uced815c4" id="uced815c4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">反序列化请求为对象，并从请求对象中获取参数。</span></li><li fid="u9aef6f2f" data-lake-id="u7e2451b6" id="u7e2451b6" style="text-align: left"><span data-lake-id="u46142f29" id="u46142f29" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">根据服务名称从本地注册器中获取到对应的服务实现类。</span></li><li fid="u9aef6f2f" data-lake-id="udc46e4c0" id="udc46e4c0" style="text-align: left"><span data-lake-id="u17632827" id="u17632827" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">通过反射机制调用方法，得到返回结果。</span></li><li fid="u9aef6f2f" data-lake-id="u817bceb0" id="u817bceb0" style="text-align: left"><span data-lake-id="uc1f6c5db" id="uc1f6c5db" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">对返回结果进行封装和序列化，并写入到响应中。</span></li></ol><p data-lake-id="u99d51258" id="u99d51258"><span data-lake-id="u60e9ec24" id="u60e9ec24" class="lake-fontsize-12">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22HttpServerHandler%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.serializer.JdkSerializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20io.vertx.core.Handler%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.http.HttpServerRequest%3B%5Cnimport%20io.vertx.core.http.HttpServerResponse%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cn%2F**%5Cn%20*%20HTTP%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cnpublic%20class%20HttpServerHandler%20implements%20Handler%3CHttpServerRequest%3E%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(HttpServerRequest%20request)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20new%20JdkSerializer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Received%20request%3A%5C%22%20%2B%20request.method()%20%2B%20%5C%22%20%2F*-*%2F%20%5C%22%20%2B%20request.uri())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86HTTP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20request.handler(body%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20bytes%20%3D%20body.getBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20null%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%AF%B7%E6%B1%82%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BA%E8%AF%B7%E6%B1%82%E7%B1%BB%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcRequest%20%3D%20serializer.deserializer(bytes%2C%20RpcRequest.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20new%20RpcResponse()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E8%AF%B7%E6%B1%82%E4%B8%BAnull%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(request%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setMessage(%5C%22rpcRequest%20is%20null%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20doResponse(request%2CrpcResponse%2Cserializer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%EF%BC%8C%E8%8E%B7%E5%8F%96%E8%A6%81%E8%B0%83%E7%94%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Class%3C%3F%3E%20implClass%20%3D%20LocalRegistry.get(rpcRequest.getServiceName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%BE%97%E6%8C%87%E5%AE%9A%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Method%20method%20%3D%20implClass.getMethod(rpcRequest.getMethodName()%2C%20rpcRequest.getParameterTypes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%EF%BC%9B%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A%E4%BC%A0%E5%85%A5%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%80%E5%90%8E%E8%B0%83%E7%94%A8%E4%B8%8A%E9%9D%A2%E8%8E%B7%E5%BE%97%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Object%20result%20%3D%20method.invoke(implClass.newInstance()%2C%20rpcRequest.getArgs())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E5%B0%81%E8%A3%85%E5%93%8D%E5%BA%94%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setData(result)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setDataType(method.getReturnType())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setMessage(%5C%22OK%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setException(e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setMessage(e.getMessage())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%20%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20doResponse(request%2CrpcResponse%2Cserializer)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20request%3A%5Cn%20%20%20%20%20*%20%40param%20rpcResponse%3A%5Cn%20%20%20%20%20*%20%40param%20serializer%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40description%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2014%3A42%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20void%20doResponse(HttpServerRequest%20request%2C%20RpcResponse%20rpcResponse%2C%20Serializer%20serializer)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8Erequest%E9%87%8C%E9%9D%A2%E8%8E%B7%E5%8F%96response%E4%BF%9D%E8%AF%81%E4%BA%86%E4%B8%80%E8%87%B4%E6%80%A7%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AEHTTP%E5%93%8D%E5%BA%94%E5%A4%B4%EF%BC%8Ccontent-type%20%E6%8C%87%E6%98%8E%E4%BA%86%E5%93%8D%E5%BA%94%E4%BD%93%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B%EF%BC%8Capplication%2Fjson%20%E8%BF%99%E4%B8%AA%E5%93%8D%E5%BA%94%E5%8C%85%E5%90%AB%E7%9A%84%E6%98%AFJSON%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20HttpServerResponse%20httpServerResponse%20%3D%20request.response().putHeader(%5C%22content-type%5C%22%2C%20%5C%22application%2Fjson%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%BF%94%E5%9B%9E%E7%9A%84%E4%BF%A1%E6%81%AF%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20serialized%20%3D%20serializer.serializer(rpcResponse)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%BA%8F%E5%88%97%E5%8C%96%E5%A5%BD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E6%89%93%E5%8C%85%E5%88%B0Buffer%E9%87%8C%E9%9D%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87HTTP%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%E5%8F%91%E9%80%81%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E6%9C%80%E5%90%8E%E7%BB%93%E6%9D%9F%E8%BF%99%E6%AC%A1HTTP%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20httpServerResponse.end(Buffer.buffer(serialized))%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20httpServerResponse.end(Buffer.buffer())%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22HttpServerHandler%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jvfHy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua4887b1a" id="ua4887b1a"><br></p><blockquote data-lake-id="uc362b1b8" id="uc362b1b8" class="lake-alert lake-alert-color2"><p data-lake-id="u8e53a762" id="u8e53a762" style="text-align: left"><strong><span data-lake-id="u06c5156c" id="u06c5156c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">需要注意，不同的 web 服务器对应的请求处理器实现方式也不同，比如 Vert.x 中是通过实现 </span></strong><strong><span data-lake-id="u6971e50d" id="u6971e50d" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">Handler&lt;HttpServerRequest&gt;</span></strong><strong><span data-lake-id="u7e1a899f" id="u7e1a899f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 接口来自定义请求处理器的。并且可以通过 </span></strong><strong><span data-lake-id="u86455d11" id="u86455d11" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">request.bodyHandler</span></strong><strong><span data-lake-id="uf37be5ce" id="uf37be5ce" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 异步处理请求。</span></strong></p></blockquote><p data-lake-id="ue469b1d6" id="ue469b1d6"><br></p><h5 data-lake-id="gm805" id="gm805"><span data-lake-id="ub04ddc49" id="ub04ddc49" class="lake-fontsize-12" style="color: #74B602">5）给 HttpServer 绑定请求处理器</span></h5><p data-lake-id="uc74c970d" id="uc74c970d" style="text-align: left"><span data-lake-id="u989f7490" id="u989f7490" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改 VertxHttpServer 的代码，通过 </span><span data-lake-id="ue65590fb" id="ue65590fb" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">server.requestHandler</span><span data-lake-id="u5cd1d4b2" id="u5cd1d4b2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 绑定请求处理器。</span></p><p data-lake-id="uc68a439b" id="uc68a439b"><span data-lake-id="u2980ce3d" id="u2980ce3d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改后的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxHttpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server%3B%5Cn%5Cnimport%20io.vertx.core.Vertx%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20HTTP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cnpublic%20class%20VertxHttpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20port%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2015%3A08%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BAVert.x%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BAHTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20io.vertx.core.http.HttpServer%20server%20%3D%20vertx.createHttpServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E9%80%BB%E8%BE%91%5Cn%20%20%20%20%20%20%20%20server.requestHandler(new%20HttpServerHandler())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Server%20is%20now%20listening%20on%20port%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.err.println(%5C%22Failed%20to%20start%20server%3A%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxHttpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22duLwL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2ba0e74b" id="u2ba0e74b"><span data-lake-id="u67f0c476" id="u67f0c476" class="lake-fontsize-12">这里的修改相当于将原来在其中写的测试代码给替换成真正的请求处理类</span><code data-lake-id="u3b8944a7" id="u3b8944a7"><span data-lake-id="u9035a83c" id="u9035a83c" class="lake-fontsize-12">HttpServerHandler</span></code><span data-lake-id="u10ed0086" id="u10ed0086" class="lake-fontsize-12">，同样是异步处理</span></p><p data-lake-id="u085d128e" id="u085d128e"><span data-lake-id="ub11065c9" id="ub11065c9" class="lake-fontsize-12">​</span><br></p><p data-lake-id="u679f747f" id="u679f747f"><span data-lake-id="uf5660b9f" id="uf5660b9f" class="lake-fontsize-12" style="color: #FBDE28">至此，引入了 RPC 框架的服务提供者模块，已经能够接受请求并完成服务调用了。</span></p><h4 data-lake-id="M4Ze9" id="M4Ze9"><span data-lake-id="u114b1a85" id="u114b1a85" style="color: rgb(47, 48, 52)">代理类</span></h4><p data-lake-id="u61107d43" id="u61107d43"><span data-lake-id="u536fc995" id="u536fc995" class="lake-fontsize-12">消费方发起调用</span></p><p data-lake-id="u820dc374" id="u820dc374" style="text-align: left"><span data-lake-id="u32b9c3d0" id="u32b9c3d0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在项目准备阶段，已经预留了一段调用服务的代码，只要能够获取到 UserService 对象（实现类），</span></p><p data-lake-id="u7eb79238" id="u7eb79238" style="text-align: left"><span data-lake-id="ud5a814cb" id="ud5a814cb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">就能跑通整个流程。</span></p><p data-lake-id="u9f24b79e" id="u9f24b79e" style="text-align: left"><br></p><p data-lake-id="u4534b3a9" id="u4534b3a9" style="text-align: left"><span data-lake-id="uc8f7e74d" id="uc8f7e74d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但 UserService 的实现类从哪来呢？</span></p><p data-lake-id="u4cad1412" id="u4cad1412" style="text-align: left"><span data-lake-id="uf864c790" id="uf864c790" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u3814f4a1" id="u3814f4a1" style="text-align: left"><span data-lake-id="u21a63961" id="u21a63961" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">不可能把服务提供者的 UserServiceImpl 复制粘贴到消费者模块。要能那样做还需要 RPC 框架干什么？</span></p><p data-lake-id="u9a474b10" id="u9a474b10" style="text-align: left"><span data-lake-id="u021572a8" id="u021572a8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">分布式系统中，调用其他项目或团队提供的接口时，一般只关注请求参数和响应结果，而不关注具体实现。</span></p><p data-lake-id="u8ed3caf5" id="u8ed3caf5" style="text-align: left"><span data-lake-id="u041b5d5f" id="u041b5d5f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf9560113" id="uf9560113" style="text-align: left"><span data-lake-id="uca69dc2f" id="uca69dc2f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在之前的架构中讲过，我们可以通过生成代理对象来简化消费方的调用。</span></p><p data-lake-id="u6da0a5f5" id="u6da0a5f5" style="text-align: left"><span data-lake-id="u03c1434c" id="u03c1434c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u588fd0df" id="u588fd0df" style="text-align: left"><span data-lake-id="u7fd13ccf" id="u7fd13ccf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代理的实现方式大致分为 2 类：静态代理和动态代理，下面依次实现。</span></p><p data-lake-id="u84518a98" id="u84518a98"><span data-lake-id="u6bd467f8" id="u6bd467f8" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="ah6ko" id="ah6ko"><span data-lake-id="u729afa80" id="u729afa80" style="color: #8CCF17">1）静态代理</span></h5><p data-lake-id="u46e5f2cf" id="u46e5f2cf"><span data-lake-id="u54218f40" id="u54218f40" class="lake-fontsize-12">在上面的服务消费者中已经实现：</span></p><p data-lake-id="u8704e59c" id="u8704e59c" style="text-align: left"><a href="#njdWW" data-lake-id="uee710bce" id="uee710bce"><span data-lake-id="u804560d6" id="u804560d6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">https://www.yuque.com/yangyibufeng/lokkqq/emdt8u7fn84htl50#njdWW</span></a></p><h6 data-lake-id="HS6Xh" id="HS6Xh"><span data-lake-id="u14360104" id="u14360104" style="color: rgb(47, 48, 52)">关于静态代理的思考：</span></h6><p data-lake-id="u94a4485e" id="u94a4485e" style="text-align: left"><span data-lake-id="ucfd6a536" id="ucfd6a536" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在代理类中需要实现对应的接口和方法 -- 也就是说，如果消费者通过调用代理类的对应的方法来实现调用其他项目的对应方法，其实本质上就是将给其他接口发送HTTP请求的工作都转移到了代理类中实现，这样在consumer项目中的其他类中如果想要使用该方法，就可以直接调用代理类中的相同方法。</span></p><p data-lake-id="u8649e922" id="u8649e922" style="text-align: left"><span data-lake-id="uce0d1f57" id="uce0d1f57" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但是这样只是方便了在同一个consumer项目中多次调用同一个provider项目的服务方法，并没有从本质上简化两个项目之间的服务调用，而且如果需要调用多个方法，还需要对每个方法都编写一套代理类（重写代理方法），所以要换成通过动态代理来进行简化调用的操作</span></p><h5 data-lake-id="FViYj" id="FViYj"><span data-lake-id="u2ea7b9ef" id="u2ea7b9ef" style="color: #8CCF17">2）动态代理</span></h5><p data-lake-id="u38d72b4b" id="u38d72b4b" style="text-align: left"><span data-lake-id="uf80a9be8" id="uf80a9be8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">动态代理的作用是，根据要生成的对象的类型，自动生成一个代理对象。</span></p><p data-lake-id="ue0155bb2" id="ue0155bb2" style="text-align: left"><span data-lake-id="u0a602ce1" id="u0a602ce1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf9ec6726" id="uf9ec6726" style="text-align: left"><span data-lake-id="ue7813088" id="ue7813088" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">常用的动态代理实现方式有 JDK 动态代理和基于字节码生成的动态代理（比如 CGLIB）。前者简单易用、</span></p><p data-lake-id="ucf53eabe" id="ucf53eabe" style="text-align: left"><span data-lake-id="u8b1c5f03" id="u8b1c5f03" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">无需引入额外的库，但缺点是只能对接口进行代理；后者更灵活、可以对任何类进行代理，但性能略低于 </span></p><p data-lake-id="ub2951c40" id="ub2951c40" style="text-align: left"><span data-lake-id="u8ebb5023" id="u8ebb5023" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">JDK 动态代理。</span></p><p data-lake-id="uddf5e970" id="uddf5e970" style="text-align: left"><span data-lake-id="u9fc52954" id="u9fc52954" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u56ca8f8c" id="u56ca8f8c" style="text-align: left"><span data-lake-id="u10f15c49" id="u10f15c49" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">此处我们使用 JDK 动态代理。</span></p><p data-lake-id="u5306b13f" id="u5306b13f" style="text-align: left"><span data-lake-id="udbb56833" id="udbb56833" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><ol list="ua0271cdd"><li fid="ua71e6929" data-lake-id="ubae8f054" id="ubae8f054" style="text-align: left"><span data-lake-id="u53e223be" id="u53e223be" class="lake-fontsize-12" style="color: #5C8D07">在 RPC 模块中编写动态代理类 ServiceProxy，需要实现 InvocationHandler 接口的 invoke 方法。</span></li></ol><p data-lake-id="u66659f9d" id="u66659f9d" style="text-align: left"><span data-lake-id="ueccf3656" id="ueccf3656" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u48faf171" id="u48faf171" style="text-align: left"><span data-lake-id="u5204d037" id="u5204d037" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下（几乎就是把静态代理的代码搬运过来）：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.http.HttpRequest%3B%5Cnimport%20cn.hutool.http.HttpResponse%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.serializer.JdkSerializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20Serializer%20serializer%20%3D%20new%20JdkSerializer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(method.getDeclaringClass().getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%AF%B7%E6%B1%82%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20bodyBytes%20%3D%20serializer.serializer(rpcRequest)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20result%20%3D%20null%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E8%BF%99%E9%87%8C%E6%98%AF%E7%A1%AC%E7%BC%96%E7%A0%81%EF%BC%8C%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%8E%BB%E8%A7%A3%E5%86%B3%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try(HttpResponse%20httpResponse%20%3D%20HttpRequest.post(%5C%22http%3A%2F%2Flocalhost%3A18080%5C%22).body(bodyBytes).execute())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20httpResponse.bodyBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%93%8D%E5%BA%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20serializer.deserializer(result%2C%20RpcResponse.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LUYzz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua9579d7c" id="ua9579d7c" style="text-align: left"><span data-lake-id="ubed36749" id="ubed36749" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">解释下上述代码，当代理实例的方法被调用时，方法调用会被转发到这个调用处理器</span><code data-lake-id="u64ab821d" id="u64ab821d"><span data-lake-id="u486dd30b" id="u486dd30b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">InvocationHandler</span></code><span data-lake-id="ua0f1384a" id="ua0f1384a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">中，当用户调用某个接口的方法时，会改为调用 invoke 方法。在 invoke 方法中，我们可以</span></p><p data-lake-id="u60b5c232" id="u60b5c232" style="text-align: left"><span data-lake-id="u4d4b469a" id="u4d4b469a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">获取到要调用的方法信息、传入的参数列表等，就得到了服务提供者需要的参数么。用这些参数来构</span></p><p data-lake-id="u94fa2fc0" id="u94fa2fc0" style="text-align: left"><span data-lake-id="uc424ee49" id="uc424ee49" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">造请求对象就可以完成调用了。</span></p><p data-lake-id="uff9b5025" id="uff9b5025" style="text-align: left"><span data-lake-id="udaf4ba4e" id="udaf4ba4e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ub385cf73" id="ub385cf73" style="text-align: left"><span data-lake-id="u8d53c66a" id="u8d53c66a" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">需要注意的是，上述代码中，请求的服务提供者地址被硬编码了，需要使用注册中心和服务发现机制来解</span></p><p data-lake-id="u100bb2b5" id="u100bb2b5" style="text-align: left"><span data-lake-id="u1e81577f" id="u1e81577f" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">决。</span></p><p data-lake-id="u0c7aa791" id="u0c7aa791" style="text-align: left"><span data-lake-id="u587f3bb1" id="u587f3bb1" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">​</span><br></p><ol list="u2f8efaf2" start="2"><li fid="u2b2140e2" data-lake-id="u429b39a0" id="u429b39a0" style="text-align: left"><span data-lake-id="u711bf62a" id="u711bf62a" class="lake-fontsize-12" style="color: #5C8D07">创建动态代理工厂 ServiceProxyFactory，作用是根据指定类创建动态代理对象。</span></li></ol><p data-lake-id="u365647bc" id="u365647bc"><span data-lake-id="u661839ef" id="u661839ef" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里是使用了 </span><strong><span data-lake-id="uf35a7f71" id="uf35a7f71" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">工厂设计模式</span></strong><span data-lake-id="u8403bb24" id="u8403bb24" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，来简化对象的创建过程，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxyFactory%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20java.lang.reflect.Proxy%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%B7%A5%E5%8E%82%EF%BC%8C%E6%A0%B9%E6%8D%AE%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20*%20%E4%BD%BF%E7%94%A8%E4%BA%86%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxyFactory%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E7%B1%BB%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceClass%3A%20%E5%85%B7%E4%BD%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%B1%BB%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A14%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20%3CT%3E%20T%20getProxy(Class%3CT%3E%20serviceClass)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(T)%20Proxy.newProxyInstance(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serviceClass.getClassLoader()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Class%5B%5D%7BserviceClass%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20ServiceProxy())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxyFactory%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22McFin%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u4d5495d8" id="u4d5495d8" style="text-align: left"><span data-lake-id="u89923da2" id="u89923da2" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">上述代码中，主要是通过 </span><span data-lake-id="u64b8c03c" id="u64b8c03c" class="lake-fontsize-11" style="color: rgb(255, 111, 4),rgb(243, 48, 171); background-color: rgb(240, 240, 240)">Proxy.newProxyInstance</span><span data-lake-id="uaa319555" id="uaa319555" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)"> 方法为指定类型创建代理对象。</span></p><details data-lake-id="udd310f1b" id="udd310f1b" open="false" class="lake-collapse"><summary data-lake-id="ucf51d63e" id="ucf51d63e" class="lake-summary"><span data-lake-id="u957b03cf" id="u957b03cf" class="lake-fontsize-11" style="color: rgb(255, 111, 4),rgb(243, 48, 171); background-color: rgb(240, 240, 240)">关于Proxy.newProxyInstance</span><span data-lake-id="u0ba8a1ec" id="u0ba8a1ec" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)"> 方法</span></summary><p data-lake-id="u36e727bd" id="u36e727bd"><code data-lake-id="u774917e5" id="u774917e5"><span data-lake-id="u54b46e5a" id="u54b46e5a">Proxy.newProxyInstance</span></code><span data-lake-id="ua62423d6" id="ua62423d6"> 方法是 Java 反射 API 的一部分，用于动态创建一个符合某些接口的代理类的实例。这个方法非常有用，特别是在需要基于接口动态创建实现类的场景，如远程方法调用、事务管理等。这个方法有三个参数，每个参数的意义如下：</span></p><p data-lake-id="ua8600741" id="ua8600741"><br></p><ol list="u7b6bda26"><li fid="u4349173c" data-lake-id="u325506ea" id="u325506ea"><span data-lake-id="u4feed8ca" id="u4feed8ca"> </span><strong><span data-lake-id="u8a9046f1" id="u8a9046f1">ClassLoader loader</span></strong><span data-lake-id="u52754f46" id="u52754f46">: 类加载器，用于定义Proxy类。这个参数指定了代理类的类加载器。如果你有多个类加载器，你需要指定一个来加载你的代理类。通常情况下，可以使用目标类的类加载器（即第一个参数传递的类的类加载器）。 </span></li><li fid="u4349173c" data-lake-id="uc8fb29a9" id="uc8fb29a9"><span data-lake-id="ubac776bc" id="ubac776bc"> </span><strong><span data-lake-id="u3b556697" id="u3b556697">Class&lt;?&gt;[] interfaces</span></strong><span data-lake-id="u9f921538" id="u9f921538">: 要实现的接口数组，代理类将实现这些接口。这个参数告诉代理类它需要代理哪些接口。代理类将实现这些接口中声明的所有方法。这意味着你创建的代理实例可以被视为这些接口的实现。 </span></li><li fid="u4349173c" data-lake-id="u2f437db8" id="u2f437db8"><span data-lake-id="u7fc7a419" id="u7fc7a419"> </span><strong><span data-lake-id="ue1732747" id="ue1732747">InvocationHandler h</span></strong><span data-lake-id="uac7e17a7" id="uac7e17a7">: 调用处理器接口的实现。当代理实例的方法被调用时，方法调用会被转发到这个调用处理器。这个参数是实现了</span><code data-lake-id="u8dc45039" id="u8dc45039"><span data-lake-id="u110facac" id="u110facac">InvocationHandler</span></code><span data-lake-id="uc2bbab84" id="uc2bbab84">接口的实例。你需要在这个实现中定义方法调用的处理逻辑。每次代理实例上的方法被调用时，</span><code data-lake-id="u45709876" id="u45709876"><span data-lake-id="u1e503558" id="u1e503558">InvocationHandler</span></code><span data-lake-id="u8c676227" id="u8c676227">的</span><code data-lake-id="u0955da33" id="u0955da33"><span data-lake-id="u17f38f21" id="u17f38f21">invoke</span></code><span data-lake-id="ud19b9898" id="ud19b9898">方法就会被调用，你可以在这个方法中定义你想要执行的任何自定义操作。 </span></li></ol><p data-lake-id="u4eefb040" id="u4eefb040"><br></p><p data-lake-id="u29bf002d" id="u29bf002d"><span data-lake-id="ud62d4e8c" id="ud62d4e8c">简单来说：</span></p><ul list="u067bcff0"><li fid="u2bc413bd" data-lake-id="ub2267e2c" id="ub2267e2c"><strong><span data-lake-id="ue5ed3a42" id="ue5ed3a42">ClassLoader loader</span></strong><span data-lake-id="u39de9c46" id="u39de9c46"> 定义了代理类的加载器。</span></li><li fid="u2bc413bd" data-lake-id="u66ad2ead" id="u66ad2ead"><strong><span data-lake-id="u89748964" id="u89748964">Class&lt;?&gt;[] interfaces</span></strong><span data-lake-id="u9df132e0" id="u9df132e0"> 指定了代理类需要实现的接口。</span></li><li fid="u2bc413bd" data-lake-id="u0a02c0b5" id="u0a02c0b5"><strong><span data-lake-id="u47aa6951" id="u47aa6951">InvocationHandler h</span></strong><span data-lake-id="u223896f3" id="u223896f3"> 是当接口的方法被调用时，实际处理调用的处理器。</span></li></ul></details><details data-lake-id="u6a3aa67c" id="u6a3aa67c" open="false" class="lake-collapse"><summary data-lake-id="u666cfae1" id="u666cfae1" class="lake-summary"><span data-lake-id="u50b27bd2" id="u50b27bd2">关于工厂类</span></summary><p data-lake-id="u9d18b2ee" id="u9d18b2ee"><span data-lake-id="ue4f2756d" id="ue4f2756d">这段代码是Java语言中的一个方法，它用来生成一个特定接口的代理实例。下面我会逐行解释这段代码的含义：</span></p><p data-lake-id="u7e1c81de" id="u7e1c81de"><br></p><p data-lake-id="u831f8280" id="u831f8280"><span data-lake-id="u020f1cef" id="u020f1cef">public static  T getProxy(Class serviceClass) {</span></p><p data-lake-id="u33d7a6a1" id="u33d7a6a1"><br></p><ul list="ucc2b6972"><li fid="u2ff20a7c" data-lake-id="u2ada7f6c" id="u2ada7f6c"><span data-lake-id="u061843e6" id="u061843e6">public static ：这表明getProxy方法是公共的（public）和静态的（static），意味着你能够不创建类的实例而直接调用它。</span></li><li fid="u2ff20a7c" data-lake-id="ubca26a96" id="ubca26a96"><span data-lake-id="u9187c736" id="u9187c736"> ：这是一个类型参数，代表这是一个泛型方法，可以用不同的类型来调用它。</span></li><li fid="u2ff20a7c" data-lake-id="u8f617cdc" id="u8f617cdc"><span data-lake-id="u80d79d21" id="u80d79d21">T getProxy ：方法名称是getProxy，返回类型是T，它是一个泛型类型，取决于调用该方法时所指定的类型。</span></li><li fid="u2ff20a7c" data-lake-id="u8f835a30" id="u8f835a30"><span data-lake-id="u84be83c9" id="u84be83c9">(Class serviceClass) ：这是一个参数，类型是Class，T同样是一个泛型类型，这个参数是用来指定生成代理对象所代理的接口。</span></li></ul><p data-lake-id="u2dc23838" id="u2dc23838"><br></p><p data-lake-id="u354bcc86" id="u354bcc86"><span data-lake-id="u4e5703f7" id="u4e5703f7">return (T) Proxy.newProxyInstance(</span></p><p data-lake-id="u35d1b938" id="u35d1b938"><br></p><ul list="u929316cb"><li fid="u53dabe80" data-lake-id="u2c83d332" id="u2c83d332"><span data-lake-id="u098264e3" id="u098264e3">这里开始创建代理实例，并将结果强制转换为泛型类型T。</span></li></ul><p data-lake-id="u065986ca" id="u065986ca"><br></p><p data-lake-id="u160e3d03" id="u160e3d03"><span data-lake-id="u87c30956" id="u87c30956">serviceClass.getClassLoader(),</span></p><p data-lake-id="u49844aa9" id="u49844aa9"><br></p><ul list="u137a47f2"><li fid="u38e65753" data-lake-id="ubc1e69a3" id="ubc1e69a3"><span data-lake-id="ua24c39f9" id="ua24c39f9">serviceClass.getClassLoader()获取了serviceClass对应的类加载器，Java运行时使用这个加载器来找到和加载类。</span></li></ul><p data-lake-id="u95dce29b" id="u95dce29b"><br></p><p data-lake-id="u28f05506" id="u28f05506"><span data-lake-id="udfb09d70" id="udfb09d70">new Class[]{serviceClass},</span></p><p data-lake-id="u51a02dd2" id="u51a02dd2"><br></p><ul list="u8752e9cc"><li fid="uf0238c06" data-lake-id="u6e0070b5" id="u6e0070b5"><span data-lake-id="u8126ef1d" id="u8126ef1d">这个数组指定了代理类将要实现的接口，这里只指定了一个，即serviceClass。</span></li></ul><p data-lake-id="u1e922753" id="u1e922753"><br></p><p data-lake-id="u7e465880" id="u7e465880"><span data-lake-id="u3f51b9e3" id="u3f51b9e3">new ServiceProxy());</span></p><p data-lake-id="ud4e92d85" id="ud4e92d85"><br></p><ul list="u791728e8"><li fid="ue0bbc8b8" data-lake-id="u75da01ee" id="u75da01ee"><span data-lake-id="u5aaae2ad" id="u5aaae2ad">指定了调用处理器（InvocationHandler），即每当在代理实例上调用方法时，这个处理器的invoke方法都会被调用。</span></li></ul><p data-lake-id="u7ceddd49" id="u7ceddd49"><br></p><p data-lake-id="uf67d5e4f" id="uf67d5e4f"><span data-lake-id="u635ad202" id="u635ad202">}</span></p><p data-lake-id="uaab4a132" id="uaab4a132"><br></p><ul list="ub4bffe93"><li fid="u505228b2" data-lake-id="u95a27576" id="u95a27576"><span data-lake-id="ued56cf0e" id="ued56cf0e">方法结束。</span></li></ul><p data-lake-id="uecf6fbaa" id="uecf6fbaa"><br></p><p data-lake-id="u488e1e25" id="u488e1e25"><span data-lake-id="u2c7607bf" id="u2c7607bf">在Java中，代理是一种设计模式，在这种模式下，代理对象（proxy）控制对另一个对象的访问。你可以在调用实际对象之前或之后添加额外的行为（例如，检查、日志记录、延迟加载等）。Proxy.newProxyInstance方法是java.lang.reflect.Proxy类的一个静态方法，它用于在运行时动态地创建实现了指定接口的代理对象。ServiceProxy是一个实现了InvocationHandler接口的类，在其invoke方法中定义了当代理对象的方法被调用时应该执行的操作。</span></p></details><p data-lake-id="u72f00da9" id="u72f00da9"><br></p><ol list="u75973b64" start="3"><li fid="uc7a44d73" data-lake-id="uc48f4834" id="uc48f4834"><span data-lake-id="ubef7dd8f" id="ubef7dd8f" class="lake-fontsize-12" style="color: #5C8D07">最后，在 EasyConsumerExample 中，就可以通过调用工厂来为 UserService 获取动态代理对象了。</span></li></ol><p data-lake-id="u02a91d0f" id="u02a91d0f"><span data-lake-id="uc6543ca3" id="uc6543ca3" class="lake-fontsize-12" style="color: #5C8D07">修改后的消费者代码</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22EasyConsumerExample%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.consumer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.proxy.ServiceProxyFactory%3B%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E7%A4%BA%E4%BE%8B%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F11%5Cn%20*%2F%5Cnpublic%20class%20EasyConsumerExample%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96UserService%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%5Cn%2F%2F%20%20%20%20%20%20%20%20UserService%20userService%20%3D%20new%20UserServiceProxy()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20%20%20%20UserService%20userService%20%3D%20ServiceProxyFactory.getProxy(UserService.class)%3B%5Cn%20%20%20%20%20%20%20%20User%20user%20%3D%20new%20User()%3B%5Cn%20%20%20%20%20%20%20%20user.setName(%5C%22yybf%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20User%20newUser%20%3D%20userService.getUser(user)%3B%5Cn%20%20%20%20%20%20%20%20if%20(newUser%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(newUser.getName())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22user%20%3D%3D%20null%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22EasyConsumerExample%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dKBfv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u3d63c744" id="u3d63c744"><br></p><blockquote data-lake-id="u918b1ce8" id="u918b1ce8" class="lake-alert lake-alert-success"><p data-lake-id="ue9393c91" id="ue9393c91"><span data-lake-id="ufbee20c8" id="ufbee20c8" class="lake-fontsize-12">关于代理类的思考：</span></p><p data-lake-id="u4595b347" id="u4595b347"><span data-lake-id="udeb00544" id="udeb00544" class="lake-fontsize-12">在消费者和提供者的项目中都引入了需要远程调用的接口 -- UserService，然后在消费者（consumer）中负责调用这个接口中的各种功能，在提供者（provider）中负责去实现这个接口中的不同功能给消费者调用。</span></p><p data-lake-id="u96f9a962" id="u96f9a962"><span data-lake-id="u2496e233" id="u2496e233" class="lake-fontsize-12">所以在消费者调用时，需要将想要调用的接口的类交给动态代理工厂，通过动态代理工厂生成一个动态代理的实例，这时就可以像正常调用一个类中的方法一样调用这个实例。</span></p><p data-lake-id="u544f825b" id="u544f825b"><span data-lake-id="u8d40acba" id="u8d40acba" class="lake-fontsize-12">当调用接口中的某个方法时，会被转发到调用处理器</span><code data-lake-id="u48072ff1" id="u48072ff1"><span data-lake-id="ub17846c2" id="ub17846c2" class="lake-fontsize-12">InvocationHandler</span></code><span data-lake-id="ud3b6ce3f" id="ud3b6ce3f" class="lake-fontsize-12">中；每次代理实例上的方法被调用时，</span><code data-lake-id="u43ab04a9" id="u43ab04a9"><span data-lake-id="uf4ac0b0d" id="uf4ac0b0d" class="lake-fontsize-12">InvocationHandler</span></code><span data-lake-id="u4325de1c" id="u4325de1c" class="lake-fontsize-12">的</span><code data-lake-id="ua1b5d7e4" id="ua1b5d7e4"><span data-lake-id="u88382a70" id="u88382a70" class="lake-fontsize-12">invoke</span></code><span data-lake-id="ue84fee99" id="ue84fee99" class="lake-fontsize-12">方法就会被调用，</span></p><p data-lake-id="u9d7680dc" id="u9d7680dc"><span data-lake-id="u201a9c24" id="u201a9c24" class="lake-fontsize-12">然后编写一个动态代理类（这个类实现调用处理器</span><code data-lake-id="ubc4cbb87" id="ubc4cbb87"><span data-lake-id="uf180f54e" id="uf180f54e" class="lake-fontsize-12">InvocationHandler</span></code><span data-lake-id="u4c50b9c0" id="u4c50b9c0" class="lake-fontsize-12">接口，重写其中的</span><code data-lake-id="u12b867bd" id="u12b867bd"><span data-lake-id="u9e7973ea" id="u9e7973ea" class="lake-fontsize-12">invoke</span></code><span data-lake-id="uc335a64e" id="uc335a64e" class="lake-fontsize-12">方法）在</span><code data-lake-id="uc862aa27" id="uc862aa27"><span data-lake-id="u9652daa5" id="u9652daa5" class="lake-fontsize-12">invoke</span></code><span data-lake-id="u0ee2f8a3" id="u0ee2f8a3" class="lake-fontsize-12">方法中，可以获得正在被调用的方法，以及调用方法时传递的参数；</span></p><p data-lake-id="u5fae2116" id="u5fae2116" style="text-indent: 2em"><span data-lake-id="uabd2c392" id="uabd2c392" class="lake-fontsize-12">因此可以在重写的</span><code data-lake-id="u8f4c0e46" id="u8f4c0e46"><span data-lake-id="ue70c88c4" id="ue70c88c4" class="lake-fontsize-12">invoke</span></code><span data-lake-id="ue0fcadd2" id="ue0fcadd2" class="lake-fontsize-12">方法中将请求序列化之后发送给提供者；在获取到提供者的返回值之后，将其反序列化输出给消费者，这样就完成了一次远程调用。</span></p></blockquote><blockquote data-lake-id="u93784c3f" id="u93784c3f" class="lake-alert lake-alert-color2"><p data-lake-id="uc1f145b5" id="uc1f145b5"><span data-lake-id="u077265bc" id="u077265bc" class="lake-fontsize-12">动态代理的好处：这样在编写了一个动态代理类和代理工厂类之后，无论想调用哪个接口的方法，只需要将想要调用的接口的类传入代理工厂类之后，就可以正常的调用想要调用的方法，通用性很强。</span></p></blockquote><p data-lake-id="ua856d811" id="ua856d811"><br></p><h1 data-lake-id="ys07y" id="ys07y"><span data-lake-id="u207998b7" id="u207998b7">二、全局配置加载</span></h1><h2 data-lake-id="DRpGT" id="DRpGT"><span data-lake-id="u88fd5a4a" id="u88fd5a4a">一、分析需求</span></h2><p data-lake-id="u7badd6f9" id="u7badd6f9" style="text-align: left"><span data-lake-id="u6f158ab5" id="u6f158ab5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 RPC 框架运行的过程中，会涉及到很多的配置信息，比如注册中心的地址、序列化方式、网络服务器端</span></p><p data-lake-id="ud0e1cf7c" id="ud0e1cf7c" style="text-align: left"><span data-lake-id="u53fec674" id="u53fec674" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">口号等等。</span></p><p data-lake-id="u21ccfd5a" id="u21ccfd5a" style="text-align: left"><span data-lake-id="u36513d8a" id="u36513d8a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ubcf8c992" id="ubcf8c992" style="text-align: left"><span data-lake-id="ufa1a9ee5" id="ufa1a9ee5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">之前的简易版 RPC 项目中，是在程序里硬编码了这些配置，不利于维护。</span></p><blockquote data-lake-id="ubdff6fd5" id="ubdff6fd5" class="lake-alert lake-alert-danger"><p data-lake-id="ufc8f84d6" id="ufc8f84d6"><span data-lake-id="u8c5b8f12" id="u8c5b8f12" class="lake-fontsize-12">但是这个最后也没解决</span><span data-lake-id="uac3c3d2c" id="uac3c3d2c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注册中心的地址、序列化方式等通过配置文件去指定</span></p><p data-lake-id="u26f783f7" id="u26f783f7"><span data-lake-id="u52d8d3ab" id="u52d8d3ab" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">todo：看看是否能将core里面的地址、序列化方式通过配置文件去指定</span></p></blockquote><p data-lake-id="u9d4e505a" id="u9d4e505a" style="text-align: left"><span data-lake-id="u0c209a45" id="u0c209a45" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u1a2742b0" id="u1a2742b0" style="text-align: left"><span data-lake-id="ua31805f4" id="ua31805f4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">而且 RPC 框架是需要被其他项目作为服务提供者或者服务消费者引入的，我们应当允许引入框架的项目通</span></p><p data-lake-id="u6a41094b" id="u6a41094b" style="text-align: left"><span data-lake-id="u7906e6ec" id="u7906e6ec" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">过编写配置文件来 </span><strong><span data-lake-id="ua4c72ae6" id="ua4c72ae6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">自定义配置</span></strong><span data-lake-id="u22b3cb4e" id="u22b3cb4e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。并且一般情况下，服务提供者和服务消费者需要编写相同的 RPC 配置。</span></p><p data-lake-id="u6cce83bf" id="u6cce83bf" style="text-align: left"><span data-lake-id="uc34c0237" id="uc34c0237" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uf7b2ece0" id="uf7b2ece0" style="text-align: left"><span data-lake-id="u7e1a3374" id="u7e1a3374" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">因此，需要一套全局配置加载功能。能够让 RPC 框架轻松地从配置文件中读取配置，并且维护一个全</span></p><p data-lake-id="u5cf5077b" id="u5cf5077b" style="text-align: left"><span data-lake-id="u19ec4a17" id="u19ec4a17" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">局配置对象，便于框架快速获取到一致的配置。</span></p><p data-lake-id="ue6455119" id="ue6455119"><br></p><h2 data-lake-id="Z0kVc" id="Z0kVc"><span data-lake-id="u17fb6d24" id="u17fb6d24">二、设计方案</span></h2><h3 data-lake-id="jUfX9" id="jUfX9"><span data-lake-id="u6e80fa75" id="u6e80fa75">配置项</span></h3><p data-lake-id="u98101513" id="u98101513" style="text-align: left"><span data-lake-id="ua1a2c25d" id="ua1a2c25d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">首先梳理需要的配置项，刚开始就一切从简，只提供以下几个配置项即可：</span></p><ul list="ub3893596"><li fid="ud6fd1bf0" data-lake-id="ude8867ef" id="ude8867ef" style="text-align: left"><span data-lake-id="u332c6d9a" id="u332c6d9a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">name 名称</span></li><li fid="ud6fd1bf0" data-lake-id="u8fcbc2eb" id="u8fcbc2eb" style="text-align: left"><span data-lake-id="ude15fdca" id="ude15fdca" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">version 版本号</span></li><li fid="ud6fd1bf0" data-lake-id="u8a044f12" id="u8a044f12" style="text-align: left"><span data-lake-id="u04e59b41" id="u04e59b41" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">serverHost 服务器主机名</span></li><li fid="ud6fd1bf0" data-lake-id="ue43e0c47" id="ue43e0c47" style="text-align: left"><span data-lake-id="ub84ecdb2" id="ub84ecdb2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">serverPort 服务器端口号</span></li></ul><p data-lake-id="u69efe2cb" id="u69efe2cb"><br></p><p data-lake-id="udc562601" id="udc562601" style="text-align: left"><span data-lake-id="ua10b24fe" id="ua10b24fe" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">后续随着框架功能的扩展，可以不断地新增配置项，还可以适当地对配置项进行分组。</span></p><details data-lake-id="ub36e42ff" id="ub36e42ff" open="true" class="lake-collapse"><summary data-lake-id="u90a58c1f" id="u90a58c1f" class="lake-summary"><span data-lake-id="u63a7265b" id="u63a7265b" class="lake-fontsize-12">一些常见的</span><span data-lake-id="u67853240" id="u67853240" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RPC 框架配置项，仅作了解</span></summary><ol list="u2a62fac8"><li fid="u31d826ee" data-lake-id="ue7678587" id="ue7678587" style="text-align: left"><span data-lake-id="u573b03d5" id="u573b03d5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注册中心地址：服务提供者和服务消费者都需要指定注册中心的地址，以便进行服务的注册和发现。</span></li><li fid="u31d826ee" data-lake-id="u16b41c6b" id="u16b41c6b" style="text-align: left"><span data-lake-id="u5031299f" id="u5031299f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务接口：服务提供者需要指定提供的服务接口，而服务消费者需要指定要调用的服务接口。</span></li><li fid="u31d826ee" data-lake-id="u51985eb6" id="u51985eb6" style="text-align: left"><span data-lake-id="u39cd0c89" id="u39cd0c89" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化方式：服务提供者和服务消费者都需要指定序列化方式，以便在网络中传输数据时进行序列化和反序列化。</span></li><li fid="u31d826ee" data-lake-id="u50f10d74" id="u50f10d74" style="text-align: left"><span data-lake-id="u04b2653e" id="u04b2653e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">网络通信协议：服务提供者和服务消费者都需要选择合适的网络通信协议，比如 TCP、HTTP 等。</span></li><li fid="u31d826ee" data-lake-id="ua812af66" id="ua812af66" style="text-align: left"><span data-lake-id="ub5a8d809" id="ub5a8d809" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">超时设置：服务提供者和服务消费者都需要设置超时时间，以便在调用服务时进行超时处理。</span></li><li fid="u31d826ee" data-lake-id="u8ab0b58d" id="u8ab0b58d" style="text-align: left"><span data-lake-id="ufae749cb" id="ufae749cb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">负载均衡策略：服务消费者需要指定负载均衡策略，以决定调用哪个服务提供者实例。</span></li><li fid="u31d826ee" data-lake-id="u2c58f29b" id="u2c58f29b" style="text-align: left"><span data-lake-id="ud2bd52fb" id="ud2bd52fb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务端线程模型：服务提供者需要指定服务端线程模型，以决定如何处理客户端请求。</span></li></ol></details><card type="block" name="hr" value="data:%7B%22id%22%3A%22JpFZ0%22%7D"></card><p data-lake-id="ub221b2e7" id="ub221b2e7" style="text-align: left"><span data-lake-id="uae2d244d" id="uae2d244d" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">感兴趣的可以了解下 Dubbo RPC 框架的配置项，包括应用配置、注册中心配置、服务配置等。</span></p><blockquote data-lake-id="u58a171fb" id="u58a171fb"><p data-lake-id="u373074e0" id="u373074e0" style="text-align: left"><span data-lake-id="ue4e2f9bb" id="ue4e2f9bb" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">可以仔细学习一下，解决上面的问题</span></p></blockquote><p data-lake-id="uf37b8836" id="uf37b8836" style="text-align: left"><span data-lake-id="u6644d536" id="u6644d536" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考 Dubbo：</span><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/api" target="_blank" data-lake-id="u328b2825" id="u328b2825"><span data-lake-id="ua98d5c09" id="ua98d5c09">https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/config/api/</span></a></p><p data-lake-id="u65939c8b" id="u65939c8b" style="text-align: left"><span data-lake-id="ud466f070" id="ud466f070" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">任意项目引入 Dubbo 依赖后，就可以查看到 </span><span data-lake-id="uebb943bf" id="uebb943bf" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ApplicationConfig</span><span data-lake-id="ub14f7451" id="ub14f7451" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 配置类，如图：</span></p><p data-lake-id="ue79cad94" id="ue79cad94"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710511910887-a32f7681-fc76-4144-8c4e-ed751efc1f3c.png%22%2C%22taskId%22%3A%22u92b6d0b9-af5f-4fb4-b3de-08cdad442ce%22%2C%22clientId%22%3A%22u37f4949a-1ed0-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22FlcnPv6-6hqAuDCCfRW0NkHGxL7m.png%22%2C%22size%22%3A343229%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2550%2C%22originHeight%22%3A1770%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22APPLICATIONCONFIG.CLASS%20DECOMPILED%20.CLASS%20FILE%2CBYTECODE%20VERSION%3A52.0%20(JAVA%208)%20DOWNLOAD%20SOURCES%20CHOOSE%20S%20SOURCES...%20ORG.APACHE.DUBBO.CONFIG%3B%20PACKAGE%208%20IMPORT%2024%204%20USAGES%201%20I%20I%20I%20I%20%2025%20PUBLIC%20CLASS%20APPLICATIONCONFIG%20EXTENDS%20ABSTRACTCONFIG%20NOUSAGES%2026%20PRVALO%20STATLO%20FINAL%20ETRORTYPARARALO99ER%20%20LOGER%20-%20LOG9ORFACTORY%2CJSTERRORTUPEANARAGPER(APPLICATIONFIG%3A(%20NOUSAGES%20PRIVATE%20STATIC%20FINAL%20LONG%20SERIALVERSIONUID%20-%205508512956753757169L%3B%2027%20NOUSAGES%2028%20PRIVATE%20STRING%20NAME%3B%20NOUSAGES%2029%20PRIVATE%20STRING%20VERSION%3B%20NOUSAGES%2030%20PRIVATE%20STRING%20OWNER%3B%20NOUSAGES%2031%20PRIVATE%20STRING%20ORGANIZATION%3B%20NOUSAGES%2032%20PRIVATE%20STRING%20ARCHITECTURE%3B%20NOUSAGES%2033%20%20PRIVATE%20STRING%20ENVIRONMENT%3B%20NOUSAGES%2034%20PRIVATE%20STRING%20COMPILER%3B%20NOUSAGES%20%20PRIVATE%20STRING%20LOGGER%3B%2035%20NOUSAGES%20PRIVATE%20LIST%3CREGISTRYCONFIG%3E%20REGISTRIES%3B%2036%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A54%2C%22y%22%3A10%2C%22width%22%3A322%2C%22height%22%3A33%2C%22text%22%3A%22APPLICATIONCONFIG.CLASS%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A77%2C%22width%22%3A833%2C%22height%22%3A41%2C%22text%22%3A%22DECOMPILED%20.CLASS%20FILE%2CBYTECODE%20VERSION%3A52.0%20(JAVA%208)%22%7D%2C%7B%22x%22%3A1914%2C%22y%22%3A80%2C%22width%22%3A297%2C%22height%22%3A33%2C%22text%22%3A%22DOWNLOAD%20SOURCES%22%7D%2C%7B%22x%22%3A2238%2C%22y%22%3A82%2C%22width%22%3A144%2C%22height%22%3A32%2C%22text%22%3A%22CHOOSE%20S%22%7D%2C%7B%22x%22%3A2363%2C%22y%22%3A83%2C%22width%22%3A158%2C%22height%22%3A30%2C%22text%22%3A%22SOURCES...%22%7D%2C%7B%22x%22%3A322%2C%22y%22%3A247%2C%22width%22%3A483%2C%22height%22%3A48%2C%22text%22%3A%22ORG.APACHE.DUBBO.CONFIG%3B%22%7D%2C%7B%22x%22%3A165%2C%22y%22%3A258%2C%22width%22%3A143%2C%22height%22%3A29%2C%22text%22%3A%22PACKAGE%22%7D%2C%7B%22x%22%3A34%2C%22y%22%3A363%2C%22width%22%3A31%2C%22height%22%3A32%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A168%2C%22y%22%3A365%2C%22width%22%3A120%2C%22height%22%3A28%2C%22text%22%3A%22IMPORT%22%7D%2C%7B%22x%22%3A22%2C%22y%22%3A418%2C%22width%22%3A40%2C%22height%22%3A29%2C%22text%22%3A%2224%22%7D%2C%7B%22x%22%3A171%2C%22y%22%3A470%2C%22width%22%3A320%2C%22height%22%3A34%2C%22text%22%3A%224%20USAGES%201%20I%20I%20I%20I%20%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A521%2C%22width%22%3A92%2C%22height%22%3A33%2C%22text%22%3A%2225%22%7D%2C%7B%22x%22%3A164%2C%22y%22%3A523%2C%22width%22%3A1074%2C%22height%22%3A39%2C%22text%22%3A%22PUBLIC%20CLASS%20APPLICATIONCONFIG%20EXTENDS%20ABSTRACTCONFIG%22%7D%2C%7B%22x%22%3A247%2C%22y%22%3A584%2C%22width%22%3A147%2C%22height%22%3A29%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A635%2C%22width%22%3A40%2C%22height%22%3A27%2C%22text%22%3A%2226%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A626%2C%22width%22%3A2283%2C%22height%22%3A53%2C%22text%22%3A%22PRVALO%20STATLO%20FINAL%20ETRORTYPARARALO99ER%20%20LOGER%20-%20LOG9ORFACTORY%2CJSTERRORTUPEANARAGPER(APPLICATIONFIG%3A(%22%7D%2C%7B%22x%22%3A244%2C%22y%22%3A691%2C%22width%22%3A150%2C%22height%22%3A27%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A255%2C%22y%22%3A739%2C%22width%22%3A1309%2C%22height%22%3A35%2C%22text%22%3A%22PRIVATE%20STATIC%20FINAL%20LONG%20SERIALVERSIONUID%20-%205508512956753757169L%3B%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A741%2C%22width%22%3A42%2C%22height%22%3A30%2C%22text%22%3A%2227%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A800%2C%22width%22%3A152%2C%22height%22%3A28%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A850%2C%22width%22%3A41%2C%22height%22%3A29%2C%22text%22%3A%2228%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A850%2C%22width%22%3A395%2C%22height%22%3A32%2C%22text%22%3A%22PRIVATE%20STRING%20NAME%3B%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A909%2C%22width%22%3A156%2C%22height%22%3A25%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A955%2C%22width%22%3A39%2C%22height%22%3A30%2C%22text%22%3A%2229%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A959%2C%22width%22%3A460%2C%22height%22%3A32%2C%22text%22%3A%22PRIVATE%20STRING%20VERSION%3B%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1016%2C%22width%22%3A149%2C%22height%22%3A26%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A1066%2C%22width%22%3A39%2C%22height%22%3A28%2C%22text%22%3A%2230%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1068%2C%22width%22%3A419%2C%22height%22%3A33%2C%22text%22%3A%22PRIVATE%20STRING%20OWNER%3B%22%7D%2C%7B%22x%22%3A244%2C%22y%22%3A1124%2C%22width%22%3A155%2C%22height%22%3A27%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A1173%2C%22width%22%3A42%2C%22height%22%3A29%2C%22text%22%3A%2231%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1174%2C%22width%22%3A562%2C%22height%22%3A35%2C%22text%22%3A%22PRIVATE%20STRING%20ORGANIZATION%3B%22%7D%2C%7B%22x%22%3A246%2C%22y%22%3A1233%2C%22width%22%3A170%2C%22height%22%3A27%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A1282%2C%22width%22%3A40%2C%22height%22%3A29%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1282%2C%22width%22%3A560%2C%22height%22%3A35%2C%22text%22%3A%22PRIVATE%20STRING%20ARCHITECTURE%3B%22%7D%2C%7B%22x%22%3A244%2C%22y%22%3A1339%2C%22width%22%3A150%2C%22height%22%3A28%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A1390%2C%22width%22%3A36%2C%22height%22%3A27%2C%22text%22%3A%2233%22%7D%2C%7B%22x%22%3A243%2C%22y%22%3A1391%2C%22width%22%3A536%2C%22height%22%3A34%2C%22text%22%3A%22%20PRIVATE%20STRING%20ENVIRONMENT%3B%22%7D%2C%7B%22x%22%3A244%2C%22y%22%3A1448%2C%22width%22%3A157%2C%22height%22%3A27%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A1498%2C%22width%22%3A40%2C%22height%22%3A27%2C%22text%22%3A%2234%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1499%2C%22width%22%3A481%2C%22height%22%3A34%2C%22text%22%3A%22PRIVATE%20STRING%20COMPILER%3B%22%7D%2C%7B%22x%22%3A243%2C%22y%22%3A1556%2C%22width%22%3A164%2C%22height%22%3A29%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A244%2C%22y%22%3A1604%2C%22width%22%3A438%2C%22height%22%3A36%2C%22text%22%3A%22%20PRIVATE%20STRING%20LOGGER%3B%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A1607%2C%22width%22%3A39%2C%22height%22%3A29%2C%22text%22%3A%2235%22%7D%2C%7B%22x%22%3A246%2C%22y%22%3A1662%2C%22width%22%3A147%2C%22height%22%3A27%2C%22text%22%3A%22NOUSAGES%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1708%2C%22width%22%3A801%2C%22height%22%3A39%2C%22text%22%3A%22PRIVATE%20LIST%3CREGISTRYCONFIG%3E%20REGISTRIES%3B%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A1712%2C%22width%22%3A41%2C%22height%22%3A30%2C%22text%22%3A%2236%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232c2c2b%22%2C%22id%22%3A%22u8db3db45%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><card type="block" name="hr" value="data:%7B%22id%22%3A%22Hyjir%22%7D"></card><h3 data-lake-id="q4QpW" id="q4QpW" style="text-align: left"><span data-lake-id="u96739e06" id="u96739e06" style="color: rgb(47, 48, 52)">读取配置文件</span></h3><p data-lake-id="u31e14387" id="u31e14387" style="text-align: left"><span data-lake-id="uaf6b2590" id="uaf6b2590" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何读取配置文件呢？</span></p><p data-lake-id="u1d0704b0" id="u1d0704b0" style="text-align: left"><span data-lake-id="u2e509fb8" id="u2e509fb8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里可以使用 Java 的 Properties 类自行编写，但是更推荐使用一些第三方工具库，</span></p><p data-lake-id="u166f1677" id="u166f1677" style="text-align: left"><span data-lake-id="ud18cbfe2" id="ud18cbfe2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">比如 Hutool 的 Setting 模块，可以直接读取指定名称的配置文件中的部分配置信息，并且转换成 Java 对象，非常方便。</span></p><p data-lake-id="ued0ff7d2" id="ued0ff7d2" style="text-align: left"><span data-lake-id="u23448206" id="u23448206" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u3ec72544" id="u3ec72544" style="text-align: left"><span data-lake-id="ua906f418" id="ua906f418" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考官方文档：</span><a href="https://doc.hutool.cn/pages/Props" target="_blank" data-lake-id="u20c83491" id="u20c83491"><span data-lake-id="uef632210" id="uef632210">https://doc.hutool.cn/pages/Props</span></a><span data-lake-id="u36a5c663" id="u36a5c663" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 。</span></p><p data-lake-id="u084a5d2f" id="u084a5d2f" style="text-align: left"><span data-lake-id="u4c0c7ab7" id="u4c0c7ab7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u2d8e86b8" id="u2d8e86b8" style="text-align: left"><span data-lake-id="u615c0024" id="u615c0024" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一般情况下，读取的配置文件名称为 </span><span data-lake-id="u8f3282df" id="u8f3282df" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">application.properties</span><span data-lake-id="u2312ba3f" id="u2312ba3f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，还可以通过指定文件名称后缀的方式来区</span></p><p data-lake-id="u510f70c8" id="u510f70c8" style="text-align: left"><span data-lake-id="u4a47c349" id="u4a47c349" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">分多环境，比如 </span><span data-lake-id="u7c20c1aa" id="u7c20c1aa" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">application-prod.properties</span><span data-lake-id="u4463b3fa" id="u4463b3fa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 表示生产环境、 </span><span data-lake-id="ue6f4b03d" id="ue6f4b03d" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">application-test.properties</span><span data-lake-id="u5f363f76" id="u5f363f76" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 表示测试环境。</span></p><p data-lake-id="u57c9ea80" id="u57c9ea80"><br></p><h2 data-lake-id="d8wmh" id="d8wmh"><span data-lake-id="uef29cc87" id="uef29cc87">三、开发实现</span></h2><h3 data-lake-id="XYIUK" id="XYIUK" style="text-align: left"><span data-lake-id="u5526f12e" id="u5526f12e" style="color: rgb(47, 48, 52)">1、项目初始化</span></h3><p data-lake-id="ub9b88897" id="ub9b88897"><br></p><h4 data-lake-id="lm7EO" id="lm7EO" data-lake-index-type="2"><span data-lake-id="u6ba79261" id="u6ba79261" style="color: rgb(47, 48, 52)">先新建 </span><code data-lake-id="ud83a650d" id="ud83a650d"><span data-lake-id="u5788b995" id="u5788b995" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">chen-rpc-core</span><span data-lake-id="ud60aaa6f" id="ud60aaa6f" style="color: rgb(47, 48, 52)"> </span></code><span data-lake-id="ue083ff7f" id="ue083ff7f" style="color: rgb(47, 48, 52)">模块，后面的 RPC 项目开发及扩展均在该项目进行。</span></h4><p data-lake-id="u1e0134a3" id="u1e0134a3" style="text-align: left"><span data-lake-id="u432a1c50" id="u432a1c50" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">与 </span><code data-lake-id="u4ff313c2" id="u4ff313c2"><span data-lake-id="ue7fad3bb" id="ue7fad3bb" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">chen-rpc-easy</span></code><span data-lake-id="u79b9a12c" id="u79b9a12c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">模块代码一致</span></p><p data-lake-id="u1f11a17d" id="u1f11a17d" style="text-align: left"><span data-lake-id="u06fc04c4" id="u06fc04c4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="wEchA" id="wEchA" data-lake-index-type="2"><span data-lake-id="u4cf3fa93" id="u4cf3fa93" style="color: rgb(47, 48, 52)">然后给项目引入日志库和单元测试依赖，便于后续开发：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fch.qos.logback%2Flogback-classic%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Ech.qos.logback%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Elogback-classic%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E1.2.3%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Ejunit%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Ejunit%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3ERELEASE%3C%2Fversion%3E%5Cn%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22td7zy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ub078f016" id="ub078f016"><br></p><h4 data-lake-id="ckkxf" id="ckkxf" data-lake-index-type="2"><span data-lake-id="u4756f9df" id="u4756f9df" style="color: rgb(47, 48, 52)">将 </span><code data-lake-id="ub8a486d9" id="ub8a486d9"><span data-lake-id="uca3d564f" id="uca3d564f" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">example-consumer</span></code><span data-lake-id="u24d16a66" id="u24d16a66" style="color: rgb(47, 48, 52)"> 和 </span><code data-lake-id="udaf00178" id="udaf00178"><span data-lake-id="ube723844" id="ube723844" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">example-provider</span></code><span data-lake-id="u9c7798ba" id="u9c7798ba" style="color: rgb(47, 48, 52)"> 项目引入的 RPC 依赖都替换成 </span><code data-lake-id="u637156e6" id="u637156e6"><span data-lake-id="u1c55f46a" id="u1c55f46a" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">chen-rpc-core</span></code><span data-lake-id="u6a931927" id="u6a931927" style="color: rgb(47, 48, 52)">，代码如下：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Echen-rpc-core%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YDOGV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="WNmTh" id="WNmTh" style="text-align: left"><span data-lake-id="ueedfdc33" id="ueedfdc33" style="color: rgb(47, 48, 52)">2、配置加载</span></h3><h4 data-lake-id="nKZbk" id="nKZbk" data-lake-index-type="2"><span data-lake-id="ub706b90f" id="ub706b90f" style="color: rgb(47, 48, 52)">在 config 包下新建配置类 </span><code data-lake-id="u9d1e5808" id="u9d1e5808"><span data-lake-id="ubd74b102" id="ubd74b102" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">RpcConfig</span></code><span data-lake-id="u00abb193" id="u00abb193" style="color: rgb(47, 48, 52)">，用于保存配置信息。</span></h4><p data-lake-id="u9810f16f" id="u9810f16f" style="text-align: left"><span data-lake-id="u9219bcb8" id="u9219bcb8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以给属性指定一些默认值，完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RpcConfig%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.config%3B%5Cn%5Cnimport%20lombok.Data%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%A8%E4%BA%8E%E4%BF%9D%E5%AD%98%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cn%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20private%20String%20name%20%3D%20%5C%22chen-rpc%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20private%20String%20version%20%3D%20%5C%221.0%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%BB%E6%9C%BA%E5%90%8D%5Cn%20%20%20%20private%20String%20serverHost%20%3D%20%5C%22localHost%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3%E5%8F%B7%5Cn%20%20%20%20private%20Integer%20serverPort%20%3D%208080%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RpcConfig%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Fjopb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="bwMuN" id="bwMuN" data-lake-index-type="2"><span data-lake-id="u54f26b82" id="u54f26b82" style="color: rgb(47, 48, 52)">在 utils 包下新建工具类 </span><code data-lake-id="u2c02e362" id="u2c02e362"><span data-lake-id="u1dd99984" id="u1dd99984" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ConfigUtils</span><span data-lake-id="u8135ad8d" id="u8135ad8d" style="color: rgb(47, 48, 52)">​</span></code></h4><p data-lake-id="u15287025" id="u15287025"><span data-lake-id="ue69f3e26" id="ue69f3e26" style="color: rgb(47, 48, 52)">作用是读取配置文件并返回配置对象，可以简化调用。</span></p><p data-lake-id="u8e0d3765" id="u8e0d3765"><span data-lake-id="u3f657eda" id="u3f657eda" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u5e371745" id="u5e371745" style="text-align: left"><span data-lake-id="u0f5b0703" id="u0f5b0703" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">工具类应当尽量通用，和业务不强绑定，提高使用的灵活性。比如支持外层传入要读取的配置内容前缀、</span></p><p data-lake-id="u2b61b1bb" id="u2b61b1bb" style="text-align: left"><span data-lake-id="u3b96df85" id="u3b96df85" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">支持传入环境等。</span></p><p data-lake-id="u396f00f2" id="u396f00f2" style="text-align: left"><span data-lake-id="u38a43063" id="u38a43063" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="udf193b8e" id="udf193b8e" style="text-align: left"><span data-lake-id="u9cb8e9f4" id="u9cb8e9f4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ConfigUtil%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.utils%3B%5Cn%5Cnimport%20cn.hutool.core.util.StrUtil%3B%5Cnimport%20cn.hutool.setting.dialect.Props%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E8%BF%94%E5%9B%9E%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%AE%80%E5%8C%96%E8%B0%83%E7%94%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cnpublic%20class%20ConfigUtil%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20tClass%3A%20%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%98%A0%E5%B0%84%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40param%20prefix%3A%20%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E7%9A%84%E5%89%8D%E7%BC%80%20%E8%BF%87%E6%BB%A4%E5%8F%AA%E6%9C%89%E7%89%B9%E5%AE%9A%E5%89%8D%E7%BC%80%E7%9A%84%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2017%3A48%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20%3CT%3E%20T%20loadConfig(Class%3CT%3E%20tClass%2C%20String%20prefix)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20loadConfig(tClass%2C%20prefix%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%AF%B9%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E5%85%BC%E5%AE%B9%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20tClass%3A%20%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%98%A0%E5%B0%84%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40param%20prefix%3A%20%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E7%9A%84%E5%89%8D%E7%BC%80%20%E8%BF%87%E6%BB%A4%E5%8F%AA%E6%9C%89%E7%89%B9%E5%AE%9A%E5%89%8D%E7%BC%80%E7%9A%84%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%20*%20%40param%20environment%3A%20%E6%8C%87%E5%AE%9A%E7%9A%84%E7%8E%AF%E5%A2%83%EF%BC%8C%E4%B8%8D%E6%8C%87%E5%AE%9A%E5%B0%B1%E9%BB%98%E8%AE%A4%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2017%3A59%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20%3CT%3E%20T%20loadConfig(Class%3CT%3E%20tClass%2C%20String%20prefix%2C%20String%20environment)%20%7B%5Cn%20%20%20%20%20%20%20%20StringBuilder%20configFileBuilder%20%3D%20new%20StringBuilder(%5C%22application%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20if%20(StrUtil.isNotBlank(environment))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20configFileBuilder.append(%5C%22-%5C%22).append(environment)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20configFileBuilder.append(%5C%22.properties%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Props%20props%20%3D%20new%20Props(configFileBuilder.toString())%3B%5Cn%20%20%20%20%20%20%20%20return%20props.toBean(tClass%2C%20prefix)%3B%20%2F%2F%20%E5%B0%86%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%88%B0tClass%E4%B8%AD%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ConfigUtil%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zal8J%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><blockquote data-lake-id="u5af7aae9" id="u5af7aae9" class="lake-alert lake-alert-color2"><p data-lake-id="u172978d3" id="u172978d3"><span data-lake-id="u517271d1" id="u517271d1" class="lake-fontsize-12">这里使用了方法的重载，通过参数的不同，实现了同名同返回值的方法实现不同功能，这样在用户调用方法的时候如果有不同环境的需求，就在参数的最后加上相对应的环境；如果没有用户也不必再多填写一个环境参数，也不必在更换一个方法调用，增加学习使用成本，最后在方法内部进行处理。</span></p><p data-lake-id="u8f17580c" id="u8f17580c"><span data-lake-id="ud3d5f4d9" id="ud3d5f4d9" class="lake-fontsize-12">这样简化了调用的复杂性，是一个很经典的设计</span></p></blockquote><p data-lake-id="ud0152acc" id="ud0152acc" style="text-align: left"><span data-lake-id="u666b0f9b" id="u666b0f9b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">之后，调用 </span><code data-lake-id="uf5a8418a" id="uf5a8418a"><span data-lake-id="uf5ba7c7e" id="uf5ba7c7e" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ConfigUtils</span><span data-lake-id="u9cd730e6" id="u9cd730e6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span></code><span data-lake-id="u2aa83418" id="u2aa83418" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的静态方法就能读取配置了。</span></p><p data-lake-id="ub04fecb0" id="ub04fecb0" style="text-align: left"><span data-lake-id="uab54217d" id="uab54217d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="qgipN" id="qgipN" data-lake-index-type="2"><span data-lake-id="ued0a4a00" id="ued0a4a00" style="color: rgb(47, 48, 52)">在 constant 包中新建 RpcConstant 接口，用于存储 RPC 框架相关的常量。</span></h4><p data-lake-id="u80b29b41" id="u80b29b41" style="text-align: left"><span data-lake-id="ufa0814e4" id="ufa0814e4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u94372e7b" id="u94372e7b" style="text-align: left"><span data-lake-id="u168cee81" id="u168cee81" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">比如默认配置文件的加载前缀为 rpc：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RpcConstant%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.constant%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%A8%E6%9D%A5%E9%85%8D%E7%BD%AERPC%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cnpublic%20interface%20RpcConstant%20%7B%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%89%8D%E7%BC%80%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%8F%AA%E6%9C%89%E7%B1%BB%E4%BC%BC%20%E2%80%98rpc.xxx%20%3D%20xxx%E2%80%99%20%E7%9A%84%E9%85%8D%E7%BD%AE%E6%89%8D%E8%83%BD%E8%A2%AB%E5%8A%A0%E8%BD%BD%5Cn%20%20%20%20String%20DEFAULT_CONFIG_PREFIX%20%3D%20%5C%22rpc%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RpcConstant%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ousj7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u5b13215f" id="u5b13215f" open="false" class="lake-collapse"><summary data-lake-id="u18307cb0" id="u18307cb0" class="lake-summary"><span data-lake-id="u0584dc8e" id="u0584dc8e" class="lake-fontsize-12">关于在接口中定义常量</span></summary><p data-lake-id="u3f2a177f" id="u3f2a177f"><span data-lake-id="u4b4c7036" id="u4b4c7036">在Java中，将常量定义在接口中而不是类中是一种常见的做法，尽管这种做法有时会引发争议。选择将常量放在接口中而不是类中的原因主要有以下几点：</span></p><ol list="uef578da1"><li fid="ub9508923" data-lake-id="uaeee4880" id="uaeee4880"><span data-lake-id="u3e885aec" id="u3e885aec" style="color: #5C8D07"> </span><strong><span data-lake-id="u1806289d" id="u1806289d" style="color: #5C8D07">易于访问和使用</span></strong><span data-lake-id="uced0f7f2" id="uced0f7f2">：接口中定义的常量默认是</span><code data-lake-id="u08b25624" id="u08b25624"><span data-lake-id="uf9cee8b4" id="uf9cee8b4">public static final</span></code><span data-lake-id="u9afb61fe" id="u9afb61fe">的，这意味着它们可以被直接通过接口名访问而无需实例化对象，从而提供了方便的使用方式。 </span></li><li fid="ub9508923" data-lake-id="ubb7262b5" id="ubb7262b5"><span data-lake-id="u12350319" id="u12350319" style="color: #5C8D07"> </span><strong><span data-lake-id="ucf66d054" id="ucf66d054" style="color: #5C8D07">避免类加载</span></strong><span data-lake-id="u25ce6210" id="u25ce6210">：在某些情况下，如果常量存储在类中，可能需要加载该类或创建其实例来访问这些常量，这可能导致额外的开销。而接口则不需要实例化，可以直接访问其中的常量。 </span></li><li fid="ub9508923" data-lake-id="ue60ad063" id="ue60ad063"><span data-lake-id="ue60c7455" id="ue60c7455" style="color: #5C8D07"> </span><strong><span data-lake-id="ua67175fe" id="ua67175fe" style="color: #5C8D07">提供一个清晰的常量集合</span></strong><span data-lake-id="u433b4ab1" id="u433b4ab1">：将相关常量组织在一个接口中可以提供一个清晰定义的、专门用于存储常量的位置，这样做可以提高代码的组织性和可读性。 </span></li><li fid="ub9508923" data-lake-id="u4d9ce89a" id="u4d9ce89a"><span data-lake-id="ua29d5cf4" id="ua29d5cf4"> </span><strong><span data-lake-id="ub92c51e5" id="ub92c51e5" style="color: #5C8D07">接口的实现和继承</span></strong><span data-lake-id="ub20a605e" id="ub20a605e">：虽然这个例子中的接口可能不是为了被实现而设计的，但在一些情况下，可能希望通过实现接口来让一个类自动拥有这些常量。这样可以确保所有实现了该接口的类都能够访问这些常量，保持了一致性。 </span></li></ol><p data-lake-id="u3b9fb6e6" id="u3b9fb6e6"><br></p><p data-lake-id="u0351d414" id="u0351d414"><span data-lake-id="u3703e3d3" id="u3703e3d3">尽管有上述优点，但也有一些反对意见：</span></p><ul list="u16ab7168"><li fid="u8774a168" data-lake-id="ub9d73a88" id="ub9d73a88"><strong><span data-lake-id="u462221f1" id="u462221f1">滥用接口</span></strong><span data-lake-id="uf4f59deb" id="uf4f59deb">：有些开发者认为，将常量放在接口中是对接口的滥用，因为接口主要是为了定义类型的协议（方法）而设计的。将常量放在类或枚举中可能是更符合逻辑的选择。</span></li><li fid="u8774a168" data-lake-id="u4ebdc2c3" id="u4ebdc2c3"><strong><span data-lake-id="u6c0db317" id="u6c0db317">污染命名空间</span></strong><span data-lake-id="u4ae63f85" id="u4ae63f85">：如果一个类实现了这样一个接口，所有的常量就会进入到该类的命名空间中，可能会导致命名冲突。</span></li></ul><p data-lake-id="uf98c7680" id="uf98c7680"><br></p><p data-lake-id="ue219f3f8" id="ue219f3f8"><span data-lake-id="ufe538e21" id="ufe538e21">尽管关于在接口中定义常量的最佳实践存在一些争议，但这种做法在一些特定场景下仍然是有其用武之地的。理解使用此模式的动机和可能的替代方案对于选择最适合您的项目的策略很重要。</span></p></details><p data-lake-id="u4dfe8a24" id="u4dfe8a24"><span data-lake-id="u0f6543e2" id="u0f6543e2" class="lake-fontsize-12">这样就可以读取到以下配置</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22properties%22%2C%22code%22%3A%22rpc.name%3DchenRpc%5Cnrpc.version%3D2.0%5Cnrpc.serverPort%3D8081%5Cnrpc.mock%3Dtrue%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uWzBv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8e558193" id="u8e558193"><br></p><h3 data-lake-id="klPcL" id="klPcL" style="text-align: left"><span data-lake-id="ue036cecf" id="ue036cecf" style="color: rgb(47, 48, 52)">3、维护全局配置对象</span></h3><p data-lake-id="u0cd7d544" id="u0cd7d544" style="text-align: left"><span data-lake-id="u94cc2227" id="u94cc2227" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RPC 框架中需要维护一个全局的配置对象。</span><span data-lake-id="ucae3da34" id="ucae3da34" class="lake-fontsize-12" style="color: #5C8D07">在引入 RPC 框架的项目启动时，从配置文件中读取配置并创建</span></p><p data-lake-id="ud7bebef6" id="ud7bebef6" style="text-align: left"><span data-lake-id="u97ba6f2e" id="u97ba6f2e" class="lake-fontsize-12" style="color: #5C8D07">对象实例，之后就可以集中地从这个对象中获取配置信息，而不用每次加载配置时再重新读取配置、并创</span></p><p data-lake-id="u869f3334" id="u869f3334" style="text-align: left"><span data-lake-id="u11d91181" id="u11d91181" class="lake-fontsize-12" style="color: #5C8D07">建新的对象，减少了性能开销。</span></p><p data-lake-id="udf96965d" id="udf96965d" style="text-align: left"><span data-lake-id="u8b3b6bd9" id="u8b3b6bd9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ud6e59e88" id="ud6e59e88" style="text-align: left"><span data-lake-id="u74253e52" id="u74253e52" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用设计模式中的 </span><strong><span data-lake-id="u6da07267" id="u6da07267" class="lake-fontsize-12" style="color: #5C8D07">单例模式</span></strong><span data-lake-id="u13eac8c6" id="u13eac8c6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，就能够很轻松地实现这个需求了。</span></p><p data-lake-id="ufe040abe" id="ufe040abe" style="text-align: left"><span data-lake-id="u169040e9" id="u169040e9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u97ea19ec" id="u97ea19ec" style="text-align: left"><span data-lake-id="u8cf42c4c" id="u8cf42c4c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一般情况下，我们会使用 holder 来维护全局配置对象实例。在我们的项目中，可以换一个更优雅的命名，</span></p><p data-lake-id="ua2f43363" id="ua2f43363" style="text-align: left"><span data-lake-id="u8c6b7ffa" id="u8c6b7ffa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用 </span><span data-lake-id="u0ac4fa45" id="u0ac4fa45" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">RpcApplication</span><span data-lake-id="ud456ca79" id="ud456ca79" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 类作为 RPC 项目的启动入口、并且维护项目全局用到的变量。</span></p><p data-lake-id="u69605c9d" id="u69605c9d" style="text-align: left"><span data-lake-id="u5ff9ac18" id="u5ff9ac18" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ufd157cee" id="ufd157cee" style="text-align: left"><span data-lake-id="u0aaaf250" id="u0aaaf250" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RpcApplication%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc%3B%5Cn%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.utils.ConfigUtil%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cn%2F**%5Cn%20*%20RPC%20%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8%5Cn%20*%20%E7%9B%B8%E5%BD%93%E4%BA%8E%20holder%EF%BC%8C%E5%AD%98%E6%94%BE%E4%BA%86%E9%A1%B9%E7%9B%AE%E5%85%A8%E5%B1%80%E7%94%A8%E5%88%B0%E7%9A%84%E5%8F%98%E9%87%8F%E3%80%82%E5%8F%8C%E6%A3%80%E9%94%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%5Cn%20*%20%E4%BD%9C%E4%B8%BARPC%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%90%AF%E5%8A%A8%E5%85%A5%E5%8F%A3%EF%BC%8C%E7%BB%B4%E6%8A%A4%E5%85%A8%E5%B1%80%E7%94%A8%E5%88%B0%E7%9A%84%E5%8F%98%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20RpcApplication%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20volatile%20%E7%A1%AE%E4%BF%9D%E4%BA%86%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E5%AF%B9%20rpcConfig%20%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%5Cn%20%20%20%20private%20static%20volatile%20RpcConfig%20rpcConfig%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BC%A0%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20*%20%5Cn%20%20%20%20%20*%20%40param%20newRpcConfig%3A%20%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2018%3A32%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20init(RpcConfig%20newRpcConfig)%20%7B%5Cn%20%20%20%20%20%20%20%20rpcConfig%20%3D%20newRpcConfig%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22rpc%20init%2Cconfig%20%3D%20%7B%7D%5C%22%2C%20newRpcConfig.toString())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%BD%BD%E4%BA%86init%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BD%BF%E5%BE%97%E5%8F%AF%E4%BB%A5%E4%BB%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%8E%B7%E5%BE%97%E9%BB%98%E8%AE%A4%E5%89%8D%E7%BC%80%E7%9A%84%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2018%3A37%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20RpcConfig%20newRpcConfig%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%BE%97%E6%8C%87%E5%AE%9A%E5%89%8D%E7%BC%80%E7%9A%84%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20newRpcConfig%20%3D%20ConfigUtil.loadConfig(RpcConfig.class%2C%20RpcConstant.DEFAULT_CONFIG_PREFIX)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%E5%89%8D%E7%BC%80%E9%85%8D%E7%BD%AE%E8%8E%B7%E5%8F%96%E5%A4%B1%E8%B4%A5%EF%BC%8C%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20newRpcConfig%20%3D%20new%20RpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20init(newRpcConfig)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%5Cn%20%20%20%20%20*%20%E5%A4%96%E7%95%8C%E4%BB%8E%E5%AF%B9%E8%B1%A1%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%B7%B2%E7%BB%8F%E4%BB%8E%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E5%A5%BD%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E5%AE%9E%E7%8E%B0%E4%BA%86%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%20%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2018%3A41%5Cn%20%20%20%20%20%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.config.RpcConfig%3A%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20RpcConfig%20getRpcConfig()%7B%5Cn%20%20%20%20%20%20%20%20if(rpcConfig%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20synchronized%20(RpcApplication.class)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(rpcConfig%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20init()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20return%20rpcConfig%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RpcApplication%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tePHs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u254534fc" id="u254534fc" style="text-align: left"><span data-lake-id="u3089f1ae" id="u3089f1ae" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">上述代码其实就是 </span><code data-lake-id="u0634b440" id="u0634b440"><span data-lake-id="uc6c079cd" id="uc6c079cd" class="lake-fontsize-11" style="color: #5C8D07; background-color: rgb(240, 240, 240)">双检锁单例模式</span></code><span data-lake-id="u761868f9" id="u761868f9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 的经典实现，支持在获取配置时才调用 init 方法实现懒加载。</span></p><p data-lake-id="u62900221" id="u62900221" style="text-align: left"><span data-lake-id="u74c8158e" id="u74c8158e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ueb598a09" id="ueb598a09" style="text-align: left"><span data-lake-id="u85ec2fb5" id="u85ec2fb5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">为了便于扩展，还支持自己传入配置对象；如果不传入，则默认调用前面写好的 ConfigUtils 来加载配</span></p><p data-lake-id="u47529b69" id="u47529b69" style="text-align: left"><span data-lake-id="uf5a17832" id="uf5a17832" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">置。</span></p><p data-lake-id="ue516903c" id="ue516903c" style="text-align: left"><span data-lake-id="u66c8ab18" id="u66c8ab18" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uea24f104" id="uea24f104" style="text-align: left"><span data-lake-id="u55c512d5" id="u55c512d5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">以后 RPC 框架内只需要写一行代码，就能正确加载到配置：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22RpcConfig%20rpc%20%3D%20RpcApplication.getRpcConfig()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GtH5p%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><card type="block" name="hr" value="data:%7B%22id%22%3A%22JgdUs%22%7D"></card><p data-lake-id="u9c6246df" id="u9c6246df"><span data-lake-id="udefecaf8" id="udefecaf8" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">下面是关于RpcApplication的一些补充：</span></p><details data-lake-id="udf8c9a8c" id="udf8c9a8c" open="false" class="lake-collapse"><summary data-lake-id="uf52a2b69" id="uf52a2b69" class="lake-summary"><span data-lake-id="ufee580f7" id="ufee580f7" class="lake-fontsize-12">RPC启动类</span></summary><p data-lake-id="u0fcc0d4a" id="u0fcc0d4a"><span data-lake-id="ud9062ce4" id="ud9062ce4">这段代码是一个经典的双重检查锁定（Double-Checked Locking）单例模式的实现。让我逐步解释：</span></p><p data-lake-id="u72b622b7" id="u72b622b7"><br></p><ol list="u03c2c8c7"><li fid="u62c924d3" data-lake-id="u675a7a1f" id="u675a7a1f"><span data-lake-id="u4c75a7f9" id="u4c75a7f9" style="color: rgb(34, 73, 254),rgb(199, 74, 168)"> </span><strong><span data-lake-id="u22d1fcce" id="u22d1fcce" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">双重检查锁定（Double-Checked Locking）</span></strong><span data-lake-id="uf78140b6" id="uf78140b6">： </span></li></ol><ul list="u214fb43d" data-lake-indent="1"><li fid="u7db8ba5a" data-lake-id="u719eab08" id="u719eab08"><span data-lake-id="uc900d524" id="uc900d524">这种模式在方法 </span><code data-lake-id="ua1ff2890" id="ua1ff2890"><span data-lake-id="uf625c332" id="uf625c332">getRpcConfig()</span></code><span data-lake-id="u061b7b08" id="u061b7b08"> 中实现，首先检查 </span><code data-lake-id="u7ddc66cb" id="u7ddc66cb"><span data-lake-id="u1d2a10a3" id="u1d2a10a3">rpcConfig</span></code><span data-lake-id="u0f36c3ae" id="u0f36c3ae"> 是否已经被初始化，如果没有则进入同步块内部进行初始化。在同步块内再次检查 </span><code data-lake-id="u94fa7647" id="u94fa7647"><span data-lake-id="ufcaaf0e4" id="ufcaaf0e4">rpcConfig</span></code><span data-lake-id="u3839189e" id="u3839189e"> 是否为 null，这是双重检查的关键，以确保只有第一个线程会真正执行初始化操作。</span></li></ul><ol list="u1888d110" start="2"><li fid="u23bff048" data-lake-id="uc58b0895" id="uc58b0895"><span data-lake-id="u72927df8" id="u72927df8"> </span><strong><span data-lake-id="uc5cb9646" id="uc5cb9646" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">volatile</span></strong><span data-lake-id="u215d846e" id="u215d846e" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">：</span><span data-lake-id="uac09ee30" id="uac09ee30"> </span></li></ol><ul list="u2e02d90a" data-lake-indent="1"><li fid="u7196534b" data-lake-id="u403223ee" id="u403223ee"><span data-lake-id="u33f93f31" id="u33f93f31">在 </span><code data-lake-id="u204bc92c" id="u204bc92c"><span data-lake-id="ubec77a5e" id="ubec77a5e">private static volatile RpcConfig rpcConfig;</span></code><span data-lake-id="u9411228d" id="u9411228d"> 中，</span><code data-lake-id="u65054d0d" id="u65054d0d"><span data-lake-id="uf9d189aa" id="uf9d189aa">volatile</span></code><span data-lake-id="u54bdd0bf" id="u54bdd0bf"> 关键字确保了多线程下对 </span><code data-lake-id="ue50898a6" id="ue50898a6"><span data-lake-id="u33096187" id="u33096187">rpcConfig</span></code><span data-lake-id="u37f99ad1" id="u37f99ad1"> 的可见性。当一个线程修改了 </span><code data-lake-id="u9e881c18" id="u9e881c18"><span data-lake-id="uc397e178" id="uc397e178">rpcConfig</span></code><span data-lake-id="u0daab5f9" id="u0daab5f9"> 的值时，其它线程能够立即看到这个变化，而不会使用过期的缓存值。这是因为 </span><code data-lake-id="ude27125a" id="ude27125a"><span data-lake-id="u58e51f93" id="u58e51f93">volatile</span></code><span data-lake-id="u5fa04bca" id="u5fa04bca"> 会禁止指令重排序，保证了操作的原子性。</span></li></ul><ol list="u8ab4fd08" start="3"><li fid="ub3444f42" data-lake-id="u652cdab2" id="u652cdab2"><span data-lake-id="uc5ea0b37" id="uc5ea0b37" style="color: rgb(34, 73, 254),rgb(199, 74, 168)"> </span><strong><span data-lake-id="u465eb3b6" id="u465eb3b6" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">synchronized</span></strong><span data-lake-id="u4fa7bf91" id="u4fa7bf91" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">：</span><span data-lake-id="u750ef94a" id="u750ef94a"> </span></li></ol><ul list="u5102403e" data-lake-indent="1"><li fid="ue587d99a" data-lake-id="u1c9f14f6" id="u1c9f14f6"><span data-lake-id="u2d3eaba5" id="u2d3eaba5">在 </span><code data-lake-id="u3cdd9e5e" id="u3cdd9e5e"><span data-lake-id="ue933e728" id="ue933e728">getRpcConfig()</span></code><span data-lake-id="ub60ec65d" id="ub60ec65d"> 方法中，使用了 </span><code data-lake-id="u348a3bcb" id="u348a3bcb"><span data-lake-id="uda354d11" id="uda354d11">synchronized</span></code><span data-lake-id="u90976afa" id="u90976afa"> 关键字来确保在多线程环境下对 </span><code data-lake-id="u904f2189" id="u904f2189"><span data-lake-id="ua14618c1" id="ua14618c1">rpcConfig</span></code><span data-lake-id="u43b55a8a" id="u43b55a8a"> 的安全访问。当多个线程同时调用 </span><code data-lake-id="u24426ddc" id="u24426ddc"><span data-lake-id="u9defefdf" id="u9defefdf">getRpcConfig()</span></code><span data-lake-id="ue91a6928" id="ue91a6928"> 方法时，只有一个线程能够进入同步块，从而避免了多个线程同时对 </span><code data-lake-id="u30e3a352" id="u30e3a352"><span data-lake-id="ue13e6813" id="ue13e6813">rpcConfig</span></code><span data-lake-id="u900f9feb" id="u900f9feb"> 进行初始化，确保了线程安全性。</span></li></ul><p data-lake-id="u5f0ad1d4" id="u5f0ad1d4"><br></p><p data-lake-id="u66b13e59" id="u66b13e59"><span data-lake-id="u9af0e585" id="u9af0e585">综上所述，</span><span data-lake-id="ube1e7469" id="ube1e7469" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">这段代码通过双重检查锁定实现了线程安全的单例模式</span><span data-lake-id="u6a50f1c9" id="u6a50f1c9">，</span><code data-lake-id="u28f0504d" id="u28f0504d"><span data-lake-id="uf4212889" id="uf4212889">volatile</span></code><span data-lake-id="u8bda4360" id="u8bda4360"> 关键字确保了变量的可见性，而 </span><code data-lake-id="ua138c070" id="ua138c070"><span data-lake-id="u2b340de7" id="u2b340de7">synchronized</span></code><span data-lake-id="u7559804c" id="u7559804c"> 关键字确保了对共享资源的安全访问。</span></p></details><details data-lake-id="u5d3a9150" id="u5d3a9150" open="false" class="lake-collapse"><summary data-lake-id="uc792c748" id="uc792c748" class="lake-summary"><span data-lake-id="u04c5a13c" id="u04c5a13c" class="lake-fontsize-12">关于单例模式</span></summary><p data-lake-id="u63931171" id="u63931171"><span data-lake-id="uba951901" id="uba951901" style="color: #5C8D07">单例模式（Singleton Pattern）是一种常用的软件设计模式，其目的是确保一个类只有一个实例，并提供一个全局访问点来获取这个实例。</span><span data-lake-id="ua8bde315" id="ua8bde315">单例模式在很多场景下非常有用，比如在配置管理、连接池、线程池等需要全局只有一个实例的情况下。</span></p><h3 data-lake-id="06d066d7" id="06d066d7"><span data-lake-id="uee08d3d7" id="uee08d3d7">实现单例模式的几种方式：</span></h3><p data-lake-id="ucee29bde" id="ucee29bde"><br></p><ol list="ue1133991"><li fid="u1bc53f3c" data-lake-id="u5bfc1fac" id="u5bfc1fac"><span data-lake-id="u125193a3" id="u125193a3"> </span><strong><span data-lake-id="u6c7d9e09" id="u6c7d9e09">饿汉式</span></strong><span data-lake-id="u3ff48669" id="u3ff48669">： </span></li></ol><ul list="u682871e6" data-lake-indent="1"><li fid="ucae626e4" data-lake-id="u55e93169" id="u55e93169"><span data-lake-id="u1048b704" id="u1048b704">在类加载时就完成了单例的初始化，所以类加载较慢，但获取对象的速度快。</span></li><li fid="ucae626e4" data-lake-id="u504e6af4" id="u504e6af4"><span data-lake-id="u95aaeb1f" id="u95aaeb1f">Java实现是通过将构造函数设为私有，然后在类内部创建一个实例，并通过一个公共的静态方法返回这个实例。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Singleton%20%7B%5Cn%20%20%20%20private%20static%20Singleton%20instance%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%5Cn%20%20%20%20private%20Singleton()%20%7B%7D%5Cn%5Cn%20%20%20%20public%20static%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20instance%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%2230030e54%22%7D"></card><ol list="uc8631442" start="2"><li fid="u83e1683b" data-lake-id="u20ec5339" id="u20ec5339"><span data-lake-id="u72f3e8ea" id="u72f3e8ea"> </span><strong><span data-lake-id="u9fc3d99d" id="u9fc3d99d">懒汉式</span></strong><span data-lake-id="ue21962f8" id="ue21962f8">（线程不安全）： </span></li></ol><ul list="u59efb275" data-lake-indent="1"><li fid="ue4cfcfe5" data-lake-id="u004e2742" id="u004e2742"><span data-lake-id="u57bc92b9" id="u57bc92b9">类加载时不初始化。当第一次调用</span><code data-lake-id="ub7074319" id="ub7074319"><span data-lake-id="ubfc7fcae" id="ubfc7fcae">getInstance()</span></code><span data-lake-id="u8703a562" id="u8703a562">时，才初始化单例。这样实现懒加载，但在多线程环境下可能会创建多个实例。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Singleton%20%7B%5Cn%20%20%20%20private%20static%20Singleton%20instance%3B%5Cn%20%20%20%20%5Cn%20%20%20%20private%20Singleton()%20%7B%7D%5Cn%5Cn%20%20%20%20public%20static%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(instance%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20instance%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20instance%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22589f3bdc%22%7D"></card><ol list="u90464741" start="3"><li fid="u0c8a93af" data-lake-id="u1780dd44" id="u1780dd44"><span data-lake-id="u9e12ebe5" id="u9e12ebe5"> </span><strong><span data-lake-id="uee77a94c" id="uee77a94c">懒汉式</span></strong><span data-lake-id="ua456a256" id="ua456a256">（线程安全）： </span></li></ol><ul list="u32fc9999" data-lake-indent="1"><li fid="u6ce0e95e" data-lake-id="u5d212bfd" id="u5d212bfd"><span data-lake-id="uc5d34311" id="uc5d34311">通过</span><code data-lake-id="u00466a14" id="u00466a14"><span data-lake-id="ue177585d" id="ue177585d">synchronized</span></code><span data-lake-id="ucd984889" id="ucd984889">关键字使</span><code data-lake-id="uf7721fb4" id="uf7721fb4"><span data-lake-id="u84c864c0" id="u84c864c0">getInstance()</span></code><span data-lake-id="u8aed7d58" id="u8aed7d58">同步，以解决多线程环境下的安全问题，但这样会降低效率。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Singleton%20%7B%5Cn%20%20%20%20private%20static%20Singleton%20instance%3B%5Cn%20%20%20%20%5Cn%20%20%20%20private%20Singleton()%20%7B%7D%5Cn%5Cn%20%20%20%20public%20static%20synchronized%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(instance%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20instance%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20instance%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%227d489b3b%22%7D"></card><ol list="u9526d1f5" start="4"><li fid="u7f24b1c5" data-lake-id="uf0723e7e" id="uf0723e7e"><span data-lake-id="u7cd1b86d" id="u7cd1b86d"> </span><strong><span data-lake-id="uc4b8e66b" id="uc4b8e66b">双重检查锁定（Double-Check Locking）</span></strong><span data-lake-id="u35a49843" id="u35a49843">： </span></li></ol><ul list="ue828d172" data-lake-indent="1"><li fid="ub410bee1" data-lake-id="u5a601538" id="u5a601538"><span data-lake-id="ud5b3f752" id="ud5b3f752">结合懒汉式和加锁的优点，首先检查实例是否已经创建，如果尚未创建，才进行同步。这样既保证了线程安全，又减少了同步带来的性能影响。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Singleton%20%7B%5Cn%20%20%20%20private%20static%20volatile%20Singleton%20instance%3B%5Cn%20%20%20%20%5Cn%20%20%20%20private%20Singleton()%20%7B%7D%5Cn%5Cn%20%20%20%20public%20static%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(instance%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20synchronized%20(Singleton.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(instance%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20instance%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20instance%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%22fee21dfe%22%7D"></card><ol list="uc82e980c" start="5"><li fid="u09ab9fb3" data-lake-id="ua8701164" id="ua8701164"><span data-lake-id="u54882aea" id="u54882aea"> </span><strong><span data-lake-id="uec7312d9" id="uec7312d9">静态内部类</span></strong><span data-lake-id="u10ec8d12" id="u10ec8d12">： </span></li></ol><ul list="u038e3e31" data-lake-indent="1"><li fid="u54376e7f" data-lake-id="u589c6cb1" id="u589c6cb1"><span data-lake-id="u278452ad" id="u278452ad">利用类加载机制保证初始化实例时只有一个线程。静态内部类在</span><code data-lake-id="u0a6818ad" id="u0a6818ad"><span data-lake-id="ufdf56d09" id="ufdf56d09">Singleton</span></code><span data-lake-id="u77e8974a" id="u77e8974a">类被加载时并不会立即实例化，而是在需要实例化时调用</span><code data-lake-id="ud66f8230" id="ud66f8230"><span data-lake-id="u789f7938" id="u789f7938">getInstance()</span></code><span data-lake-id="u9cf84674" id="u9cf84674">方法，从而完成单例的初始化。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Singleton%20%7B%5Cn%20%20%20%20private%20static%20class%20SingletonHolder%20%7B%5Cn%20%20%20%20%20%20%20%20private%20static%20final%20Singleton%20INSTANCE%20%3D%20new%20Singleton()%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20private%20Singleton()%20%7B%7D%5Cn%5Cn%20%20%20%20public%20static%20Singleton%20getInstance()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SingletonHolder.INSTANCE%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%222086f62d%22%7D"></card><ol list="ub10a2704" start="6"><li fid="u88dd7d39" data-lake-id="ub21f32d0" id="ub21f32d0"><span data-lake-id="u996582ef" id="u996582ef"> </span><strong><span data-lake-id="uf134527e" id="uf134527e">枚举（Enum）</span></strong><span data-lake-id="ud52fcb35" id="ud52fcb35">： </span></li></ol><ul list="uec039619" data-lake-indent="1"><li fid="u7b522599" data-lake-id="u804041b2" id="u804041b2"><span data-lake-id="u1bc38edf" id="u1bc38edf">利用枚举的特性来实现单例，这种方式不仅能防止多线程的同步问题，还能防止反序列化重新创建新的对象。</span></li></ul><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20enum%20Singleton%20%7B%5Cn%20%20%20%20INSTANCE%3B%5Cn%20%20%20%20%5Cn%20%20%20%20public%20void%20someMethod()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8A%9F%E8%83%BD%E5%A4%84%E7%90%86%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22id%22%3A%229ef7846c%22%7D"></card><p data-lake-id="u6439b700" id="u6439b700"><br></p><h3 data-lake-id="6c1cb872" id="6c1cb872"><span data-lake-id="u11fd8e7f" id="u11fd8e7f">选择哪种实现方式？</span></h3><p data-lake-id="u360301a3" id="u360301a3"><br></p><ul list="u80729037"><li fid="u14f0fb59" data-lake-id="ufee8c671" id="ufee8c671"><span data-lake-id="ua7b8c70c" id="ua7b8c70c">如果对单例实例的加载时间不敏感，可以选择</span><strong><span data-lake-id="u039ab760" id="u039ab760">饿汉式</span></strong><span data-lake-id="u761fa716" id="u761fa716">。</span></li><li fid="u14f0fb59" data-lake-id="u961100c3" id="u961100c3"><span data-lake-id="u0e898a84" id="u0e898a84">如果需要懒加载，可以考虑使用</span><strong><span data-lake-id="ub0700cf0" id="ub0700cf0">双重检查锁定</span></strong><span data-lake-id="uee57276b" id="uee57276b">或</span><strong><span data-lake-id="u4e580038" id="u4e580038">静态内部类</span></strong><span data-lake-id="u7735ae1f" id="u7735ae1f">。</span></li><li fid="u14f0fb59" data-lake-id="ud712bc53" id="ud712bc53"><span data-lake-id="u09600190" id="u09600190">如果要确保单例类在序列化和反射攻击中保持唯一，可以使用</span><strong><span data-lake-id="ue0d01192" id="ue0d01192">枚举</span></strong><span data-lake-id="u083264ed" id="u083264ed">方式。</span></li></ul><p data-lake-id="u9f11280f" id="u9f11280f"><br></p><p data-lake-id="u0f51586f" id="u0f51586f"><span data-lake-id="u55c4ed1b" id="u55c4ed1b">每种方式都有其适用场景，选择合适的实现方式需根据具体需求决定。</span></p></details><details data-lake-id="ub9e8813e" id="ub9e8813e" open="false" class="lake-collapse"><summary data-lake-id="ub5b20dc6" id="ub5b20dc6" class="lake-summary"><span data-lake-id="uf6eb5f09" id="uf6eb5f09" class="lake-fontsize-12">关于   synchronized (RpcApplication.class) 中传入的类</span></summary><p data-lake-id="udd6b051c" id="udd6b051c"><span data-lake-id="u5f0dd8f0" id="u5f0dd8f0">在 </span><code data-lake-id="u2318c9dc" id="u2318c9dc"><span data-lake-id="u1a6de30d" id="u1a6de30d">synchronized (RpcApplication.class)</span></code><span data-lake-id="u7d2fd18b" id="u7d2fd18b"> 中，传入的 </span><code data-lake-id="uabaa7951" id="uabaa7951"><span data-lake-id="ubda252d6" id="ubda252d6">RpcApplication.class</span></code><span data-lake-id="u023e8a47" id="u023e8a47"> 是一个类对象锁。这意味着当一个线程进入同步块时，它会尝试获取 </span><code data-lake-id="ua77831d6" id="ua77831d6"><span data-lake-id="u74c51b36" id="u74c51b36">RpcApplication.class</span></code><span data-lake-id="u87672217" id="u87672217"> 对象的锁。这种方式确保了在整个 JVM 中，同一时刻只有一个线程能够进入这个同步块，从而保证了对共享资源的互斥访问。</span></p><p data-lake-id="u7cfc140f" id="u7cfc140f"><br></p><p data-lake-id="u2d343459" id="u2d343459"><span data-lake-id="u2dfbda1f" id="u2dfbda1f">具体来说，传入类对象锁的作用有几个方面：</span></p><p data-lake-id="ud5f7db8f" id="ud5f7db8f"><br></p><ol list="u7b5e3615"><li fid="u348525b8" data-lake-id="u4b47a04c" id="u4b47a04c"><strong><span data-lake-id="u9c593f61" id="u9c593f61">全局锁定</span></strong><span data-lake-id="ub22b18ee" id="ub22b18ee">：</span><code data-lake-id="u1c89b37e" id="u1c89b37e"><span data-lake-id="udaf526e9" id="udaf526e9">RpcApplication.class</span></code><span data-lake-id="u2b88bb60" id="u2b88bb60"> 是在 JVM 中唯一的类对象，因此使用它作为锁对象可以实现对整个类的全局锁定，确保了对共享资源的同步访问。</span></li><li fid="u348525b8" data-lake-id="u4032d15a" id="u4032d15a"><strong><span data-lake-id="u525aeab7" id="u525aeab7">避免多个实例的竞争</span></strong><span data-lake-id="u2024890b" id="u2024890b">：即使有多个 </span><code data-lake-id="u775a6108" id="u775a6108"><span data-lake-id="u3595f4df" id="u3595f4df">RpcApplication</span></code><span data-lake-id="u36dae87c" id="u36dae87c"> 实例存在，它们都会共享同一个类对象锁，因此能够有效避免多个实例同时执行关键代码块。</span></li><li fid="u348525b8" data-lake-id="u4837f1ba" id="u4837f1ba"><strong><span data-lake-id="u120d3439" id="u120d3439">简洁性</span></strong><span data-lake-id="u326679b6" id="u326679b6">：通过使用类对象锁，可以更加简洁地实现同步控制，而不必创建额外的锁对象。</span></li></ol><p data-lake-id="u7c85bdcc" id="u7c85bdcc"><br></p><p data-lake-id="uca46ee69" id="uca46ee69"><span data-lake-id="u721913cb" id="u721913cb">总之，传入类对象锁作为同步块的锁对象，能够确保对关键代码块的互斥访问，实现线程安全的同步控制。</span></p></details><details data-lake-id="u94721d1c" id="u94721d1c" open="false" class="lake-collapse"><summary data-lake-id="uded5fb5a" id="uded5fb5a" class="lake-summary"><span data-lake-id="uf88d39cb" id="uf88d39cb" class="lake-fontsize-12">关于懒加载</span></summary><p data-lake-id="u844e6a35" id="u844e6a35"><span data-lake-id="uc10fc4c0" id="uc10fc4c0" class="lake-fontsize-12" style="color: #5C8D07">懒加载更多地关注于资源消耗较大的延迟初始化，并确保这种初始化只进行一次，以提高效率和性能。</span></p><p data-lake-id="ue0792402" id="ue0792402"><span data-lake-id="u2a6dd126" id="u2a6dd126" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">懒加载旨在延迟初始化，且一旦完成初始化，就不再进行重复的操作。</span></p><p data-lake-id="ucb295d89" id="ucb295d89"><code data-lake-id="ub4fb3c89" id="ub4fb3c89"><strong><span data-lake-id="u3b1b2648" id="u3b1b2648" style="color: rgb(13, 13, 13)">getRpcConfig()</span></strong></code><span data-lake-id="ua0769337" id="ua0769337" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 方法中的这一系列检查和同步操作实现了懒加载，即</span><code data-lake-id="ueff270fd" id="ueff270fd"><strong><span data-lake-id="u240d5e43" id="u240d5e43" style="color: rgb(13, 13, 13)">rpcConfig</span></strong></code><span data-lake-id="uc7a06dc6" id="uc7a06dc6" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">直到第一次需要使用时才被初始化，而不是在</span><code data-lake-id="uc9acc791" id="uc9acc791"><strong><span data-lake-id="ucadf6101" id="ucadf6101" style="color: rgb(13, 13, 13)">RpcApplication</span></strong></code><span data-lake-id="uf58dfd61" id="uf58dfd61" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">类加载时就立即初始化。这种方式在处理资源加载和初始化方面非常有用，特别是对于资源消耗较大或需要延迟初始化以提高应用启动速度的场景。</span></p></details><details data-lake-id="u91620100" id="u91620100" open="false" class="lake-collapse"><summary data-lake-id="u09b4f824" id="u09b4f824" class="lake-summary"><span data-lake-id="u58695cfa" id="u58695cfa" class="lake-fontsize-12">关于不能在init（）中使用this</span></summary><p data-lake-id="u2331940c" id="u2331940c"><span data-lake-id="u49ee4b31" id="u49ee4b31">在静态方法中不能使用关键字 `this`。`this` 关键字是用来引用当前对象的，而静态方法属于类而不是对象，因此无法在静态方法中使用 `this`。因此，你不能在 `init()` 方法中使用 `this` 关键字。</span></p></details><p data-lake-id="ub94441ce" id="ub94441ce"><br></p><h2 data-lake-id="tNzIv" id="tNzIv"><span data-lake-id="u73acb02a" id="u73acb02a">四、扩展点</span></h2><h3 data-lake-id="aEaFN" id="aEaFN"><span data-lake-id="u993da8ac" id="u993da8ac" style="color: rgb(47, 48, 52)">1）支持读取 application.yml、application.yaml 等不同格式的配置文件。</span></h3><p data-lake-id="u090ee3ce" id="u090ee3ce" style="text-align: left"><span data-lake-id="u2f60d338" id="u2f60d338" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="N9JHY" id="N9JHY"><span data-lake-id="ua2eadd5a" id="ua2eadd5a" style="color: rgb(47, 48, 52)">2）支持监听配置文件的变更，并自动更新配置对象。</span></h3><p data-lake-id="u9d4fb801" id="u9d4fb801" style="text-align: left"><span data-lake-id="u5b90152d" id="u5b90152d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：使用 Hutool 工具类的 </span><span data-lake-id="udf92a31f" id="udf92a31f" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">props.autoLoad()</span><span data-lake-id="uac9eed6e" id="uac9eed6e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 可以实现配置文件变更的监听和自动加载。</span></p><p data-lake-id="ua0a7f092" id="ua0a7f092" style="text-align: left"><span data-lake-id="u30fec797" id="u30fec797" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="bFkNP" id="bFkNP"><span data-lake-id="u3e401bf2" id="u3e401bf2" style="color: rgb(47, 48, 52)">3）配置文件支持中文。</span></h3><p data-lake-id="ue65064f3" id="ue65064f3" style="text-align: left"><span data-lake-id="u365dfcd5" id="u365dfcd5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：需要注意编码问题</span></p><p data-lake-id="u87d784ee" id="u87d784ee" style="text-align: left"><span data-lake-id="u90ebfeeb" id="u90ebfeeb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="beOc0" id="beOc0"><span data-lake-id="u13565cf5" id="u13565cf5" style="color: rgb(47, 48, 52)">4）配置分组。后续随着配置项的增多，可以考虑对配置项进行分组。</span></h3><p data-lake-id="uc0e38e90" id="uc0e38e90" style="text-align: left"><span data-lake-id="uf08aa863" id="uf08aa863" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：可以通过嵌套配置类实现。</span></p><p data-lake-id="uffdf4036" id="uffdf4036"><br></p><p data-lake-id="ua8bffed5" id="ua8bffed5"><br></p><h1 data-lake-id="c0bjF" id="c0bjF"><span data-lake-id="ucc2bda2c" id="ucc2bda2c">三、添加Mock接口</span></h1><h2 data-lake-id="PErMr" id="PErMr" style="text-align: left"><span data-lake-id="uca07cdb0" id="uca07cdb0" style="color: rgb(47, 48, 52)">一、需求分析</span></h2><h3 data-lake-id="Cf7SZ" id="Cf7SZ" style="text-align: left"><span data-lake-id="ue79a5aaf" id="ue79a5aaf" style="color: rgb(47, 48, 52)">什么是 Mock？</span></h3><p data-lake-id="u1708ecfa" id="u1708ecfa" style="text-align: left"><span data-lake-id="ud085925b" id="ud085925b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RPC 框架的核心功能是调用其他远程服务。但是在实际开发和测试过程中，有时可能无法直接访问真实的</span></p><p data-lake-id="u328b4cb4" id="u328b4cb4" style="text-align: left"><span data-lake-id="ud5769553" id="ud5769553" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">远程服务，或者访问真实的远程服务可能会产生不可控的影响，例如网络延迟、服务不稳定等。在这种情</span></p><p data-lake-id="u066a106e" id="u066a106e" style="text-align: left"><span data-lake-id="uadd106c3" id="uadd106c3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">况下，就需要</span><span data-lake-id="u975ec7be" id="u975ec7be" class="lake-fontsize-12" style="color: #5C8D07">使用 mock 服务来模拟远程服务的行为</span><span data-lake-id="u84d3b540" id="u84d3b540" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，以便进行接口的测试、开发和调试。</span></p><p data-lake-id="u824991ca" id="u824991ca" style="text-align: left"><span data-lake-id="u2063d216" id="u2063d216" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u55fcf468" id="u55fcf468" style="text-align: left"><span data-lake-id="u1ad1d764" id="u1ad1d764" class="lake-fontsize-12" style="color: #5C8D07">mock 是指模拟对象，通常用于测试代码中，特别是在单元测试中，便于我们跑通业务流程。</span></p><p data-lake-id="uf22f0c03" id="uf22f0c03" style="text-align: left"><span data-lake-id="u6963ab59" id="u6963ab59" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u0d562a2f" id="u0d562a2f" style="text-align: left"><span data-lake-id="u0b08d06d" id="u0b08d06d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">举个例子，用户服务要调用订单服务，伪代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22class%20UserServiceImpl%20%7B%5Cn%5Cn%20%20%20%20void%20test()%20%7B%5Cn%20%20%20%20%20%20%20%20doSomething()%3B%5Cn%20%20%20%20%20%20%20%20orderService.order()%3B%5Cn%20%20%20%20%20%20%20%20doSomething()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UQWrT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u7c5d240a" id="u7c5d240a" style="text-align: left"><span data-lake-id="u139afcbd" id="u139afcbd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"><br /></span><span data-lake-id="ufee86a22" id="ufee86a22" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如果订单服务还没上线，那么这个流程就跑不通，只能先把调用订单服务的代码注释掉。</span></p><p data-lake-id="u2ba62203" id="u2ba62203" style="text-align: left"><span data-lake-id="u2186f78a" id="u2186f78a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u8e62f5e8" id="u8e62f5e8" style="text-align: left"><span data-lake-id="u6cfa35a4" id="u6cfa35a4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但如果给 orderService 设置一个模拟对象，调用它的 order 方法时，随便返回一个值，就能继续执行后续</span></p><p data-lake-id="u0f8c49a2" id="u0f8c49a2" style="text-align: left"><span data-lake-id="u6629083a" id="u6629083a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码，这就是 mock 的作用。</span></p><h3 data-lake-id="pGGeQ" id="pGGeQ" style="text-align: left"><span data-lake-id="u6a95fbcf" id="u6a95fbcf" style="color: rgb(47, 48, 52)">为什么要支持 Mock？</span></h3><p data-lake-id="uc916d63b" id="uc916d63b" style="text-align: left"><span data-lake-id="uec3951dd" id="uec3951dd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">虽然 mock 服务并不是 RPC 框架的核心能力，</span><strong><span data-lake-id="u17558610" id="u17558610" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但是它的开发成本并不高</span></strong><span data-lake-id="u0d653b8b" id="u0d653b8b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。而且给 RPC 框架支持 mock </span></p><p data-lake-id="u8c59ab38" id="u8c59ab38" style="text-align: left"><span data-lake-id="u6525cd89" id="u6525cd89" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">后，开发者就可以轻松调用服务接口、跑通业务流程，不必依赖真实的远程服务，提高使用体验。</span></p><p data-lake-id="u4444bb07" id="u4444bb07" style="text-align: left"><span data-lake-id="ub291d965" id="ub291d965" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uab0105b4" id="uab0105b4" style="text-align: left"><span data-lake-id="u60fa5846" id="u60fa5846" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里用最简单的方式 —— 用一个配置，就让开发者使用 mock 服务。</span></p><h2 data-lake-id="rNSgz" id="rNSgz" style="text-align: left"><span data-lake-id="u9e656f58" id="u9e656f58" style="color: rgb(47, 48, 52)">二、设计方案</span></h2><p data-lake-id="u910b3717" id="u910b3717" style="text-align: left"><span data-lake-id="u82e84a8b" id="u82e84a8b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">mock 的本质就是为要调用的服务创建模拟对象。</span></p><p data-lake-id="u2e89da13" id="u2e89da13" style="text-align: left"><span data-lake-id="u17ecc435" id="u17ecc435" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u609047df" id="u609047df" style="text-align: left"><span data-lake-id="u5ff92a5f" id="u5ff92a5f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何创建模拟对象呢？</span></p><p data-lake-id="ue5790e29" id="ue5790e29" style="text-align: left"><span data-lake-id="u78e52ebb" id="u78e52ebb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u7a50ae74" id="u7a50ae74" style="text-align: left"><span data-lake-id="u7e746704" id="u7e746704" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 RPC 项目第一期中，就提到了一种动态创建对象的方法 —— 动态代理。之前是通过动态代理创建远程</span></p><p data-lake-id="u1d5de66a" id="u1d5de66a" style="text-align: left"><span data-lake-id="ufad1509d" id="ufad1509d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">调用对象。同理，</span><span data-lake-id="u420dfa80" id="u420dfa80" class="lake-fontsize-12" style="color: #5C8D07">可以通过动态代理创建一个 </span><strong><span data-lake-id="uad48991c" id="uad48991c" class="lake-fontsize-12" style="color: #5C8D07">调用方法时返回固定值</span></strong><span data-lake-id="ua7dd07cd" id="ua7dd07cd" class="lake-fontsize-12" style="color: #5C8D07"> 的对象</span></p><h2 data-lake-id="mV7Rq" id="mV7Rq" style="text-align: left"><span data-lake-id="u7419b1ef" id="u7419b1ef" style="color: rgb(47, 48, 52)">三、开发实现</span></h2><p data-lake-id="uda28060c" id="uda28060c"><br></p><h3 data-lake-id="QUZdG" id="QUZdG" data-lake-index-type="2"><span data-lake-id="ud88c3b15" id="ud88c3b15" style="color: rgb(47, 48, 52)">支持开发者通过修改配置文件的方式开启 mock</span></h3><p data-lake-id="ubf803619" id="ubf803619"><span data-lake-id="u072e0e94" id="u072e0e94" style="color: rgb(47, 48, 52)">首先给全局配置类 </span><code data-lake-id="uf206b664" id="uf206b664"><span data-lake-id="u28b94329" id="u28b94329" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">RpcConfig</span><span data-lake-id="u4e57f6b4" id="u4e57f6b4" style="color: rgb(47, 48, 52)"> </span></code><span data-lake-id="u0f6dfda3" id="u0f6dfda3" style="color: rgb(47, 48, 52)">新增 </span><code data-lake-id="ub9c50fe4" id="ub9c50fe4"><span data-lake-id="ub6aad35a" id="ub6aad35a" style="color: rgb(47, 48, 52)">mock</span></code><span data-lake-id="ufa7a386a" id="ufa7a386a" style="color: rgb(47, 48, 52)"> 字段，默认值为 </span><code data-lake-id="u9a4e036e" id="u9a4e036e"><span data-lake-id="u4dcc74de" id="u4dcc74de" style="color: rgb(47, 48, 52)">false</span></code><span data-lake-id="u8e0427a4" id="u8e0427a4" style="color: rgb(47, 48, 52)">。</span></p><p data-lake-id="u701c1d24" id="u701c1d24"><span data-lake-id="u360d1ec6" id="u360d1ec6" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uee61d902" id="uee61d902" style="text-align: left"><span data-lake-id="u3bfb1f4f" id="u3bfb1f4f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A8%A1%E6%8B%9F%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20boolean%20mock%20%3D%20false%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qZgi2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uaea55d1e" id="uaea55d1e" style="text-align: left"><span data-lake-id="uae8e7c12" id="uae8e7c12" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="hFCsz" id="hFCsz" data-lake-index-type="2"><span data-lake-id="u57022990" id="u57022990" style="color: rgb(47, 48, 52)">在 Proxy 包下新增 </span><span data-lake-id="u53747bae" id="u53747bae" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">MockServiceProxy</span><span data-lake-id="u2e81fe15" id="u2e81fe15" style="color: rgb(47, 48, 52)"> 类，用于生成 mock 代理服务。</span></h3><p data-lake-id="u8da03822" id="u8da03822" style="text-align: left"><span data-lake-id="u314dd7e3" id="u314dd7e3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在这个类中，需要提供一个根据服务接口类型返回固定值的方法。</span></p><p data-lake-id="u00c5224e" id="u00c5224e" style="text-align: left"><span data-lake-id="uc9eec84e" id="uc9eec84e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ued904294" id="ued904294" style="text-align: left"><span data-lake-id="ude4b569b" id="ude4b569b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22MockServiceProxy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cn%2F**%5Cn%20*%20Mock%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%20%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E8%BF%94%E5%9B%9E%E5%9B%BA%E5%AE%9A%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20MockServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%94%9F%E6%88%90%E7%89%B9%E5%AE%9A%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20Class%3C%3F%3E%20methodReturnType%20%3D%20method.getReturnType()%3B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22mock%20invoke%20%7B%7D%5C%22%2Cmethod.getName())%3B%5Cn%20%20%20%20%20%20%20%20return%20getDefaultObject(methodReturnType)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20Object%20getDefaultObject(Class%3C%3F%3E%20type)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E7%B1%BB%E6%98%AF%E5%90%A6%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20if(type.isPrimitive())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(type%20%3D%3D%20boolean.class)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%20if(type%20%3D%3D%20short.class)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(short)%200%20%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%20int.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%200%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%20long.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%200L%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E4%B8%BA%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22MockServiceProxy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ATKZx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1d82ef93" id="u1d82ef93" style="text-align: left"><span data-lake-id="uc20e837a" id="uc20e837a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在上述代码中，通过 </span><code data-lake-id="udcae6a10" id="udcae6a10"><span data-lake-id="ua0e5a0b0" id="ua0e5a0b0" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">getDefaultObject</span><span data-lake-id="uf8fbd5e5" id="uf8fbd5e5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> </span></code><span data-lake-id="ued11c0f4" id="ued11c0f4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">方法，根据代理接口的 class 返回不同的默认值，比如针对</span></p><p data-lake-id="u03c4e3f6" id="u03c4e3f6" style="text-align: left"><span data-lake-id="uf2e64e0e" id="uf2e64e0e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> boolean 类型返回 false、对象类型返回 null 等。</span></p><p data-lake-id="udffe0745" id="udffe0745" style="text-align: left"><span data-lake-id="u4b36beba" id="u4b36beba" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="Cp5TF" id="Cp5TF" data-lake-index-type="2"><span data-lake-id="ud950674e" id="ud950674e" style="color: rgb(47, 48, 52)">开发获取mock代理对象的方法</span></h3><p data-lake-id="u52c687c8" id="u52c687c8" style="text-align: left"><span data-lake-id="u35bb9581" id="u35bb9581" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">给 </span><code data-lake-id="ub72f58f5" id="ub72f58f5"><span data-lake-id="u4e36824f" id="u4e36824f" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ServiceProxyFactory</span></code><span data-lake-id="u5146c436" id="u5146c436" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务代理工厂新增获取 </span><code data-lake-id="u0f109530" id="u0f109530"><span data-lake-id="u806a218b" id="u806a218b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">mock</span></code><span data-lake-id="uba6d5442" id="uba6d5442" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 代理对象的方法 </span><code data-lake-id="u41511121" id="u41511121"><span data-lake-id="ucd3c65be" id="ucd3c65be" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">getMockProxy</span></code><span data-lake-id="u791e815e" id="u791e815e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。可以通过读取已定义的全局配置 </span><code data-lake-id="u10e185c5" id="u10e185c5"><span data-lake-id="u635f9b27" id="u635f9b27" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">mock</span><span data-lake-id="uaf256706" id="uaf256706" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span></code><span data-lake-id="u2eeb9f7d" id="u2eeb9f7d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">来区分创建哪种代理对象。</span></p><p data-lake-id="u8f29a760" id="u8f29a760" style="text-align: left"><span data-lake-id="u36981bea" id="u36981bea" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u0fb0df78" id="u0fb0df78" style="text-align: left"><span data-lake-id="ueb6a9286" id="ueb6a9286" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改 ServiceProxyFactory，完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxyFactory%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cn%5Cnimport%20java.lang.reflect.Proxy%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%B7%A5%E5%8E%82%EF%BC%8C%E6%A0%B9%E6%8D%AE%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20*%20%E4%BD%BF%E7%94%A8%E4%BA%86%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxyFactory%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E7%B1%BB%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceClass%3A%20%E5%85%B7%E4%BD%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%B1%BB%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A14%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20%3CT%3E%20T%20getProxy(Class%3CT%3E%20serviceClass)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%98%AF%E5%90%A6%E5%90%AF%E7%94%A8Mock%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20%20%20%20if%20(RpcApplication.getRpcConfig().isMock())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20getMockProxy(serviceClass)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20(T)%20Proxy.newProxyInstance(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serviceClass.getClassLoader()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Class%5B%5D%7BserviceClass%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20ServiceProxy())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E7%B1%BB%E8%8E%B7%E5%8F%96%E5%85%B6Mock%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceClass%3A%5Cn%20%20%20%20%20*%20%40return%20T%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F15%2021%3A20%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20%3CT%3E%20T%20getMockProxy(Class%3CT%3E%20serviceClass)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(T)%20Proxy.newProxyInstance(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serviceClass.getClassLoader()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Class%5B%5D%7BserviceClass%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20new%20MockServiceProxy()%5Cn%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxyFactory%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pj6Fc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6653464c" id="u6653464c" style="text-align: left"><span data-lake-id="u6ce371aa" id="u6ce371aa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这里单独针对 mock 的场景写一套新的动态代理和代理工厂，不要和真实请求的代理逻辑混在一起。</span></p><p data-lake-id="u5e65c167" id="u5e65c167" style="text-align: left"><span data-lake-id="uc4abd6cc" id="uc4abd6cc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ud81cef9b" id="ud81cef9b" style="text-align: left"><strong><span data-lake-id="u0997c6b2" id="u0997c6b2" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">注意：</span></strong><span data-lake-id="uc04b38cc" id="uc04b38cc" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">mock注释一旦开启，就会使所有的接口都会默认使用假数据</span></p><p data-lake-id="ueaefce30" id="ueaefce30" style="text-align: left"><span data-lake-id="u1d2b84c3" id="u1d2b84c3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h2 data-lake-id="WsyuQ" id="WsyuQ"><span data-lake-id="u972cf656" id="u972cf656" style="color: rgb(47, 48, 52)">四、扩展点</span></h2><h3 data-lake-id="U4Pa5" id="U4Pa5" data-lake-index-type="2"><span data-lake-id="u82586e24" id="u82586e24" style="color: rgb(47, 48, 52)">完善 Mock 的逻辑，支持更多返回类型的默认值生成。</span></h3><p data-lake-id="ud122d577" id="ud122d577" style="text-align: left"><span data-lake-id="ua754edf0" id="ua754edf0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：使用 Faker 之类的伪造数据生成库，来生成默认值。</span></p><p data-lake-id="ue75482fa" id="ue75482fa" style="text-align: left"><span data-lake-id="ub016c614" id="ub016c614" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h1 data-lake-id="dAOM2" id="dAOM2"><span data-lake-id="u3a2e2f52" id="u3a2e2f52" style="color: rgb(47, 48, 52)">四、序列化器与SPI机制</span></h1><h2 data-lake-id="vU1Uu" id="vU1Uu" style="text-align: left"><span data-lake-id="u14ee4c18" id="u14ee4c18" style="color: rgb(47, 48, 52)">一、需求分析</span></h2><p data-lake-id="u4a5e03ca" id="u4a5e03ca" style="text-align: left"><span data-lake-id="uc5ac2c13" id="uc5ac2c13" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在第一节中，已经了解了序列化器的作用：无论是请求或响应，都会涉及参数的传输。而 </span><span data-lake-id="u5c949b25" id="u5c949b25" class="lake-fontsize-12" style="color: #5C8D07">Java 对象是存活</span></p><p data-lake-id="ubf38732d" id="ubf38732d" style="text-align: left"><span data-lake-id="ucf3a3ecf" id="ucf3a3ecf" class="lake-fontsize-12" style="color: #5C8D07">在 JVM 虚拟机中的</span><span data-lake-id="ubdd33e4b" id="ubdd33e4b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，如果想在其他位置存储并访问、或者在网络中进行传输，就需要进行序列化和反序列</span></p><p data-lake-id="u2b09cb6b" id="u2b09cb6b" style="text-align: left"><span data-lake-id="u1364d19e" id="u1364d19e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">化。</span></p><p data-lake-id="ue0f334f5" id="ue0f334f5" style="text-align: left"><span data-lake-id="ub38904bd" id="ub38904bd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">还编写了通用的序列化器接口，并且已经实现了基于 Java 原生序列化的序列化器。但是对于一个完善的 </span></p><p data-lake-id="uc1a09307" id="uc1a09307" style="text-align: left"><span data-lake-id="u31db56bb" id="u31db56bb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RPC 框架，还要思考以下 3 个问题：</span></p><ol list="u3d300317"><li fid="ueb2aceaf" data-lake-id="u52412cea" id="u52412cea" style="text-align: left"><span data-lake-id="u74d456b8" id="u74d456b8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">有没有更好的序列化器实现方式？</span></li><li fid="ueb2aceaf" data-lake-id="u15d3b73c" id="u15d3b73c" style="text-align: left"><span data-lake-id="u8d36d2a1" id="u8d36d2a1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何让使用框架的开发者指定使用的序列化器？</span></li><li fid="ueb2aceaf" data-lake-id="u7aecf568" id="u7aecf568" style="text-align: left"><span data-lake-id="ud098941c" id="ud098941c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如何让使用框架的开发者自己定制序列化器？</span></li></ol><h2 data-lake-id="wfDNj" id="wfDNj" style="text-align: left"><span data-lake-id="u417a9eaa" id="u417a9eaa" style="color: rgb(47, 48, 52)">二、设计方案</span></h2><p data-lake-id="u8ef410cb" id="u8ef410cb" style="text-align: left"><span data-lake-id="u484b45bb" id="u484b45bb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">依次分析这三个问题的实现方案。</span></p><h3 data-lake-id="iVVCR" id="iVVCR" style="text-align: left"><span data-lake-id="u89b37980" id="u89b37980" style="color: rgb(47, 48, 52)">1、序列化器实现方式</span></h3><p data-lake-id="ue628020a" id="ue628020a" style="text-align: left"><span data-lake-id="ub21f75df" id="ub21f75df" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">所追求的 “更好的” 序列化器，可以是具有更高的性能、或者更小的序列化结果，这样就能够更快地完</span></p><p data-lake-id="u755fc6f3" id="u755fc6f3" style="text-align: left"><span data-lake-id="u7e954e02" id="u7e954e02" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">成 RPC 的请求和响应。</span></p><p data-lake-id="u24a3bf7c" id="u24a3bf7c" style="text-align: left"><span data-lake-id="ud7e7102d" id="ud7e7102d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ue17154f1" id="ue17154f1" style="text-align: left"><span data-lake-id="u2779bea7" id="u2779bea7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">之前是为了方便，使用 Java 原生序列化实现序列化器，但这未必是最好的。市面上还有很多种主流的</span></p><p data-lake-id="ua2072732" id="ua2072732" style="text-align: left"><span data-lake-id="ue9c63b76" id="ue9c63b76" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化方式，比如 JSON、Hessian、Kryo、protobuf 等。</span></p><p data-lake-id="ucb9a736c" id="ucb9a736c" style="text-align: left"><span data-lake-id="u61aa2cf1" id="u61aa2cf1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uc7b833d1" id="uc7b833d1" style="text-align: left"><span data-lake-id="ub7e01ad2" id="ub7e01ad2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">下面简单列举它们的优缺点：</span></p><h4 data-lake-id="TDQD6" id="TDQD6" style="text-align: left"><span data-lake-id="uedfaa150" id="uedfaa150" style="color: rgb(47, 48, 52)">主流序列化方式对比</span></h4><h5 data-lake-id="gCNzT" id="gCNzT"><span data-lake-id="udf128bc6" id="udf128bc6" style="color: rgb(47, 48, 52)">1）JSON</span></h5><p data-lake-id="ud03e4950" id="ud03e4950" style="text-align: left"><span data-lake-id="udcb29496" id="udcb29496" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">优点：</span></p><ol list="u2c866105"><li fid="ua65b51e5" data-lake-id="u1cb2b1e9" id="u1cb2b1e9" style="text-align: left"><span data-lake-id="uf05b0f6f" id="uf05b0f6f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">易读性好，可读性强，便于人类理解和调试。</span></li><li fid="ua65b51e5" data-lake-id="uab9b0d5c" id="uab9b0d5c" style="text-align: left"><span data-lake-id="u122026bc" id="u122026bc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">跨语言支持广泛，几乎所有编程语言都有 JSON 的解析和生成库。</span></li></ol><p data-lake-id="u7e073327" id="u7e073327" style="text-align: left"><span data-lake-id="uebf61cd9" id="uebf61cd9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">缺点：</span></p><ol list="u15210484"><li fid="u1e8c7066" data-lake-id="u604d20e5" id="u604d20e5" style="text-align: left"><span data-lake-id="ufc82e784" id="ufc82e784" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化后的数据量相对较大，因为 JSON 使用文本格式存储数据，需要额外的字符表示键、值和数据结构。</span></li><li fid="u1e8c7066" data-lake-id="u7926e94f" id="u7926e94f" style="text-align: left"><span data-lake-id="u18d850b6" id="u18d850b6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">不能很好地处理复杂的数据结构和循环引用，可能导致性能下降或者序列化失败。</span></li></ol><h5 data-lake-id="h6Y03" id="h6Y03"><span data-lake-id="u92b714a3" id="u92b714a3" style="color: rgb(47, 48, 52)">2）Hessian：</span></h5><p data-lake-id="ua901c83b" id="ua901c83b"><a href="https://hessian.caucho.com/" target="_blank" data-lake-id="u139bf2dd" id="u139bf2dd"><span data-lake-id="ucb3969d0" id="ucb3969d0">https://hessian.caucho.com/</span></a></p><p data-lake-id="u7f6443cd" id="u7f6443cd" style="text-align: left"><span data-lake-id="u6af2fc49" id="u6af2fc49" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">优点：</span></p><ol list="u9522a790"><li fid="u45195bbc" data-lake-id="u193e7b45" id="u193e7b45" style="text-align: left"><span data-lake-id="u14bdeaed" id="u14bdeaed" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">二进制序列化，序列化后的数据量较小，网络传输效率高。</span></li><li fid="u45195bbc" data-lake-id="u67b5a8bb" id="u67b5a8bb" style="text-align: left"><span data-lake-id="ua453748e" id="ua453748e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">支持跨语言，适用于分布式系统中的服务调用。</span></li></ol><p data-lake-id="u593c0213" id="u593c0213" style="text-align: left"><span data-lake-id="uc26fe881" id="uc26fe881" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">缺点：</span></p><ol list="u2b92e84f"><li fid="uf55b4cd1" data-lake-id="uabef8d5e" id="uabef8d5e" style="text-align: left"><span data-lake-id="u9583308c" id="u9583308c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">性能较 JSON 略低，因为需要将对象转换为二进制格式。</span></li><li fid="uf55b4cd1" data-lake-id="u4b2c86ed" id="u4b2c86ed" style="text-align: left"><span data-lake-id="ub1c97dbe" id="ub1c97dbe" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">对象必须实现 Serializable 接口，限制了可序列化的对象范围。</span></li></ol><h5 data-lake-id="OhfDo" id="OhfDo"><span data-lake-id="u71724bf9" id="u71724bf9" style="color: rgb(47, 48, 52)">3）Kryo：</span></h5><p data-lake-id="u34517557" id="u34517557" style="text-align: left"><a href="https://github.com/EsotericSoftware/kryo" target="_blank" data-lake-id="u1eb18695" id="u1eb18695"><span data-lake-id="ubd055ea0" id="ubd055ea0">https://github.com/EsotericSoftware/kryo</span></a></p><p data-lake-id="uaa3dbe59" id="uaa3dbe59" style="text-align: left"><span data-lake-id="u945fb8bc" id="u945fb8bc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">优点：</span></p><ol list="ue037ee69"><li fid="uc138d0db" data-lake-id="u9f2a4c1f" id="u9f2a4c1f" style="text-align: left"><span data-lake-id="ua207f68c" id="ua207f68c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">高性能，序列化和反序列化速度快。</span></li><li fid="uc138d0db" data-lake-id="u458b43ee" id="u458b43ee" style="text-align: left"><span data-lake-id="ua81848ee" id="ua81848ee" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">支持循环引用和自定义序列化器，适用于复杂的对象结构。</span></li><li fid="uc138d0db" data-lake-id="ud65d3aae" id="ud65d3aae" style="text-align: left"><span data-lake-id="u9bffbecc" id="u9bffbecc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">无需实现 Serializable 接口，可以序列化任意对象。</span></li></ol><p data-lake-id="ubecb4d7d" id="ubecb4d7d" style="text-align: left"><span data-lake-id="u657284b0" id="u657284b0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">缺点：</span></p><ol list="u926042bb"><li fid="u429700a2" data-lake-id="ub9c38445" id="ub9c38445" style="text-align: left"><span data-lake-id="uf6d26f09" id="uf6d26f09" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">不跨语言，只适用于 Java。</span></li><li fid="u429700a2" data-lake-id="u60baa538" id="u60baa538" style="text-align: left"><span data-lake-id="u26320ed2" id="u26320ed2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">对象的序列化格式不够友好，不易读懂和调试。</span></li></ol><h5 data-lake-id="IGYom" id="IGYom"><span data-lake-id="u73f7f0e4" id="u73f7f0e4" style="color: rgb(47, 48, 52)">4）Protobuf：</span></h5><p data-lake-id="u9bf6b72b" id="u9bf6b72b" style="text-align: left"><span data-lake-id="u7606a723" id="u7606a723" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">优点：</span></p><ol list="uc0501c37"><li fid="uc796cb9c" data-lake-id="uf7c5ba18" id="uf7c5ba18" style="text-align: left"><span data-lake-id="u33094005" id="u33094005" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">高效的二进制序列化，序列化后的数据量极小。</span></li><li fid="uc796cb9c" data-lake-id="u232c8e47" id="u232c8e47" style="text-align: left"><span data-lake-id="ub410f7ad" id="ub410f7ad" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">跨语言支持，并且提供了多种语言的实现库。</span></li><li fid="uc796cb9c" data-lake-id="u18b060d2" id="u18b060d2" style="text-align: left"><span data-lake-id="u7d1acca9" id="u7d1acca9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">支持版本化和向前 / 向后兼容性。</span></li></ol><p data-lake-id="u3254fa00" id="u3254fa00" style="text-align: left"><span data-lake-id="u0679a55f" id="u0679a55f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">缺点：</span></p><ol list="u4a9818ed"><li fid="uda9c8aeb" data-lake-id="u58c11aa5" id="u58c11aa5" style="text-align: left"><span data-lake-id="u8760d04c" id="u8760d04c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">配置相对复杂，需要先定义数据结构的消息格式。</span></li><li fid="uda9c8aeb" data-lake-id="u9e807537" id="u9e807537" style="text-align: left"><span data-lake-id="uf826cb86" id="uf826cb86" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">对象的序列化格式不易读懂，不便于调试。</span></li></ol><p data-lake-id="uf46c69ca" id="uf46c69ca"><br></p><p data-lake-id="u39a8d9ba" id="u39a8d9ba" style="text-align: left"><span data-lake-id="udbdbb39c" id="udbdbb39c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">接下来会实现 JSON、Kryo 和 Hessian 这三种序列化器。</span></p><h3 data-lake-id="NtKPS" id="NtKPS" style="text-align: left"><span data-lake-id="u6cb6a6a8" id="u6cb6a6a8" style="color: rgb(47, 48, 52)">2、动态使用序列化器</span></h3><p data-lake-id="ud76b25b4" id="ud76b25b4"><span data-lake-id="ub8ac0a15" id="ub8ac0a15" class="lake-fontsize-12">之前是在代码中硬编码了序列化器，例如：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Serializer%20serializer%20%3D%20new%20JdkSerializer()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22T9Vbi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua77c15d8" id="ua77c15d8" style="text-align: left"><span data-lake-id="u63a7dcfc" id="u63a7dcfc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如果开发者想要替换为别的序列化器，就必须修改所有的上述代码。</span></p><p data-lake-id="u046569d4" id="u046569d4" style="text-align: left"><span data-lake-id="ua179551e" id="ua179551e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u1553a970" id="u1553a970" style="text-align: left"><span data-lake-id="uabeaec2b" id="uabeaec2b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">理想情况下，应该可以通过配置文件来指定使用的序列化器。在使用序列化器时，根据配置来获取不同的</span></p><p data-lake-id="u5c9b6036" id="u5c9b6036" style="text-align: left"><span data-lake-id="u0b90d3b8" id="u0b90d3b8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化器实例即可。</span></p><p data-lake-id="ue59101af" id="ue59101af" style="text-align: left"><span data-lake-id="u306d6e09" id="u306d6e09" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u3fab534f" id="u3fab534f" style="text-align: left"><span data-lake-id="ua26b7ea0" id="ua26b7ea0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考 Dubbo 替换序列化协议的方式：</span><a href="https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/hessian" target="_blank" data-lake-id="u05a0ed7f" id="u05a0ed7f"><span data-lake-id="u0ac39aa5" id="u0ac39aa5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/hessian/</span></a></p><p data-lake-id="u6b06f685" id="u6b06f685" style="text-align: left"><span data-lake-id="u5bbb4dc9" id="u5bbb4dc9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u39e5db4c" id="u39e5db4c" style="text-align: left"><span data-lake-id="ua9b23ed1" id="ua9b23ed1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这个操作并不难，我们只需要定义一个 </span><code data-lake-id="u5675b4d6" id="u5675b4d6"><span data-lake-id="u69f06096" id="u69f06096" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">序列化器名称 =&gt; 序列化器实现类对象</span></code><span data-lake-id="u033868de" id="u033868de" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 的 Map，然后根据名称从 </span></p><p data-lake-id="u9f90c05a" id="u9f90c05a" style="text-align: left"><span data-lake-id="uba763520" id="uba763520" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Map 中获取对象即可。</span></p><p data-lake-id="udde1337f" id="udde1337f" style="text-align: left"><span data-lake-id="u67d38be6" id="u67d38be6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="Q4zAE" id="Q4zAE" style="text-align: left"><span data-lake-id="ucf94d897" id="ucf94d897" style="color: rgb(47, 48, 52)">3、自定义序列化器</span></h3><p data-lake-id="ud7af3de0" id="ud7af3de0" style="text-align: left"><span data-lake-id="u7cb631f5" id="u7cb631f5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如果开发者不想使用框架内置的序列化器，想要自己定义一个新的序列化器实现，但不能修改写</span></p><p data-lake-id="u31796198" id="u31796198" style="text-align: left"><span data-lake-id="ua7bdfe1f" id="ua7bdfe1f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">好的框架代码，应该怎么办呢？</span></p><p data-lake-id="ua62ff041" id="ua62ff041" style="text-align: left"><span data-lake-id="ufc651c02" id="ufc651c02" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="udaa6c38f" id="udaa6c38f" style="text-align: left"><span data-lake-id="uc371f1b5" id="uc371f1b5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">思路很简单：只要 RPC 框架能够读取到用户自定义的类路径，然后加载这个类，作为 Serializer 序列化器接口的实现即可。</span></p><p data-lake-id="u8dc4932d" id="u8dc4932d" style="text-align: left"><span data-lake-id="ubfb2e57c" id="ubfb2e57c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u6fb5f3f0" id="u6fb5f3f0" style="text-align: left"><span data-lake-id="u2220f174" id="u2220f174" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但是如何实现这个操作呢？</span></p><p data-lake-id="u56795cab" id="u56795cab" style="text-align: left"><span data-lake-id="ud09c503c" id="ud09c503c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u471e7b4e" id="u471e7b4e" style="text-align: left"><span data-lake-id="u9123a342" id="u9123a342" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这就需要一个新的概念，也是 Java 中的重要特性 —— SPI 机制。</span></p><h4 data-lake-id="TsmyG" id="TsmyG" style="text-align: left"><span data-lake-id="u48054d6b" id="u48054d6b" style="color: rgb(47, 48, 52)">什么是 SPI？</span></h4><p data-lake-id="u243d841a" id="u243d841a" style="text-align: left"><span data-lake-id="u00e89b44" id="u00e89b44" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">SPI（Service Provider Interface）服务提供接口是 Java 的机制，主要用于实现模块化开发和插件化扩</span></p><p data-lake-id="ubacca652" id="ubacca652" style="text-align: left"><span data-lake-id="u07517ca8" id="u07517ca8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">展。</span></p><p data-lake-id="u02f25480" id="u02f25480" style="text-align: left"><span data-lake-id="u17405d24" id="u17405d24" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uef5f91fe" id="uef5f91fe" style="text-align: left"><span data-lake-id="u9e09f400" id="u9e09f400" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">SPI 机制允许服务提供者通过特定的配置文件将自己的实现注册到系统中，然后系统通过反射机制动态加载</span></p><p data-lake-id="ub80d54d3" id="ub80d54d3" style="text-align: left"><span data-lake-id="uf9fe9247" id="uf9fe9247" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这些实现，而不需要修改原始框架的代码，从而实现了系统的解耦、提高了可扩展性。</span></p><p data-lake-id="u67d96ed6" id="u67d96ed6" style="text-align: left"><span data-lake-id="u04a4989d" id="u04a4989d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u05bcf0bc" id="u05bcf0bc" style="text-align: left"><span data-lake-id="ue945f132" id="ue945f132" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一个典型的 SPI 应用场景是 JDBC（Java 数据库连接库），不同的数据库驱动程序开发者可以使用 JDBC </span></p><p data-lake-id="u841705d8" id="u841705d8" style="text-align: left"><span data-lake-id="ueca491ed" id="ueca491ed" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">库，然后定制自己的数据库驱动程序。</span></p><p data-lake-id="ub37809da" id="ub37809da" style="text-align: left"><span data-lake-id="u9093accb" id="u9093accb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u04d35b9b" id="u04d35b9b" style="text-align: left"><span data-lake-id="u9f8f1b03" id="u9f8f1b03" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">此外，使用的主流 Java 开发框架中，几乎都使用到了 SPI 机制，比如 Servlet 容器、日志框架、</span></p><p data-lake-id="u5a8a0e1e" id="u5a8a0e1e" style="text-align: left"><span data-lake-id="u3d90ae86" id="u3d90ae86" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ORM 框架、Spring 框架。</span><strong><span data-lake-id="u3eb942e5" id="u3eb942e5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">所以这是 Java 开发者必须掌握的一个重要特性！</span></strong></p><p data-lake-id="uca6989a9" id="uca6989a9" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710745149969-809042d2-ab33-41d8-b464-4017761bf02e.png%22%2C%22taskId%22%3A%22u7c4c4da1-2c03-4fe8-9a13-3b0f2cfbb67%22%2C%22clientId%22%3A%22ud7adb59e-87e2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221ebd1df862c34880bc26b9d494535b3dtplv-k3u1fbpfcp-watermark.png%22%2C%22size%22%3A33011%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1210%2C%22originHeight%22%3A1128%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%AE%9E%E7%8E%B0%20%E8%B0%83%E7%94%A8%20%E6%8E%A5%E5%8F%A3%20%E5%AE%9E%E7%8E%B0%E6%96%B9%20%E8%B0%83%E7%94%A8%E6%96%B9%20API%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA%20%E8%B0%83%E7%94%A8%20%E5%AE%9E%E7%8E%B0%20%E6%8E%A5%E5%8F%A3%20%E5%AE%9E%E7%8E%B0%E6%96%B9%20%E8%B0%83%E7%94%A8%E6%96%B9%20SPI%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A634%2C%22y%22%3A152%2C%22width%22%3A74%2C%22height%22%3A39%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%22%7D%2C%7B%22x%22%3A319%2C%22y%22%3A158%2C%22width%22%3A73%2C%22height%22%3A41%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A512%2C%22y%22%3A165%2C%22width%22%3A41%2C%22height%22%3A89%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A789%2C%22y%22%3A191%2C%22width%22%3A110%2C%22height%22%3A38%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%E6%96%B9%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A190%2C%22width%22%3A110%2C%22height%22%3A39%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%E6%96%B9%22%7D%2C%7B%22x%22%3A464%2C%22y%22%3A470%2C%22width%22%3A208%2C%22height%22%3A39%2C%22text%22%3A%22API%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA%22%7D%2C%7B%22x%22%3A365%2C%22y%22%3A728%2C%22width%22%3A68%2C%22height%22%3A38%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A768%2C%22y%22%3A745%2C%22width%22%3A74%2C%22height%22%3A38%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%22%7D%2C%7B%22x%22%3A505%2C%22y%22%3A748%2C%22width%22%3A40%2C%22height%22%3A89%2C%22text%22%3A%22%E6%8E%A5%E5%8F%A3%22%7D%2C%7B%22x%22%3A915%2C%22y%22%3A772%2C%22width%22%3A113%2C%22height%22%3A41%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%E6%96%B9%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A776%2C%22width%22%3A108%2C%22height%22%3A36%2C%22text%22%3A%22%E8%B0%83%E7%94%A8%E6%96%B9%22%7D%2C%7B%22x%22%3A465%2C%22y%22%3A1057%2C%22width%22%3A202%2C%22height%22%3A38%2C%22text%22%3A%22SPI%E7%AE%80%E5%8D%95%E5%9B%BE%E7%A4%BA%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22API%E4%B8%8ESPI%E7%9A%84%E5%8C%BA%E5%88%AB%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u25caf412%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ub0871589" id="ub0871589" style="text-align: left"><span data-lake-id="u78d1ffc6" id="u78d1ffc6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 举个通俗易懂的例子：公司 H 是一家科技公司，新设计了一款芯片，然后现在需要量产了，而市面上有好</span></p><p data-lake-id="u3d785d7a" id="u3d785d7a" style="text-align: left"><span data-lake-id="ubb1d1a56" id="ubb1d1a56" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">几家芯片制造业公司，这个时候，只要 H 公司指定好了这芯片生产的标准（定义好了接口标准），那么这</span></p><p data-lake-id="uac167e67" id="uac167e67" style="text-align: left"><span data-lake-id="u7dc9133d" id="u7dc9133d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">些合作的芯片公司（服务提供者）就按照标准交付自家特色的芯片（提供不同方案的实现，但是给出来的</span></p><p data-lake-id="uc52ea8f3" id="uc52ea8f3" style="text-align: left"><span data-lake-id="u8be9d4b1" id="u8be9d4b1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">结果是一样的）。 </span></p><p data-lake-id="u32094e18" id="u32094e18" style="text-align: left"><span data-lake-id="ue88749d4" id="ue88749d4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="EamZr" id="EamZr" style="text-align: left"><span data-lake-id="uc39089d4" id="uc39089d4" style="color: rgb(47, 48, 52)">如何实现 SPI？</span></h4><p data-lake-id="ub607bb27" id="ub607bb27" style="text-align: left"><span data-lake-id="ub4f3b147" id="ub4f3b147" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">分为系统实现和自定义实现。</span></p><p data-lake-id="u12b85903" id="u12b85903" style="text-align: left"><span data-lake-id="ucaff184b" id="ucaff184b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="A2DOd" id="A2DOd" style="text-align: left"><span data-lake-id="ubf7c4a3b" id="ubf7c4a3b" style="color: rgb(47, 48, 52)">系统实现</span></h5><p data-lake-id="ubac745bd" id="ubac745bd" style="text-align: left"><span data-lake-id="ua8eeffdb" id="ua8eeffdb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其实 Java 内已经提供了 SPI 机制相关的 API 接口，可以直接使用，这种方式最简单。</span></p><p data-lake-id="u344c2f94" id="u344c2f94" style="text-align: left"><span data-lake-id="ud85b0063" id="ud85b0063" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u8a3bd0d1" id="u8a3bd0d1" style="text-align: left"><span data-lake-id="u8530b102" id="u8530b102" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">1）首先在 </span><code data-lake-id="u99a66766" id="u99a66766"><span data-lake-id="ud6f447fe" id="ud6f447fe" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">resources</span><span data-lake-id="uc5665e31" id="uc5665e31" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span></code><span data-lake-id="u196ad662" id="u196ad662" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">资源目录下创建 </span><code data-lake-id="u1a0ff166" id="u1a0ff166"><span data-lake-id="ue1f8c5a6" id="ue1f8c5a6" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">META-INF/services</span></code><span data-lake-id="u88b33704" id="u88b33704" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 目录，并且创建一个名称为要实现的接口的空文件。</span></p><p data-lake-id="u9e9f1672" id="u9e9f1672" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710746562368-4a10c406-fd85-449d-8807-a706451367d7.png%22%2C%22taskId%22%3A%22u9380b31f-d062-40f1-a41c-10153a4e2ab%22%2C%22clientId%22%3A%22ud7adb59e-87e2-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A401%2C%22height%22%3A87%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A20924%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A401%2C%22originHeight%22%3A87%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22RESOURCES%20META-INF%20SERVICES%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A56%2C%22y%22%3A9%2C%22width%22%3A59%2C%22height%22%3A10%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A26%2C%22width%22%3A61%2C%22height%22%3A13%2C%22text%22%3A%22META-INF%22%7D%2C%7B%22x%22%3A91%2C%22y%22%3A47%2C%22width%22%3A50%2C%22height%22%3A12%2C%22text%22%3A%22SERVICES%22%7D%2C%7B%22x%22%3A110%2C%22y%22%3A65%2C%22width%22%3A217%2C%22height%22%3A15%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23424d59%22%2C%22id%22%3A%22u82241fbe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u60ce7f1b" id="u60ce7f1b" style="text-align: left"><br></p><p data-lake-id="u32323511" id="u32323511" style="text-align: left"><span data-lake-id="u3c1e3bca" id="u3c1e3bca" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">2）在文件中填写自己定制的接口实现类的 </span><strong><span data-lake-id="uc348b1ea" id="uc348b1ea" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整类路径</span></strong><span data-lake-id="ud71cc4f2" id="ud71cc4f2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，如图：</span></p><p data-lake-id="u063e1520" id="u063e1520" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710746593950-72473690-1817-42cd-bbe9-80197a27ff0c.png%22%2C%22taskId%22%3A%22ub8c8c127-6ffe-477f-b824-b15417479bd%22%2C%22clientId%22%3A%22ud7adb59e-87e2-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A712%2C%22height%22%3A144%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A53845%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A712%2C%22originHeight%22%3A144%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SERVICES%5C%5CCOM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%201%20COM.YYBF.CHENRPC.SERIALIZER.JDKSERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A35%2C%22y%22%3A6%2C%22width%22%3A271%2C%22height%22%3A14%2C%22text%22%3A%22SERVICES%5C%5CCOM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A32%2C%22width%22%3A11%2C%22height%22%3A13%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A33%2C%22width%22%3A329%2C%22height%22%3A13%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.JDKSERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2348505b%22%2C%22id%22%3A%22u12239e61%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7b462a91" id="u7b462a91" style="text-align: left"><br></p><p data-lake-id="uc53eecb3" id="uc53eecb3" style="text-align: left"><span data-lake-id="u67a3f101" id="u67a3f101" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">3）直接使用系统内置的 ServiceLoader 动态加载指定接口的实现类，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5CnSerializer%20serializer%20%3D%20null%3B%5Cn%2F%2F%20%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0%E4%BA%86Serializer%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%5CnServiceLoader%3CSerializer%3E%20serviceLoader%20%3D%20ServiceLoader.load(Serializer.class)%3B%5Cnfor%20(Serializer%20service%20%3A%20serviceLoader)%20%7B%5Cn%20%20%20%20serializer%20%3D%20service%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__height%22%3A139.03125%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WqN2v%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22height%22%3A139.03125%7D"></card><p data-lake-id="ue55dbc69" id="ue55dbc69" style="text-align: left"><span data-lake-id="uabc259cc" id="uabc259cc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">上述代码能够获取到所有文件中编写的实现类对象，选择一个使用即可。</span></p><details data-lake-id="u881b99c0" id="u881b99c0" open="true" class="lake-collapse"><summary data-lake-id="uc4a97956" id="uc4a97956" class="lake-summary"><span data-lake-id="u6cbb0fc0" id="u6cbb0fc0" class="lake-fontsize-12">关于 ServiceLoader.load(Serializer.class);</span></summary><ol list="u08c43773"><li fid="u33531168" data-lake-id="u41ec6d2f" id="u41ec6d2f"><span data-lake-id="ubaeb849b" id="ubaeb849b">通过 ServiceLoader.load(Serializer.class) 方法加载了一个 ServiceLoader 实例，并传入了 Serializer.class 作为参数，告诉 ServiceLoader 需要加载的服务接口是 Serializer。</span></li><li fid="u33531168" data-lake-id="u02442f94" id="u02442f94"><span data-lake-id="u6ceb8c26" id="u6ceb8c26">ServiceLoader 会在类路径下查找并加载实现了 Serializer 接口的服务提供者类。</span></li><li fid="u33531168" data-lake-id="ua4553102" id="ua4553102"><span data-lake-id="uc746488c" id="uc746488c">加载完成后，可以通过 serviceLoader 对象迭代得到所有的 Serializer 实现类的实例。</span></li></ol></details><p data-lake-id="u056f0ef4" id="u056f0ef4" style="text-align: left"><span data-lake-id="u7314173f" id="u7314173f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="X54Fx" id="X54Fx" style="text-align: left"><span data-lake-id="u798dad90" id="u798dad90" style="color: rgb(47, 48, 52)">自定义 SPI 实现</span></h5><p data-lake-id="u0d52cef3" id="u0d52cef3"><br></p><p data-lake-id="u8cf070bd" id="u8cf070bd" style="text-align: left"><span data-lake-id="u75c1fba6" id="u75c1fba6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">系统实现 SPI 虽然简单，但是如果我们想定制多个不同的接口实现类，就没办法在框架中指定使用哪一个</span></p><p data-lake-id="uc45ee4f0" id="uc45ee4f0" style="text-align: left"><span data-lake-id="u08c78670" id="u08c78670" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">了，也就无法实现我们 “通过配置快速指定序列化器” 的需求。</span></p><p data-lake-id="ua337e9d5" id="ua337e9d5" style="text-align: left"><span data-lake-id="u2e66de21" id="u2e66de21" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ua6d464ab" id="ua6d464ab" style="text-align: left"><span data-lake-id="uf621c59e" id="uf621c59e" class="lake-fontsize-12" style="color: #5C8D07">所以需要自己定义 SPI 机制的实现，只要能够根据配置加载到类即可。</span></p><p data-lake-id="u44c8ee15" id="u44c8ee15" style="text-align: left"><span data-lake-id="u3516bdb9" id="u3516bdb9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u00027dbf" id="u00027dbf" style="text-align: left"><span data-lake-id="u4f1d57f6" id="u4f1d57f6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">比如读取如下配置文件，能够得到一个</span><code data-lake-id="uc9060e8b" id="uc9060e8b"><span data-lake-id="u00044a26" id="u00044a26" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">序列化器名称=&gt;序列化器实现类对象</span></code><span data-lake-id="ua4878e58" id="ua4878e58" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">的映射，之后就可以根据用户</span></p><p data-lake-id="u6d0d9ed0" id="u6d0d9ed0" style="text-align: left"><span data-lake-id="uba82811e" id="uba82811e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">配置的序列化器名称动态加载指定实现类对象了。</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22properties%22%2C%22code%22%3A%22jdk%3Dcom.yybf.chenrpc.serializer.JdkSerializer%5Cnhessian%3Dcom.yybf.chenrpc.serializer.HessianSerializer%5Cnjson%3Dcom.yybf.chenrpc.serializer.JsonSerializer%5Cnkryo%3Dcom.yybf.chenrpc.serializer.KryoSerializer%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WDAS2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ud0378254" id="ud0378254" style="text-align: left"><span data-lake-id="ubee08c06" id="ubee08c06" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h2 data-lake-id="SDFbu" id="SDFbu" style="text-align: left"><span data-lake-id="uc04571c4" id="uc04571c4" style="color: rgb(47, 48, 52)">三、开发实现</span></h2><p data-lake-id="u0b707224" id="u0b707224" style="text-align: left"><span data-lake-id="uf657b408" id="uf657b408" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">明确了方案后，来依次开发实现。</span></p><h3 data-lake-id="NIHEG" id="NIHEG" style="text-align: left"><span data-lake-id="uf3b219c0" id="uf3b219c0" style="color: rgb(47, 48, 52)">1、多种序列化器实现</span></h3><p data-lake-id="u1b1772db" id="u1b1772db" style="text-align: left"><span data-lake-id="u4b04bb99" id="u4b04bb99" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">要分别实现 JSON、Kryo 和 Hessian 这三种主流的序列化器。</span></p><h4 data-lake-id="HjnnZ" id="HjnnZ"><span data-lake-id="uaa63f9a1" id="uaa63f9a1" style="color: rgb(47, 48, 52)">1）首先给项目的 pom.xml 中引入依赖：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C!--%20%E5%BA%8F%E5%88%97%E5%8C%96%20--%3E%5Cn%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.caucho%2Fhessian%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.caucho%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Ehessian%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E4.0.66%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.esotericsoftware%2Fkryo%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.esotericsoftware%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Ekryo%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E5.6.0%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.fasterxml.jackson.core%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Ejackson-databind%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E2.15.2%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gQwtt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="udf2e8dcd" id="udf2e8dcd" style="text-align: left"><span data-lake-id="u5a1db9c0" id="u5a1db9c0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="kP7SQ" id="kP7SQ"><span data-lake-id="u86306811" id="u86306811" style="color: rgb(47, 48, 52)">2）然后在序列化器包 </span><code data-lake-id="uad05a039" id="uad05a039"><span data-lake-id="uc507bfe3" id="uc507bfe3" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">serializer</span></code><span data-lake-id="u9c5e4a67" id="u9c5e4a67" style="color: rgb(47, 48, 52)">中分别实现这三种序列化器</span></h4><p data-lake-id="ue6b68522" id="ue6b68522" style="text-align: left"><span style="color: rgb(47, 48, 52)"><u><span data-lake-id="u62eb9d3e" id="u62eb9d3e" class="lake-fontsize-12">此处参考网上的代码、或者利用 AI 生成即可，不需要死记硬背。</span></u></span></p><p data-lake-id="u4e6f3d6e" id="u4e6f3d6e" style="text-align: left"><span style="color: rgb(47, 48, 52)"><u><span data-lake-id="ufab26295" id="ufab26295" class="lake-fontsize-12">​</span></u></span><br></p><h5 data-lake-id="OHbVq" id="OHbVq"><span data-lake-id="u63e8a9bf" id="u63e8a9bf" style="color: rgb(47, 48, 52)">JSON 序列化器</span></h5><p data-lake-id="u5d36f635" id="u5d36f635" style="text-align: left"><span data-lake-id="u5f259774" id="u5f259774" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">JSON 序列化器的实现相对复杂，要考虑一些对象转换的兼容性问题，比如 Object 数组在序列化后会丢失</span></p><p data-lake-id="ud445bc0f" id="ud445bc0f" style="text-align: left"><span data-lake-id="u8d3d77f0" id="u8d3d77f0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">类型。</span></p><p data-lake-id="u391918c9" id="u391918c9" style="text-align: left"><span data-lake-id="u06fa88b2" id="u06fa88b2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u98652d53" id="u98652d53" style="text-align: left"><span data-lake-id="u09c1260c" id="u09c1260c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22JsonSerializer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cn%5Cnimport%20com.fasterxml.jackson.databind.ObjectMapper%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cn%5Cn%2F**%5Cn%20*%20Json%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cnpublic%20class%20JsonSerializer%20implements%20Serializer%20%7B%5Cn%5Cn%20%20%20%20public%20static%20final%20ObjectMapper%20OBJECT_MAPPER%20%3D%20new%20ObjectMapper()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1%E4%B8%BAbyte%5B%5D%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20object%20%E9%9C%80%E8%A6%81%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%40return%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84byte%5B%5D%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20%40throws%20IOException%20%E5%A6%82%E6%9E%9C%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20byte%5B%5D%20serializer(T%20object)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20return%20OBJECT_MAPPER.writeValueAsBytes(object)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96byte%5B%5D%E6%95%B0%E7%BB%84%E4%B8%BA%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20bytes%20%E9%9C%80%E8%A6%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20*%20%40param%20type%20%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%9B%AE%E6%A0%87%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40return%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%40throws%20IOException%20%E5%A6%82%E6%9E%9C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20T%20deserializer(byte%5B%5D%20bytes%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20T%20object%20%3D%20OBJECT_MAPPER.readValue(bytes%2C%20type)%3B%5Cn%20%20%20%20%20%20%20%20if%20(object%20instanceof%20RpcRequest)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20handleRequest((RpcRequest)%20object%2C%20type)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(object%20instanceof%20RpcResponse)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20handleResponse((RpcResponse)%20object%2C%20type)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20object%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%94%B1%E4%BA%8E%20Object%20%E7%9A%84%E5%8E%9F%E5%A7%8B%E5%AF%B9%E8%B1%A1%E4%BC%9A%E8%A2%AB%E6%93%A6%E9%99%A4%EF%BC%8C%5Cn%20%20%20%20%20*%20%E5%AF%BC%E8%87%B4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E4%BC%9A%E8%A2%AB%E4%BD%9C%E4%B8%BA%20LinkedHashMap%20%E6%97%A0%E6%B3%95%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E5%A7%8B%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E8%BF%99%E9%87%8C%E5%81%9A%E4%BA%86%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20rpcRequest%3A%20rpc%20%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20*%20%40param%20type%3A%20%20%20%20%20%20%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%9B%AE%E6%A0%87%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40return%20T%3A%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2019%3A03%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20%3CT%3E%20T%20handleRequest(RpcRequest%20rpcRequest%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20Class%3C%3F%3E%5B%5D%20parameterTypes%20%3D%20rpcRequest.getParameterTypes()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%85%B7%E4%BD%93%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20Object%5B%5D%20args%20%3D%20rpcRequest.getArgs()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%BE%AA%E7%8E%AF%E5%A4%84%E7%90%86%E6%AF%8F%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20parameterTypes.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Class%3C%3F%3E%20clazz%20%3D%20parameterTypes%5Bi%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%EF%BC%8C%E5%B0%B1%E9%87%8D%E6%96%B0%E5%A4%84%E7%90%86%E4%B8%80%E4%B8%8B%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E5%8F%82%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%A2%84%E6%9C%9F%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(!clazz.isAssignableFrom(args%5Bi%5D.getClass()))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E4%B8%8D%E5%8C%B9%E9%85%8D%E7%9A%84%E5%8F%82%E6%95%B0%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BA%E5%AD%97%E8%8A%82%E6%B5%81%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20argsBytes%20%3D%20OBJECT_MAPPER.writeValueAsBytes(args%5Bi%5D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%8D%E6%A0%B9%E6%8D%AE%E5%8E%9F%E5%A7%8B%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%EF%BC%88clazz%EF%BC%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%AD%A3%E7%A1%AE%E7%9A%84Java%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20args%5Bi%5D%20%3D%20OBJECT_MAPPER.readValue(argsBytes%2C%20clazz)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E6%95%B4%E4%B8%AARpcRequest%E5%AF%B9%E8%B1%A1%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%B0%83%E7%94%A8%E8%80%85%E6%9C%9F%E6%9C%9B%E7%9A%84%E7%B1%BB%E5%9E%8BT%5Cn%20%20%20%20%20%20%20%20return%20type.cast(rpcRequest)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%94%B1%E4%BA%8E%20Object%20%E7%9A%84%E5%8E%9F%E5%A7%8B%E5%AF%B9%E8%B1%A1%E4%BC%9A%E8%A2%AB%E6%93%A6%E9%99%A4%EF%BC%8C%5Cn%20%20%20%20%20*%20%E5%AF%BC%E8%87%B4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E4%BC%9A%E8%A2%AB%E4%BD%9C%E4%B8%BA%20LinkedHashMap%20%E6%97%A0%E6%B3%95%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E5%A7%8B%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E8%BF%99%E9%87%8C%E5%81%9A%E4%BA%86%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20rpcResponse%3A%20rpc%20%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20*%20%40param%20type%3A%20%20%20%20%20%20%20%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E7%9B%AE%E6%A0%87%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40return%20T%3A%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2019%3A09%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20%3CT%3E%20T%20handleResponse(RpcResponse%20rpcResponse%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%93%8D%E5%BA%94%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%88rpcResponse.getData()%EF%BC%89%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BA%E5%AD%97%E8%8A%82%E6%B5%81%5Cn%20%20%20%20%20%20%20%20byte%5B%5D%20dataBytes%20%3D%20OBJECT_MAPPER.writeValueAsBytes(rpcResponse.getData())%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%9E%E9%99%85%E7%B1%BB%E5%9E%8B%EF%BC%88rpcResponse.getDataType()%EF%BC%89%EF%BC%8C%E5%B0%86%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E5%AD%97%E8%8A%82%E6%B5%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E5%8E%9F%E5%A7%8B%E7%9A%84Java%E5%AF%B9%E8%B1%A1%E3%80%82%5Cn%20%20%20%20%20%20%20%20rpcResponse.setData(OBJECT_MAPPER.readValue(dataBytes%2C%20rpcResponse.getDataType()))%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E6%95%B4%E4%B8%AARpcRequest%E5%AF%B9%E8%B1%A1%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E8%B0%83%E7%94%A8%E8%80%85%E6%9C%9F%E6%9C%9B%E7%9A%84%E7%B1%BB%E5%9E%8BT%5Cn%20%20%20%20%20%20%20%20return%20type.cast(rpcResponse)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22JsonSerializer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%7B%22from%22%3A1986%2C%22to%22%3A2002%2C%22color%22%3A%22%23CA3F4F%22%2C%22background%22%3A%22%23424242%22%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NAoC9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u7ee7e98f" id="u7ee7e98f" open="false" class="lake-collapse"><summary data-lake-id="u656ce650" id="u656ce650" class="lake-summary"><span data-lake-id="uafd6d859" id="uafd6d859" class="lake-fontsize-12">关于 handleRequest 和 handleResponse</span></summary><p data-lake-id="uc02fec0f" id="uc02fec0f"><span data-lake-id="u441bab5c" id="u441bab5c">这两个方法</span><code data-lake-id="u40a93577" id="u40a93577"><span data-lake-id="u6006108d" id="u6006108d">handleRequest</span></code><span data-lake-id="ubd8c53e9" id="ubd8c53e9">和</span><code data-lake-id="u6d82ec17" id="u6d82ec17"><span data-lake-id="ub24d9151" id="ub24d9151">handleResponse</span></code><span data-lake-id="u3ea2114d" id="u3ea2114d">都设计用于处理RPC（远程过程调用）中的序列化和反序列化问题，特别是针对Java泛型擦除导致的类型丢失问题。在Java中，泛型信息在编译时会被擦除，这意味着运行时泛型类型信息不可用。这在序列化和反序列化时尤其成问题，因为类型信息对于正确地处理数据至关重要。</span></p><p data-lake-id="u689a9417" id="u689a9417"><br></p><p data-lake-id="u969b134f" id="u969b134f"><code data-lake-id="uef29a6d3" id="uef29a6d3"><span data-lake-id="ue4487d38" id="ue4487d38">handleRequest</span></code><span data-lake-id="u903250f6" id="u903250f6">方法</span></p><p data-lake-id="ubfb7366c" id="ubfb7366c"><br></p><p data-lake-id="uf47e4f6d" id="uf47e4f6d"><code data-lake-id="u50997ee9" id="u50997ee9"><span data-lake-id="u00c796ff" id="u00c796ff">handleRequest</span></code><span data-lake-id="u1553ae19" id="u1553ae19">方法接收一个</span><code data-lake-id="u2323015f" id="u2323015f"><span data-lake-id="uf1adcdd9" id="uf1adcdd9">RpcRequest</span></code><span data-lake-id="ue2ed81a7" id="ue2ed81a7">对象和一个目标类型</span><code data-lake-id="u4c6771a0" id="u4c6771a0"><span data-lake-id="u2c647320" id="u2c647320">Class&lt;T&gt;</span></code><span data-lake-id="u86a6ed58" id="u86a6ed58">，然后它遍历</span><code data-lake-id="u31f51f1e" id="u31f51f1e"><span data-lake-id="u8112001f" id="u8112001f">RpcRequest</span></code><span data-lake-id="uee7607f3" id="uee7607f3">中的参数类型和参数值，针对每个参数进行处理：</span></p><p data-lake-id="u0f853210" id="u0f853210"><br></p><p data-lake-id="u5416cfa4" id="u5416cfa4"><span data-lake-id="uda079d3a" id="uda079d3a"> </span><strong><span data-lake-id="u5450e84f" id="u5450e84f">获取参数类型和值</span></strong><span data-lake-id="u2f81933b" id="u2f81933b">：首先，从</span><code data-lake-id="u1f6d652d" id="u1f6d652d"><span data-lake-id="u2e42a3c5" id="u2e42a3c5">rpcRequest</span></code><span data-lake-id="u4c0539d4" id="u4c0539d4">对象中提取参数类型数组</span><code data-lake-id="u19ed52bb" id="u19ed52bb"><span data-lake-id="ucc334a4b" id="ucc334a4b">parameterTypes</span></code><span data-lake-id="u417f21ee" id="u417f21ee">和参数值数组</span><code data-lake-id="u14751c1c" id="u14751c1c"><span data-lake-id="u2b026367" id="u2b026367">args</span></code><span data-lake-id="u48129ef1" id="u48129ef1">。 </span></p><p data-lake-id="ubf6e2a92" id="ubf6e2a92"><span data-lake-id="u7ee33b49" id="u7ee33b49"> </span><strong><span data-lake-id="u3c2b2e50" id="u3c2b2e50">类型检查和处理</span></strong><span data-lake-id="u58218e3e" id="u58218e3e">：对于每个参数，方法检查参数的实际类型是否与期望的类型相匹配。这通过</span><code data-lake-id="udcb2787f" id="udcb2787f"><span data-lake-id="ud3a4a741" id="ud3a4a741">clazz.isAssignableFrom(args[i].getClass())</span></code><span data-lake-id="u98552b08" id="u98552b08">完成。如果不匹配（意味着可能因为类型擦除或其他原因导致类型丢失），则需要特殊处理。 </span></p><p data-lake-id="u4e75dacb" id="u4e75dacb"><span data-lake-id="u6d4a752d" id="u6d4a752d"> </span><strong><span data-lake-id="u51c3b9b7" id="u51c3b9b7">序列化和反序列化</span></strong><span data-lake-id="u017794e0" id="u017794e0">：对不匹配的参数，首先将其序列化为字节流（</span><code data-lake-id="u89fcc230" id="u89fcc230"><span data-lake-id="u6089c7d8" id="u6089c7d8">OBJECT_MAPPER.writeValueAsBytes(args[i])</span></code><span data-lake-id="u5a193a5e" id="u5a193a5e">），然后再根据原始的参数类型（</span><code data-lake-id="u89b8b98e" id="u89b8b98e"><span data-lake-id="u7823b72a" id="u7823b72a">clazz</span></code><span data-lake-id="u033e5b42" id="u033e5b42">）反序列化回正确的Java对象。这样可以恢复丢失的类型信息。 </span></p><p data-lake-id="u47ef9387" id="u47ef9387"><span data-lake-id="u875cdd86" id="u875cdd86"> </span><strong><span data-lake-id="u01ad418a" id="u01ad418a">类型转换</span></strong><span data-lake-id="u17e8322a" id="u17e8322a">：最后，使用</span><code data-lake-id="u87ec9be1" id="u87ec9be1"><span data-lake-id="uc309a332" id="uc309a332">type.cast(rpcRequest)</span></code><span data-lake-id="ued1261f1" id="ued1261f1">将整个</span><code data-lake-id="u8f0d5d63" id="u8f0d5d63"><span data-lake-id="u58b413a1" id="u58b413a1">RpcRequest</span></code><span data-lake-id="u23def464" id="u23def464">对象强制转换为调用者期望的类型</span><code data-lake-id="u3d89d611" id="u3d89d611"><span data-lake-id="u7e24eee7" id="u7e24eee7">T</span></code><span data-lake-id="ub88dfae6" id="ub88dfae6">。 </span></p><p data-lake-id="u5d813a36" id="u5d813a36"><br></p><p data-lake-id="uab104a6d" id="uab104a6d"><code data-lake-id="u0343f172" id="u0343f172"><span data-lake-id="u6e4fdc01" id="u6e4fdc01">handleResponse</span></code><span data-lake-id="u9bba7465" id="u9bba7465">方法</span></p><p data-lake-id="ua398c90d" id="ua398c90d"><br></p><p data-lake-id="u59f60bd7" id="u59f60bd7"><code data-lake-id="u59a95a8a" id="u59a95a8a"><span data-lake-id="u2cce438a" id="u2cce438a">handleResponse</span></code><span data-lake-id="uee4fd213" id="uee4fd213">方法接收一个</span><code data-lake-id="u5d8c4ca8" id="u5d8c4ca8"><span data-lake-id="u58ea5cac" id="u58ea5cac">RpcResponse</span></code><span data-lake-id="uba187b19" id="uba187b19">对象和一个目标类型</span><code data-lake-id="u0aca6b6f" id="u0aca6b6f"><span data-lake-id="u3025fc4e" id="u3025fc4e">Class&lt;T&gt;</span></code><span data-lake-id="u01a1605e" id="u01a1605e">，用于处理RPC响应：</span></p><p data-lake-id="u40ec7475" id="u40ec7475"><br></p><p data-lake-id="ua2450281" id="ua2450281"><span data-lake-id="uc3a75911" id="uc3a75911"> </span><strong><span data-lake-id="ue0ae0847" id="ue0ae0847">序列化响应数据</span></strong><span data-lake-id="udd6c513b" id="udd6c513b">：首先将响应对象中的数据（</span><code data-lake-id="u46c8bf31" id="u46c8bf31"><span data-lake-id="u20470a65" id="u20470a65">rpcResponse.getData()</span></code><span data-lake-id="u1b2cebad" id="u1b2cebad">）序列化为字节流。 </span></p><p data-lake-id="u305476ba" id="u305476ba"><span data-lake-id="u9ee1a1ac" id="u9ee1a1ac"> </span><strong><span data-lake-id="uef0807c9" id="uef0807c9">反序列化数据</span></strong><span data-lake-id="u6d2e37e8" id="u6d2e37e8">：然后，根据响应数据的实际类型（</span><code data-lake-id="u05b5c025" id="u05b5c025"><span data-lake-id="ub4eb5ad6" id="ub4eb5ad6">rpcResponse.getDataType()</span></code><span data-lake-id="ua239cb61" id="ua239cb61">），将序列化后的字节流反序列化回原始的Java对象。这个步骤同样是为了恢复因Java泛型擦除而丢失的类型信息。 </span></p><p data-lake-id="ubbad76ab" id="ubbad76ab"><span data-lake-id="ue62ede2f" id="ue62ede2f"> </span><strong><span data-lake-id="ud7220043" id="ud7220043">类型转换</span></strong><span data-lake-id="u11ee3d44" id="u11ee3d44">：最后，使用</span><code data-lake-id="ud60978b2" id="ud60978b2"><span data-lake-id="ua0fea182" id="ua0fea182">type.cast(rpcResponse)</span></code><span data-lake-id="u31bb7137" id="u31bb7137">将整个</span><code data-lake-id="u863c14e4" id="u863c14e4"><span data-lake-id="u8b6d1bd4" id="u8b6d1bd4">RpcResponse</span></code><span data-lake-id="u3c306a97" id="u3c306a97">对象强制转换为调用者期望的类型</span><code data-lake-id="u22b21121" id="u22b21121"><span data-lake-id="ud389eeaf" id="ud389eeaf">T</span></code><span data-lake-id="u54deed9a" id="u54deed9a">。 </span></p><p data-lake-id="u7cb87ab0" id="u7cb87ab0"><br></p><p data-lake-id="u5db85b37" id="u5db85b37"><span data-lake-id="ue5aa9e9b" id="ue5aa9e9b">总结</span></p><p data-lake-id="ufebbe266" id="ufebbe266"><br></p><p data-lake-id="u4b0236a5" id="u4b0236a5"><span data-lake-id="ucd47c8d1" id="ucd47c8d1">这两个方法的关键在于处理因Java类型擦除导致的序列化和反序列化问题。通过显式地序列化和反序列化参数或响应数据，这些方法能够保证即使在类型信息在运行时不可用的情况下，也能正确地处理RPC请求和响应，保证数据的完整性和类型安全。</span></p></details><details data-lake-id="u5ea3f6de" id="u5ea3f6de" open="false" class="lake-collapse"><summary data-lake-id="u4b4026db" id="u4b4026db" class="lake-summary"><span data-lake-id="u88e04e53" id="u88e04e53" class="lake-fontsize-12" style="color: rgb(51, 51, 51)">isAssignableFrom 与 instanceof 的区别</span></summary><p data-lake-id="u8f308298" id="u8f308298"><span data-lake-id="u2d3eb4aa" id="u2d3eb4aa" class="lake-fontsize-11" style="color: rgb(51, 51, 51)">`instanceof` 和 `isAssignableFrom` 是用于判断类型关系的两个不同方法，它们在功能上有所区别，但适用范围也有所不同。</span></p><ul list="u0b8d8b19"><li fid="u546117a2" data-lake-id="u4b131006" id="u4b131006"><span data-lake-id="ue373cfb3" id="ue373cfb3" class="lake-fontsize-11" style="color: rgb(51, 51, 51)">instanceof 是一个静态方法，用于判断一个对象是否是某个类或接口的实例。它比较的是运行时的实例，即在运行时确定对象所属的类或接口。</span></li><li fid="u546117a2" data-lake-id="udb78a190" id="udb78a190"><span data-lake-id="ub3f049b8" id="ub3f049b8" class="lake-fontsize-11" style="color: rgb(51, 51, 51)">isAssignableFrom 是一个动态方法，用于判断两个类或接口是否相同，或者一个类或接口是否是另一个类或接口的父类或实现接口。它比较的是编译时的类型信息，即在编译时确定类型之间的关系。</span></li></ul><p data-lake-id="u389e343f" id="u389e343f"><span data-lake-id="u01fdcff9" id="u01fdcff9" class="lake-fontsize-11" style="color: rgb(51, 51, 51)">总结来说，`instanceof` 用于判断对象实例，而 `isAssignableFrom` 用于判断类型之间的关系。在使用上，`instanceof` 适用于检查对象实例，而 `isAssignableFrom` 适用于在编译时确定类或接口之间的继承或实现关系</span></p></details><h6 data-lake-id="P0DQd" id="P0DQd"><span data-lake-id="ub8e7f60b" id="ub8e7f60b" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">关于泛型擦除</span></h6><details data-lake-id="u5ac5dc4d" id="u5ac5dc4d" open="false" class="lake-collapse"><summary data-lake-id="ube889ea2" id="ube889ea2" class="lake-summary"><span data-lake-id="ub59c2133" id="ub59c2133" class="lake-fontsize-12" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">关于泛型擦除</span></summary><p data-lake-id="ue9b7f39c" id="ue9b7f39c"><span data-lake-id="uf3dbf9c1" id="uf3dbf9c1">我们都知道，很多语言都是支持泛型的，但是很多人不知道的是，不同的编译器对于泛型的处理方式是</span></p><p data-lake-id="u2a7a403b" id="u2a7a403b"><span data-lake-id="u949284c4" id="u949284c4">不同的，通常情况下，一个编译器处理泛型有两种方式</span><code data-lake-id="ud4886796" id="ud4886796"><span data-lake-id="u99915ecd" id="u99915ecd">Code specialization</span></code><span data-lake-id="u8f6fb931" id="u8f6fb931">和</span><code data-lake-id="u1a34c2cf" id="u1a34c2cf"><span data-lake-id="u299b81c5" id="u299b81c5">Code sharing</span></code><span data-lake-id="u0a1e7179" id="u0a1e7179">。</span></p><p data-lake-id="ub0bd6289" id="ub0bd6289"><span data-lake-id="ubb1edaf9" id="ubb1edaf9">​</span><br></p><p data-lake-id="u49869e9c" id="u49869e9c"><span data-lake-id="u8e56c5ca" id="u8e56c5ca">C++和 C#是使用</span><code data-lake-id="u5fc9e24e" id="u5fc9e24e"><span data-lake-id="udf85794c" id="udf85794c">Code specialization</span></code><span data-lake-id="u9632364b" id="u9632364b">的处理机制，而 Java 使用的是</span><code data-lake-id="ud8a9d0f2" id="ud8a9d0f2"><span data-lake-id="u1a05f46a" id="u1a05f46a">Code sharing</span></code><span data-lake-id="u4fa8151a" id="u4fa8151a">的机制。</span></p><p data-lake-id="u98c442e7" id="u98c442e7"><span data-lake-id="ua272f352" id="ua272f352">​</span><br></p><p data-lake-id="u1e5fcd12" id="u1e5fcd12"><code data-lake-id="ua59d2fed" id="ua59d2fed"><span data-lake-id="ue5179155" id="ue5179155" style="color: #5C8D07">Code sharing</span></code><span data-lake-id="u47a302ac" id="u47a302ac" style="color: #5C8D07"> 方式为每个泛型类型创建唯一的字节码表示，并且将该泛型类型的实例都映射到这个</span></p><p data-lake-id="ubd9569fb" id="ubd9569fb"><span data-lake-id="u10777b52" id="u10777b52" style="color: #5C8D07">唯一的字节码表示上。将多种泛型类形实例映射到唯一的字节码表示是通过类型擦除（type erasue）实</span></p><p data-lake-id="u4cb4f7fb" id="u4cb4f7fb"><span data-lake-id="ufcff720e" id="ufcff720e" style="color: #5C8D07">现的。</span></p><p data-lake-id="u0c3fa8be" id="u0c3fa8be"><span data-lake-id="u8620a0fe" id="u8620a0fe" style="color: #5C8D07">​</span><br></p><p data-lake-id="u785a79a4" id="u785a79a4"><span data-lake-id="u9355aeb6" id="u9355aeb6">也就是说，</span><strong><span data-lake-id="u7beb4d87" id="u7beb4d87" style="color: #5C8D07">对于 Java 虚拟机来说，他根本不认识Map&lt;String, String&gt; map这样的语法。需要在编译阶段通过类型擦除的方式进行解语法糖。</span></strong></p><p data-lake-id="ua0582966" id="ua0582966"><strong><span data-lake-id="u8d0bdbfe" id="u8d0bdbfe">​</span></strong><br></p><p data-lake-id="u890ac0fd" id="u890ac0fd"><span data-lake-id="u6b5b697e" id="u6b5b697e">类型擦除的主要过程如下：1.将所有的泛型参数用其最左边界（最顶级的父类型）类型替换。 2.移除所有的类型参数。</span></p><p data-lake-id="u496badc0" id="u496badc0"><span data-lake-id="ua2099aca" id="ua2099aca">以下代码：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Map%3CString%2C%20String%3E%20map%20%3D%20new%20HashMap%3CString%2C%20String%3E()%3B%5Cnmap.put(%5C%22name%5C%22%2C%20%5C%22hollis%5C%22)%3B%5Cnmap.put(%5C%22wechat%5C%22%2C%20%5C%22Hollis%5C%22)%3B%5Cnmap.put(%5C%22blog%5C%22%2C%20%5C%22www.hollischuang.com%5C%22)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o94he%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2716521a" id="u2716521a"><span data-lake-id="ubf755a1f" id="ubf755a1f">解语法糖之后变成</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22Map%20map%20%3D%20new%20HashMap()%3B%5Cnmap.put(%5C%22name%5C%22%2C%20%5C%22hollis%5C%22)%3B%5Cnmap.put(%5C%22wechat%5C%22%2C%20%5C%22Hollis%5C%22)%3B%5Cnmap.put(%5C%22blog%5C%22%2C%20%5C%22www.hollischuang.com%5C%22)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NR0DB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><card type="block" name="hr" value="data:%7B%22id%22%3A%22aBQDv%22%7D"></card><p data-lake-id="u186e721c" id="u186e721c"><span data-lake-id="ue6fd51fd" id="ue6fd51fd">以下代码：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20static%20%3CA%20extends%20Comparable%3CA%3E%3E%20A%20max(Collection%3CA%3E%20xs)%20%7B%5Cn%20%20%20%20Iterator%3CA%3E%20xi%20%3D%20xs.iterator()%3B%5Cn%20%20%20%20A%20w%20%3D%20xi.next()%3B%5Cn%20%20%20%20while%20(xi.hasNext())%20%7B%5Cn%20%20%20%20%20%20%20%20A%20x%20%3D%20xi.next()%3B%5Cn%20%20%20%20%20%20%20%20if%20(w.compareTo(x)%20%3C%200)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20w%20%3D%20x%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20w%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22q5wfg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u80f43c59" id="u80f43c59"><span data-lake-id="ua637492f" id="ua637492f">解语法糖之后变成</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%20public%20static%20Comparable%20max(Collection%20xs)%7B%5Cn%20%20%20%20Iterator%20xi%20%3D%20xs.iterator()%3B%5Cn%20%20%20%20Comparable%20w%20%3D%20(Comparable)xi.next()%3B%5Cn%20%20%20%20while(xi.hasNext())%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20Comparable%20x%20%3D%20(Comparable)xi.next()%3B%5Cn%20%20%20%20%20%20%20%20if(w.compareTo(x)%20%3C%200)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20w%20%3D%20x%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20w%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DBDl5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6b89a032" id="u6b89a032"><br></p><p data-lake-id="u1a86960f" id="u1a86960f"><span data-lake-id="uedaf52ad" id="uedaf52ad"> </span><strong><span data-lake-id="uaacf35e0" id="uaacf35e0" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">虚拟机中没有泛型，只有普通类和普通方法，所有泛型类的类型参数在编译时都会被擦除，泛型类并没有自己独有的Class类对象。比如并不存在List&lt;String&gt;.class或是List&lt;Integer&gt;.class，而只有List.class。</span></strong></p></details><h6 data-lake-id="es92a" id="es92a"><span data-lake-id="ub44deb2a" id="ub44deb2a" class="lake-fontsize-12">关于为什么实现Json序列化器时在序列化和反序列化的时候需要考虑类型擦除的问题</span></h6><details data-lake-id="u7f9bb881" id="u7f9bb881" open="false" class="lake-collapse"><summary data-lake-id="u6c6f65ca" id="u6c6f65ca" class="lake-summary"><span data-lake-id="uae92592f" id="uae92592f" class="lake-fontsize-12">关于为什么实现Json序列化器时在序列化和反序列化的时候需要考虑类型擦除的问题，而实现Kryo 和 Hessian序列化器时则不用考虑？</span></summary><p data-lake-id="u9796f7af" id="u9796f7af"><span data-lake-id="u9e099732" id="u9e099732">在实现JSON序列化器时，</span><span data-lake-id="ue6f13ab4" id="ue6f13ab4" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">因为JSON是一种文本格式，它本身并不支持保留Java对象的类型信息。</span><span data-lake-id="u0a93be0d" id="u0a93be0d">因此，在将Java对象序列化为JSON格式时，需要额外考虑如何保存和恢复对象的类型信息，以便在反序列化时正确地将其还原为相应的Java对象类型。</span></p><p data-lake-id="u9bf529d4" id="u9bf529d4"><span data-lake-id="ua2bc27a8" id="ua2bc27a8">​</span><br></p><p data-lake-id="u61ef2897" id="u61ef2897"><span data-lake-id="u7d9edecb" id="u7d9edecb">相比之下，</span><span data-lake-id="ufe9627c2" id="ufe9627c2" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">Kryo和Hessian等序列化器通常是基于二进制格式的，它们在序列化过程中可以更容易地保留Java对象的类型信息。这是因为在二进制格式中，对象的类型信息通常是直接序列化的一部分，而不像JSON格式那样需要显式地保存和恢复</span><span data-lake-id="u435427bc" id="u435427bc">。因此，在使用Kryo和Hessian等序列化器时，通常不需要特别考虑类型擦除的问题，它们会更自然地保留并恢复Java对象的类型信息。</span></p></details><h4 data-lake-id="eVDxf" id="eVDxf" style="text-align: left"><span data-lake-id="u2ed4300c" id="u2ed4300c" style="color: rgb(47, 48, 52)">Kryo 序列化器</span></h4><p data-lake-id="u52c7884d" id="u52c7884d"><br></p><p data-lake-id="ud180ca7a" id="ud180ca7a" style="text-align: left"><span data-lake-id="ud2f29300" id="ud2f29300" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Kryo 本身是线程不安全的，所以需要使用 ThreadLocal 保证每个线程有一个单独的 Kryo 对象实例。</span></p><p data-lake-id="u86ee8114" id="u86ee8114" style="text-align: left"><span data-lake-id="u8cd20c64" id="u8cd20c64" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u713b007d" id="u713b007d" style="text-align: left"><span data-lake-id="ubbb69856" id="ubbb69856" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22KryoSerializer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20com.esotericsoftware.kryo.Kryo%3B%5Cnimport%20com.esotericsoftware.kryo.io.Input%3B%5Cnimport%20com.esotericsoftware.kryo.io.Output%3B%5Cn%5Cnimport%20java.io.ByteArrayInputStream%3B%5Cnimport%20java.io.ByteArrayOutputStream%3B%5Cnimport%20java.io.IOException%3B%5Cn%5Cn%2F**%5Cn%20*%20Kryo%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cnpublic%20class%20KryoSerializer%20implements%20Serializer%20%7B%5Cn%5Cn%20%20%20%20%2F*Kryo%20%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%EF%BC%8C%E4%BD%BF%E7%94%A8ThreadLocal%E4%BF%9D%E8%AF%81%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AAKryo*%2F%5Cn%20%20%20%20public%20static%20final%20ThreadLocal%3CKryo%3E%20KRYO_THREAD_LOCAL%20%3D%20ThreadLocal.withInitial(()%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20Kryo%20kryo%20%3D%20new%20Kryo()%3B%5Cn%20%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%8A%A8%E6%80%81%E5%8A%A8%E6%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%EF%BC%8C%E4%B8%8D%E6%8F%90%E5%89%8D%E6%B3%A8%E5%86%8C%E6%89%80%E6%9C%89%E7%B1%BB%EF%BC%88%E5%8F%AF%E8%83%BD%E6%9C%89%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%89%5Cn%20%20%20%20%20%20%20kryo.setRegistrationRequired(false)%3B%5Cn%20%20%20%20%20%20%20return%20kryo%3B%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20byte%5B%5D%20serializer(T%20object)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayOutputStream%20byteArrayOutputStream%20%3D%20new%20ByteArrayOutputStream()%3B%5Cn%20%20%20%20%20%20%20%20Output%20output%20%3D%20new%20Output(byteArrayOutputStream)%3B%5Cn%20%20%20%20%20%20%20%20KRYO_THREAD_LOCAL.get().writeObject(output%2C%20object)%3B%5Cn%20%20%20%20%20%20%20%20output.close()%3B%5Cn%20%20%20%20%20%20%20%20return%20byteArrayOutputStream.toByteArray()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20T%20deserializer(byte%5B%5D%20bytes%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayInputStream%20byteArrayInputStream%20%3D%20new%20ByteArrayInputStream(bytes)%3B%5Cn%20%20%20%20%20%20%20%20Input%20input%20%3D%20new%20Input(byteArrayInputStream)%3B%5Cn%20%20%20%20%20%20%20%20T%20result%20%3D%20KRYO_THREAD_LOCAL.get().readObject(input%2C%20type)%3B%5Cn%20%20%20%20%20%20%20%20input.close()%3B%5Cn%20%20%20%20%20%20%20%20return%20result%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22KryoSerializer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22__widthMode%22%3A%22normal%22%2C%22id%22%3A%22FUWW2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22widthMode%22%3A%22normal%22%7D"></card><details data-lake-id="u50bf81df" id="u50bf81df" open="true" class="lake-collapse"><summary data-lake-id="u254e96be" id="u254e96be" class="lake-summary"><span data-lake-id="uff37c3d0" id="uff37c3d0" class="lake-fontsize-12">关于线程安全</span></summary><p data-lake-id="u608d64f3" id="u608d64f3"><span data-lake-id="uc68fc6a0" id="uc68fc6a0">在Java中，`ThreadLocal` 是一种线程局部变量，它为每个线程提供了独立的变量副本。在你提供的代码中，`KRYO_THREAD_LOCAL` 是一个 `ThreadLocal` 变量，它存储了一个 `Kryo` 实例的副本，每个线程都可以通过 `KRYO_THREAD_LOCAL.get()` 方法获取到这个副本。</span></p><p data-lake-id="uca41529c" id="uca41529c"><span data-lake-id="u4814454e" id="u4814454e">​</span><br></p><p data-lake-id="ue5ebeda9" id="ue5ebeda9"><span data-lake-id="ua7b6eeb0" id="ua7b6eeb0">由于每个线程都有自己的 `ThreadLocal` 副本，因此无论有多少个线程访问 `KRYO_THREAD_LOCAL.get()`，都不会影响到其他线程持有的 `Kryo` 实例。这就保证了每个线程只有一个 `Kryo` 实例。</span></p><p data-lake-id="u422d141c" id="u422d141c"><span data-lake-id="u6f03d8b6" id="u6f03d8b6">​</span><br></p><p data-lake-id="ue30b5b62" id="ue30b5b62"><span data-lake-id="u202ad55a" id="u202ad55a">简而言之，`ThreadLocal` 是线程安全的，并且确保每个线程都有自己的变量副本，因此每个线程只有一个 `Kryo` 实例。</span></p></details><h4 data-lake-id="iDvRL" id="iDvRL" style="text-align: left"><span data-lake-id="u31f2ce5d" id="u31f2ce5d" style="color: rgb(47, 48, 52)">Hessian 序列化器</span></h4><p data-lake-id="u872907e4" id="u872907e4" style="text-align: left"><span data-lake-id="u6a08a1a7" id="u6a08a1a7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实现比较简单，完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20com.caucho.hessian.io.HessianInput%3B%5Cnimport%20com.caucho.hessian.io.HessianOutput%3B%5Cn%5Cnimport%20java.io.ByteArrayInputStream%3B%5Cnimport%20java.io.ByteArrayOutputStream%3B%5Cnimport%20java.io.IOException%3B%5Cn%5Cn%2F**%5Cn%20*%20Hessian%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cnpublic%20class%20HessianSerializer%20implements%20Serializer%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20byte%5B%5D%20serializer(T%20object)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayOutputStream%20bos%20%3D%20new%20ByteArrayOutputStream()%3B%5Cn%20%20%20%20%20%20%20%20HessianOutput%20ho%20%3D%20new%20HessianOutput(bos)%3B%5Cn%20%20%20%20%20%20%20%20ho.writeObject(object)%3B%5Cn%20%20%20%20%20%20%20%20return%20bos.toByteArray()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20%3CT%3E%20T%20deserializer(byte%5B%5D%20bytes%2C%20Class%3CT%3E%20type)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20ByteArrayInputStream%20bis%20%3D%20new%20ByteArrayInputStream(bytes)%3B%5Cn%20%20%20%20%20%20%20%20HessianInput%20hi%20%3D%20new%20HessianInput(bis)%3B%5Cn%20%20%20%20%20%20%20%20return%20(T)%20hi.readObject(type)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uvVmG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="ua8e0c002" id="ua8e0c002" open="false" class="lake-collapse"><summary data-lake-id="ue58a73db" id="ue58a73db" class="lake-summary"><span data-lake-id="ua1e768fb" id="ua1e768fb" class="lake-fontsize-12">关于Hessian序列化是不是装饰器模式</span></summary><p data-lake-id="u45df6351" id="u45df6351"><span data-lake-id="u7b1a6cb1" id="u7b1a6cb1">这个代码片段本身并不是装饰器模式的直接实现，但它确实使用了装饰器模式中常见的一些技术手段，特别是在使用</span><code data-lake-id="u3ce300dd" id="u3ce300dd"><span data-lake-id="u955b8bb7" id="u955b8bb7">ByteArrayOutputStream</span></code><span data-lake-id="udae3fa52" id="udae3fa52">和</span><code data-lake-id="u10ebf631" id="u10ebf631"><span data-lake-id="u87613436" id="u87613436">HessianOutput</span></code><span data-lake-id="u0dec9387" id="u0dec9387">的部分。</span></p><p data-lake-id="ue2ea478b" id="ue2ea478b"><br></p><p data-lake-id="u50574e93" id="u50574e93"><span data-lake-id="ud3d0713f" id="ud3d0713f">装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许通过将对象放入包含行为的特殊封装对象中来动态地添加新的行为到这个对象上，而不改变其结构。装饰器模式通常用于扩展一个类的功能，它提供了比继承更有弹性的替代方案。</span></p><p data-lake-id="uaf4a19d4" id="uaf4a19d4"><br></p><p data-lake-id="u2eaa918b" id="u2eaa918b"><span data-lake-id="u396d13a1" id="u396d13a1">在这个代码片段中：</span></p><p data-lake-id="u2821c094" id="u2821c094"><br></p><ul list="u1748f664"><li fid="u30c79bd9" data-lake-id="ufebf4c52" id="ufebf4c52"><span data-lake-id="u3928143a" id="u3928143a"> </span><code data-lake-id="u54e7f8de" id="u54e7f8de"><span data-lake-id="u0f00e07d" id="u0f00e07d">ByteArrayOutputStream bos = new ByteArrayOutputStream();</span></code><span data-lake-id="ua3271a77" id="ua3271a77"> 创建了一个</span><code data-lake-id="ue382d8b8" id="ue382d8b8"><span data-lake-id="uac091ee0" id="uac091ee0">ByteArrayOutputStream</span></code><span data-lake-id="u0806828a" id="u0806828a">实例。这是一个字节数组输出流，它在内存中创建一个缓冲区，所有发送到输出流的数据保存在该缓冲区中。 </span></li><li fid="u30c79bd9" data-lake-id="uae8586a8" id="uae8586a8"><span data-lake-id="u7fb870df" id="u7fb870df"> </span><code data-lake-id="ub7562e16" id="ub7562e16"><span data-lake-id="u5b0ade9f" id="u5b0ade9f">HessianOutput ho = new HessianOutput(bos);</span></code><span data-lake-id="u74046ee4" id="u74046ee4"> 创建了一个</span><code data-lake-id="ubc96ca95" id="ubc96ca95"><span data-lake-id="u4711c8d2" id="u4711c8d2">HessianOutput</span></code><span data-lake-id="u34a4a338" id="u34a4a338">实例，它被“装饰”到了</span><code data-lake-id="uec0dc3e7" id="uec0dc3e7"><span data-lake-id="u76b9e1bb" id="u76b9e1bb">ByteArrayOutputStream</span></code><span data-lake-id="uaf0cf1cf" id="uaf0cf1cf">之上。</span><code data-lake-id="u4f07696e" id="u4f07696e"><span data-lake-id="ue6f6f1b0" id="ue6f6f1b0">HessianOutput</span></code><span data-lake-id="ufbee100e" id="ufbee100e">是用于Hessian序列化的类，它需要一个</span><code data-lake-id="u847b2120" id="u847b2120"><span data-lake-id="ub42913a5" id="ub42913a5">OutputStream</span></code><span data-lake-id="u82a84cc0" id="u82a84cc0">来输出序列化数据，这里使用了</span><code data-lake-id="ub6394e8c" id="ub6394e8c"><span data-lake-id="u54d81172" id="u54d81172">bos</span></code><span data-lake-id="u4d1e2cf1" id="u4d1e2cf1">。 </span></li></ul><p data-lake-id="ube8fb535" id="ube8fb535"><br></p><p data-lake-id="u82eafdb9" id="u82eafdb9"><span data-lake-id="u98ce61e7" id="u98ce61e7">这个过程中，</span><code data-lake-id="ua750a605" id="ua750a605"><span data-lake-id="u62796d6b" id="u62796d6b">HessianOutput</span></code><span data-lake-id="ud1068531" id="ud1068531">使用了</span><code data-lake-id="ub512a417" id="ub512a417"><span data-lake-id="ued63b0c3" id="ued63b0c3">ByteArrayOutputStream</span></code><span data-lake-id="ub8900114" id="ub8900114">作为其输出流，这种方式类似于装饰器模式中的“装饰”，即</span><code data-lake-id="u94404c2d" id="u94404c2d"><span data-lake-id="u145f2ba3" id="u145f2ba3">HessianOutput</span></code><span data-lake-id="u278de7b0" id="u278de7b0">增加了向一个字节数组写入序列化对象的功能，而</span><code data-lake-id="ufd9a9844" id="ufd9a9844"><span data-lake-id="u3e07672f" id="u3e07672f">ByteArrayOutputStream</span></code><span data-lake-id="u14edc883" id="u14edc883">提供了基本的字节写入功能。虽然这种用法体现了装饰器模式的某些特征，但整个实现的目的并非为了扩展</span><code data-lake-id="uc43dd5e1" id="uc43dd5e1"><span data-lake-id="u5f6602e4" id="u5f6602e4">ByteArrayOutputStream</span></code><span data-lake-id="ud0d7909b" id="ud0d7909b">的功能，而是为了实现对象的序列化。</span></p><p data-lake-id="u3b7b475b" id="u3b7b475b"><br></p><p data-lake-id="u7df59b92" id="u7df59b92"><span data-lake-id="ucdde198c" id="ucdde198c">因此，虽然这个代码片段使用了装饰器模式中的技术，但它本身的目的并不是为了实现装饰器模式。装饰器模式的典型用例更多是关于在运行时动态地添加或组合行为，而这里主要是利用已有类的功能来实现特定的功能（对象序列化）。</span></p></details><p data-lake-id="udb9b83e8" id="udb9b83e8" style="text-align: left"><span data-lake-id="u0937e16c" id="u0937e16c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="OIVDG" id="OIVDG" style="text-align: left"><span data-lake-id="u312e8bd0" id="u312e8bd0" style="color: rgb(47, 48, 52)">2、动态使用序列化器</span></h3><p data-lake-id="u608bd974" id="u608bd974" style="text-align: left"><span data-lake-id="u770d20f8" id="u770d20f8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">以下所有代码均放在 </span><span data-lake-id="u08887357" id="u08887357" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">serializer</span><span data-lake-id="u4da308c8" id="u4da308c8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 包下，便于维护和扩展。</span></p><p data-lake-id="u63b3cf10" id="u63b3cf10" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710758259914-3fc35e9c-cd5f-4c32-b0a7-e42d036e721b.png%22%2C%22taskId%22%3A%22u455e74df-433c-45b6-baaa-0b5d9d0c656%22%2C%22clientId%22%3A%22ud7adb59e-87e2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22Fiqke9m0K_43Wirg1Gzcw5qU6glC.png%22%2C%22size%22%3A49353%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A728%2C%22originHeight%22%3A398%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SERIALIZER%20HESSIANSERIALIZER%20C%20JDKSERIALIZER%20C%20OJSONSERIALIZER%20KRYOSERIALIZER%20C%20SERIALIZER%20I%20C%20SERIALIZERFACTORY%20SERIALIZERKEYS%20I%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A129%2C%22y%22%3A12%2C%22width%22%3A141%2C%22height%22%3A27%2C%22text%22%3A%22SERIALIZER%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A59%2C%22width%22%3A265%2C%22height%22%3A30%2C%22text%22%3A%22HESSIANSERIALIZER%22%7D%2C%7B%22x%22%3A136%2C%22y%22%3A61%2C%22width%22%3A22%2C%22height%22%3A24%2C%22text%22%3A%22C%22%7D%2C%7B%22x%22%3A174%2C%22y%22%3A109%2C%22width%22%3A195%2C%22height%22%3A32%2C%22text%22%3A%22JDKSERIALIZER%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A111%2C%22width%22%3A23%2C%22height%22%3A26%2C%22text%22%3A%22C%22%7D%2C%7B%22x%22%3A131%2C%22y%22%3A154%2C%22width%22%3A257%2C%22height%22%3A44%2C%22text%22%3A%22OJSONSERIALIZER%22%7D%2C%7B%22x%22%3A174%2C%22y%22%3A206%2C%22width%22%3A218%2C%22height%22%3A44%2C%22text%22%3A%22KRYOSERIALIZER%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A209%2C%22width%22%3A23%2C%22height%22%3A27%2C%22text%22%3A%22C%22%7D%2C%7B%22x%22%3A175%2C%22y%22%3A257%2C%22width%22%3A148%2C%22height%22%3A31%2C%22text%22%3A%22SERIALIZER%22%7D%2C%7B%22x%22%3A138%2C%22y%22%3A260%2C%22width%22%3A18%2C%22height%22%3A25%2C%22text%22%3A%22I%22%7D%2C%7B%22x%22%3A132%2C%22y%22%3A304%2C%22width%22%3A304%2C%22height%22%3A41%2C%22text%22%3A%22C%20SERIALIZERFACTORY%22%7D%2C%7B%22x%22%3A175%2C%22y%22%3A359%2C%22width%22%3A217%2C%22height%22%3A34%2C%22text%22%3A%22SERIALIZERKEYS%22%7D%2C%7B%22x%22%3A140%2C%22y%22%3A360%2C%22width%22%3A15%2C%22height%22%3A24%2C%22text%22%3A%22I%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233d4244%22%2C%22id%22%3A%22u2788145a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u64094177" id="u64094177" style="text-align: left"><span data-lake-id="u9911cd55" id="u9911cd55" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="V1r8V" id="V1r8V"><span data-lake-id="u82926152" id="u82926152" style="color: rgb(47, 48, 52)">1）首先定义序列化器名称的常量，使用接口实现。</span></h4><p data-lake-id="uf28bbb88" id="uf28bbb88" style="text-align: left"><span data-lake-id="u87a6fd3b" id="u87a6fd3b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22SerializerKeys%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E9%94%AE%E5%90%8D%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%5Cn%20*%20%40date%202024%2F3%2F17-20%3A57%5Cn%20*%2F%5Cnpublic%20interface%20SerializerKeys%20%7B%5Cn%20%20%20%20String%20JDK%20%3D%20%5C%22jdk%5C%22%3B%5Cn%20%20%20%20String%20JSON%20%3D%20%5C%22json%5C%22%3B%5Cn%20%20%20%20String%20KRYO%20%3D%20%5C%22kryo%5C%22%3B%5Cn%20%20%20%20String%20HESSIAN%20%3D%20%5C%22hessian%5C%22%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22SerializerKeys%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pF1sr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="sF5zX" id="sF5zX"><span data-lake-id="u062a3f2f" id="u062a3f2f" style="color: rgb(47, 48, 52)">2）定义序列化器工厂。</span></h4><p data-lake-id="u052abc2c" id="u052abc2c" style="text-align: left"><span data-lake-id="ubef9ded7" id="ubef9ded7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化器对象是可以复用的，没必要每次执行序列化操作前都创建一个新的对象。所以可以使用设计</span></p><p data-lake-id="ufc89dd50" id="ufc89dd50" style="text-align: left"><span data-lake-id="uf728d1bf" id="uf728d1bf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">模式中的 </span><strong><span data-lake-id="ucb3a2df6" id="ucb3a2df6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">工厂模式 + 单例模式</span></strong><span data-lake-id="udebddc35" id="udebddc35" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 来简化创建和获取序列化器对象的操作。</span></p><p data-lake-id="u207ec327" id="u207ec327" style="text-align: left"><span data-lake-id="u45691b9c" id="u45691b9c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ud5845293" id="ud5845293" style="text-align: left"><span data-lake-id="ud9d6c11f" id="ud9d6c11f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">序列化器工厂代码如下，使用 Map 来维护序列化器实例：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22SerializerFactoryOld%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%B7%A5%E5%8E%82%EF%BC%88%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%AF%B9%E8%B1%A1%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cnpublic%20class%20SerializerFactoryOld%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%BA%8F%E5%88%97%E5%8C%96%E6%98%A0%E5%B0%84%EF%BC%88%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%EF%BC%89%5Cn%20%20%20%20public%20static%20final%20Map%3CString%2C%20Serializer%3E%20KEY_SERIALIZER_MAP%20%3D%20new%20HashMap%3CString%2C%20Serializer%3E()%20%7B%7B%5Cn%20%20%20%20%20%20%20%20put(SerializerKeys.JDK%2C%20new%20JdkSerializer())%3B%5Cn%20%20%20%20%20%20%20%20put(SerializerKeys.JSON%2C%20new%20JsonSerializer())%3B%5Cn%20%20%20%20%20%20%20%20put(SerializerKeys.KRYO%2C%20new%20KryoSerializer())%3B%5Cn%20%20%20%20%20%20%20%20put(SerializerKeys.HESSIAN%2C%20new%20HessianSerializer())%3B%5Cn%20%20%20%20%7D%7D%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20public%20static%20final%20Serializer%20DEFAULT_SERIALIZER%20%3D%20KEY_SERIALIZER_MAP.get(%5C%22jdk%5C%22)%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%20%E6%8C%87%E5%AE%9A%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.serializer.Serializer%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2021%3A04%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Serializer%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20getOrDefault(key%2C%20default)%E5%A6%82%E6%9E%9C%E5%AD%98%E5%9C%A8key%2C%20%E5%88%99%E8%BF%94%E5%9B%9E%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84value%2C%20%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9E%E7%BB%99%E5%AE%9A%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%5Cn%20%20%20%20%20%20%20%20return%20KEY_SERIALIZER_MAP.getOrDefault(key%2C%20DEFAULT_SERIALIZER)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22SerializerFactoryOld%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MQmsn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="YXCrI" id="YXCrI"><span data-lake-id="ud890e805" id="ud890e805" style="color: rgb(47, 48, 52)">3）在全局配置类 RpcConfig 中补充序列化器的配置，代码如下：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20RpcConfig%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serializer%20%3D%20SerializerKeys.JDK%3B%5Cn%7D%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oh2Me%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="ORHM4" id="ORHM4"><span data-lake-id="u00fcbec7" id="u00fcbec7" style="color: rgb(47, 48, 52)">4）动态获取序列化器。</span></h4><p data-lake-id="u95838a95" id="u95838a95" style="text-align: left"><span data-lake-id="u5819f97f" id="u5819f97f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">需要将之前代码中所有用到序列化器的位置更改为 “使用工厂 + 读取配置” 来获取实现类。</span></p><p data-lake-id="u6da44b14" id="u6da44b14" style="text-align: left"><span data-lake-id="u3ed96edd" id="u3ed96edd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u2a937aa9" id="u2a937aa9" style="text-align: left"><span data-lake-id="u8fafc796" id="u8fafc796" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">要更改的类：</span></p><ol list="u49a5a37a"><li fid="u39370afb" data-lake-id="ubadf6595" id="ubadf6595" style="text-align: left"><span data-lake-id="u8050ee75" id="u8050ee75" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">ServiceProxy</span></li><li fid="u39370afb" data-lake-id="u24d6478c" id="u24d6478c" style="text-align: left"><span data-lake-id="ucec670d5" id="ucec670d5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">HttpServerHandler</span></li></ol><p data-lake-id="u1d7a6569" id="u1d7a6569"><br></p><p data-lake-id="uf2ece058" id="uf2ece058" style="text-align: left"><span data-lake-id="u06948e7e" id="u06948e7e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">更改代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cnfinal%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(RpcApplication.getRpcConfig().getSerializer())%3B%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pgy3x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6fdd99ac" id="u6fdd99ac" style="text-align: left"><span data-lake-id="u93d76751" id="u93d76751" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="uIA6K" id="uIA6K" style="text-align: left"><span data-lake-id="u74d2fde8" id="u74d2fde8" style="color: rgb(47, 48, 52)">3、自定义序列化器</span></h3><p data-lake-id="u976dc8ce" id="u976dc8ce" style="text-align: left"><span data-lake-id="ubf731b4c" id="ubf731b4c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用自定义的 SPI 机制实现，支持用户自定义序列化器并指定键名。</span></p><p data-lake-id="u2b45c393" id="u2b45c393" style="text-align: left"><span data-lake-id="u2759949e" id="u2759949e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="g1oSn" id="g1oSn"><span data-lake-id="u31970094" id="u31970094" style="color: rgb(47, 48, 52)">1）指定 SPI 配置目录。</span></h4><p data-lake-id="u39e1c9f1" id="u39e1c9f1" style="text-align: left"><span data-lake-id="uc1a14257" id="uc1a14257" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">系统内置的 SPI 机制会加载 </span><code data-lake-id="ua1a22201" id="ua1a22201"><span data-lake-id="ua59889a4" id="ua59889a4" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">resources</span></code><span data-lake-id="u13dea83f" id="u13dea83f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">资源目录下的</span><code data-lake-id="u92ac657d" id="u92ac657d"><span data-lake-id="uda922ccd" id="uda922ccd" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">META-INF/services</span></code><span data-lake-id="u2b36f0df" id="u2b36f0df" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 目录，那自定义的序列化器可以如法炮制，改为读取 </span><code data-lake-id="u5516d91e" id="u5516d91e"><span data-lake-id="ue9ec5d7f" id="ue9ec5d7f" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">META-INF/rpc</span></code><span data-lake-id="u4f8cd485" id="u4f8cd485" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 目录。</span></p><p data-lake-id="u79059729" id="u79059729" style="text-align: left"><span data-lake-id="uea457c6d" id="uea457c6d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u1affb918" id="u1affb918" style="text-align: left"><span data-lake-id="ucfd0c5f1" id="ucfd0c5f1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">还可以将 SPI 配置再分为系统内置 SPI 和用户自定义 SPI，即目录如下：</span></p><ul list="ue3f7f31e"><li fid="ude45e61d" data-lake-id="u0caabc9b" id="u0caabc9b" style="text-align: left"><span data-lake-id="uc2e746b1" id="uc2e746b1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">用户自定义 SPI：META-INF/rpc/custom。用户可以在该目录下新建配置，加载自定义的实现类。</span></li><li fid="ude45e61d" data-lake-id="ua204d16a" id="ua204d16a" style="text-align: left"><span data-lake-id="u8faa686b" id="u8faa686b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">系统内置 SPI：META-INF/rpc/system。RPC 框架自带的实现类，比如之前开发好的 </span><code data-lake-id="u74fa80c3" id="u74fa80c3"><span data-lake-id="ud58ef89a" id="ud58ef89a" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">JdkSerializer</span></code><span data-lake-id="u6040727b" id="u6040727b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。</span></li></ul><p data-lake-id="u0813b510" id="u0813b510"><br></p><p data-lake-id="u59b23d33" id="u59b23d33" style="text-align: left"><span data-lake-id="u9ac3e44e" id="u9ac3e44e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这样一来，所有接口的实现类都可以通过 SPI 动态加载，不用在代码中硬编码 Map 来维护实现类了。</span></p><p data-lake-id="u117077f3" id="u117077f3" style="text-align: left"><span data-lake-id="u68617c39" id="u68617c39" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u22e478bc" id="u22e478bc" style="text-align: left"><span data-lake-id="ub1628cfd" id="ub1628cfd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">编写一个系统扩展配置文件，内容为之前写好的序列化器。</span></p><p data-lake-id="u5ea43328" id="u5ea43328" style="text-align: left"><span data-lake-id="u15ca8b49" id="u15ca8b49" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">文件名称为 </span><code data-lake-id="uf1da7bc0" id="uf1da7bc0"><span data-lake-id="u129c8d00" id="u129c8d00" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">com.yybf.chenrpc.serializer.Serializer</span></code><span data-lake-id="uf83c8d9e" id="uf83c8d9e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，如图：</span></p><p data-lake-id="u8f01a51a" id="u8f01a51a" style="text-align: left"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710761475455-11af678d-a7c9-47e9-96f6-3339d8798d0d.png%22%2C%22taskId%22%3A%22u4d502831-06e0-449b-a502-1faf5509c00%22%2C%22clientId%22%3A%22ud7adb59e-87e2-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1022%2C%22height%22%3A221%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A117667%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1022%2C%22originHeight%22%3A221%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20JDK-COM.YYBF.CHENRPC.SERIALIZER.JDKSERIALIZER%202%20HESSIANCOM.YYBF.CHE%20CHENRPC.SERIALIZER.HESSIANSERIALIZER%203%20JSONCOMYYBF.%20CHENRPC.SERIALIZER.JSONSERIALIZER%204%20KRYO-COM.YYBF.CHENRPC.SERIALIZER.KRYOSERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A51%2C%22y%22%3A13%2C%22width%22%3A274%2C%22height%22%3A19%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A87%2C%22y%22%3A43%2C%22width%22%3A452%2C%22height%22%3A22%2C%22text%22%3A%22JDK-COM.YYBF.CHENRPC.SERIALIZER.JDKSERIALIZER%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A70%2C%22width%22%3A14%2C%22height%22%3A18%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A70%2C%22width%22%3A194%2C%22height%22%3A19%2C%22text%22%3A%22HESSIANCOM.YYBF.CHE%22%7D%2C%7B%22x%22%3A265%2C%22y%22%3A71%2C%22width%22%3A354%2C%22height%22%3A16%2C%22text%22%3A%22CHENRPC.SERIALIZER.HESSIANSERIALIZER%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A97%2C%22width%22%3A18%2C%22height%22%3A21%2C%22text%22%3A%223%22%7D%2C%7B%22x%22%3A89%2C%22y%22%3A99%2C%22width%22%3A137%2C%22height%22%3A20%2C%22text%22%3A%22JSONCOMYYBF.%22%7D%2C%7B%22x%22%3A236%2C%22y%22%3A99%2C%22width%22%3A323%2C%22height%22%3A17%2C%22text%22%3A%22CHENRPC.SERIALIZER.JSONSERIALIZER%22%7D%2C%7B%22x%22%3A22%2C%22y%22%3A124%2C%22width%22%3A16%2C%22height%22%3A18%2C%22text%22%3A%224%22%7D%2C%7B%22x%22%3A90%2C%22y%22%3A124%2C%22width%22%3A471%2C%22height%22%3A21%2C%22text%22%3A%22KRYO-COM.YYBF.CHENRPC.SERIALIZER.KRYOSERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2348525d%22%2C%22id%22%3A%22u36b56099%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u816f95c2" id="u816f95c2" style="text-align: left"><span data-lake-id="u2c9518eb" id="u2c9518eb" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22jdk%3Dcom.yybf.chenrpc.serializer.JdkSerializer%5Cnhessian%3Dcom.yybf.chenrpc.serializer.HessianSerializer%5Cnjson%3Dcom.yybf.chenrpc.serializer.JsonSerializer%5Cnkryo%3Dcom.yybf.chenrpc.serializer.KryoSerializer%22%2C%22autoWrap%22%3Atrue%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cbp56%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u7767b952" id="u7767b952" style="text-align: left"><span data-lake-id="u42e1e77f" id="u42e1e77f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="C8Wpg" id="C8Wpg"><span data-lake-id="u2df7a1b9" id="u2df7a1b9" style="color: rgb(47, 48, 52)">2）编写 SpiLoader 加载器。</span></h4><p data-lake-id="u9e6b63d3" id="u9e6b63d3" style="text-align: left"><span data-lake-id="u97196c3b" id="u97196c3b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">相当于一个工具类，提供了读取配置并加载实现类的方法。</span></p><p data-lake-id="u740850a3" id="u740850a3" style="text-align: left"><span data-lake-id="u5ffc8c57" id="u5ffc8c57" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u35ab8ad2" id="u35ab8ad2" style="text-align: left"><span data-lake-id="uce21e676" id="uce21e676" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">关键实现如下：</span></p><ol list="u53d63f7a"><li fid="uf6ba845b" data-lake-id="u022ab414" id="u022ab414" style="text-align: left"><span data-lake-id="uaca5c703" id="uaca5c703" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">用 Map 来存储已加载的配置信息 </span><span data-lake-id="u659587fc" id="u659587fc" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">键名 =&gt; 实现类</span><span data-lake-id="ud0a20b95" id="ud0a20b95" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。</span></li><li fid="uf6ba845b" data-lake-id="ub0bd853a" id="ub0bd853a" style="text-align: left"><span data-lake-id="ufbd3cbd9" id="ufbd3cbd9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">扫描指定路径，读取每个配置文件，获取到 </span><span data-lake-id="udcc7716f" id="udcc7716f" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">键名 =&gt; 实现类</span><span data-lake-id="u5ff1b3dc" id="u5ff1b3dc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 信息并存储在 Map 中。</span></li><li fid="uf6ba845b" data-lake-id="u8182d7c4" id="u8182d7c4" style="text-align: left"><span data-lake-id="uc48adff7" id="uc48adff7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">定义获取实例方法，根据用户传入的接口和键名，从 Map 中找到对应的实现类，然后通过反射获取到实现类对象。可以维护一个对象实例缓存，创建过一次的对象从缓存中读取即可。</span></li></ol><p data-lake-id="u5cec8674" id="u5cec8674"><br></p><p data-lake-id="ue608b4c7" id="ue608b4c7" style="text-align: left"><span data-lake-id="u1e23d056" id="u1e23d056" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22SpiLoader%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.spi%3B%5Cn%5Cnimport%20cn.hutool.core.io.resource.ResourceUtil%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.io.BufferedReader%3B%5Cnimport%20java.io.InputStreamReader%3B%5Cnimport%20java.net.URL%3B%5Cnimport%20java.util.Arrays%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.ConcurrentHashMap%3B%5Cn%5Cn%2F**%5Cn%20*%20SPI%20%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%88%E6%94%AF%E6%8C%81%E9%94%AE%E5%80%BC%E5%AF%B9%E6%98%A0%E5%B0%84%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20SpiLoader%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%AD%98%E5%82%A8%E5%B7%B2%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%EF%BC%9A%E6%8E%A5%E5%8F%A3%E5%90%8D%20%3D%3E%20%EF%BC%88key%20%3D%E3%80%8B%20%E5%AE%9E%E7%8E%B0%E7%B1%BB%EF%BC%89%5Cn%20%20%20%20public%20static%20Map%3CString%2C%20Map%3CString%2C%20Class%3C%3F%3E%3E%3E%20loaderMap%20%3D%20new%20ConcurrentHashMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E7%BC%93%E5%AD%98%EF%BC%88%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8Dnew%EF%BC%89%EF%BC%8C%E7%B1%BB%E8%B7%AF%E5%BE%84%20%3D%E3%80%8B%20%E5%AF%B9%E8%B1%A1%E5%8D%95%E4%BE%8B%20%EF%BC%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%89%5Cn%20%20%20%20public%20static%20Map%3CString%2C%20Object%3E%20instanceCache%20%3D%20new%20ConcurrentHashMap%3C%3E()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%B3%BB%E7%BB%9FSPI%E7%9B%AE%E5%BD%95%5Cn%20%20%20%20public%20static%20final%20String%20RPC_SYSTEM_SPI_DIR%20%3D%20%5C%22META-INF%2Frpc%2Fsystem%2F%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89Spi%E7%9B%AE%E5%BD%95%5Cn%20%20%20%20public%20static%20final%20String%20RPC_CUSTOM_SPI_DIR%20%3D%20%5C%22META-INF%2Frpc%2Fcustom%2F%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20public%20static%20final%20String%5B%5D%20SCAN_DIRS%20%3D%20new%20String%5B%5D%7BRPC_SYSTEM_SPI_DIR%2C%20RPC_CUSTOM_SPI_DIR%7D%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E5%88%97%E8%A1%A8%5Cn%20%20%20%20public%20static%20final%20List%3CClass%3C%3F%3E%3E%20LOAD_CLASS_LIST%20%3D%20Arrays.asList(Serializer.class)%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8A%A0%E8%BD%BD%E6%89%80%E6%9C%89%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2021%3A52%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20loadAll()%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8A%A0%E8%BD%BD%E6%89%80%E6%9C%89SPI%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20for%20(Class%3C%3F%3E%20tClass%20%3A%20LOAD_CLASS_LIST)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20load(tClass)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20tClass%3A%20%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E6%8E%A5%E5%8F%A3%5Cn%20%20%20%20%20*%20%40param%20key%3A%20%20%20%20%E7%B1%BB%E5%9E%8B%EF%BC%88%E8%87%AA%E5%AE%9A%E4%B9%89%EF%BC%89%5Cn%20%20%20%20%20*%20%40return%20T%3A%20%E8%AF%A5%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2022%3A11%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20%3CT%3E%20T%20getInstance(Class%3C%3F%3E%20tClass%2C%20String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20tClassName%20%3D%20tClass.getName()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E6%8E%A5%E5%8F%A3%E5%90%8D%E8%8E%B7%E5%8F%96%E5%B7%B2%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Class%3C%3F%3E%3E%20keyClassMap%20%3D%20loaderMap.get(tClassName)%3B%5Cn%20%20%20%20%20%20%20%20if%20(keyClassMap%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(String.format(%5C%22SpiLoader%E6%9C%AA%E5%8A%A0%E8%BD%BD%25s%E7%B1%BB%E5%9E%8B%5C%22%2C%20tClass))%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20.containsKey()%E5%88%A4%E6%96%ADMap%E9%87%8C%E9%9D%A2%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%8C%87%E5%AE%9A%E9%94%AE%E5%90%8D-key%5Cn%20%20%20%20%20%20%20%20if%20(!keyClassMap.containsKey(key))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(String.format(%5C%22SpiLoader%20%E7%9A%84%20%25s%20%E4%B8%8D%E5%AD%98%E5%9C%A8%20key%3D%25s%20%E7%9A%84%E7%B1%BB%E5%9E%8B%5C%22%2C%20tClassName%2C%20key))%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%88%B0%E8%A6%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20Class%3C%3F%3E%20implClass%20%3D%20keyClassMap.get(key)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E5%AE%9E%E4%BE%8B%E7%BC%93%E5%AD%98%E4%B8%AD%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20String%20implClassName%20%3D%20implClass.getName()%3B%5Cn%20%20%20%20%20%20%20%20if%20(!instanceCache.containsKey(implClassName))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E7%BC%93%E5%AD%98%E4%B8%AD%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20instanceCache.put(implClassName%2C%20implClass.newInstance())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InstantiationException%20%7C%20IllegalAccessException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20errorMsg%20%3D%20String.format(%5C%22%25s%20%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%A4%B1%E8%B4%A5%5C%22%2C%20implClassName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(errorMsg%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20(T)%20instanceCache.get(implClassName)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8A%A0%E8%BD%BD%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20loadClass%3A%20%E9%9C%80%E8%A6%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%20%40return%20java.util.Map%3Cjava.lang.String%2C%20java.lang.Class%20%3C%20%3F%3E%3E%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2022%3A14%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Map%3CString%2C%20Class%3C%3F%3E%3E%20load(Class%3C%3F%3E%20loadClass)%20%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20%7B%7D%20%E7%9A%84%20SPI%5C%22%2C%20loadClass.getName())%3B%5Cn%20%20%20%20%20%20%20%20%2F*%20%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%EF%BC%8C%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84SPI%E4%BC%98%E5%85%88%E7%BA%A7%E9%AB%98%E4%BA%8E%E7%B3%BB%E7%BB%9FSPI%20*%2F%5Cn%20%20%20%20%20%20%20%20Map%3CString%2C%20Class%3C%3F%3E%3E%20keyClassMap%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20scanDir%20%3A%20SCAN_DIRS)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CURL%3E%20resources%20%3D%20ResourceUtil.getResources(scanDir%20%2B%20loadClass.getName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E6%AF%8F%E4%B8%AA%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(URL%20resource%20%3A%20resources)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20InputStreamReader%20inputStreamReader%20%3D%20new%20InputStreamReader(resource.openStream())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20BufferedReader%20bufferedReader%20%3D%20new%20BufferedReader(inputStreamReader)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%90%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20line%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20while%20((line%20%3D%20bufferedReader.readLine())%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%5B%5D%20strArray%20%3D%20line.split(%5C%22%3D%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(strArray.length%20%3E%201)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20key%20%3D%20strArray%5B0%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20className%20%3D%20strArray%5B1%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Class.forName(className)%20%E9%80%9A%E8%BF%87%E7%B1%BB%E7%9A%84%E5%85%A8%E9%99%90%E5%AE%9A%E5%90%8D%20className%20%E5%AE%9E%E4%BE%8B%E5%8C%96%E4%B8%80%E4%B8%AA%E7%B1%BB%20%EF%BC%8C%20%E7%AD%89%E5%90%8C%E4%BA%8E%20new%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20keyClassMap.put(key%2CClass.forName(className))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.error(%5C%22spi%20resource%20load%20error%5C%22%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20loaderMap.put(loadClass.getName()%2CkeyClassMap)%3B%5Cn%20%20%20%20%20%20%20%20return%20keyClassMap%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22SpiLoader%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B107%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Wheb0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="udafe885a" id="udafe885a" style="text-align: left"><span data-lake-id="u9c39cee3" id="u9c39cee3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">上述代码中，虽然提供了 </span><code data-lake-id="ud1bebac9" id="ud1bebac9"><span data-lake-id="uff790dc6" id="uff790dc6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">loadAll</span></code><span data-lake-id="ubd7f8403" id="ubd7f8403" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 方法，扫描所有路径下的文件进行加载，但其实没必要使用。更推荐使用 load 方法，按需加载指定的类。</span></p><p data-lake-id="uf6835940" id="uf6835940" style="text-align: left"><span data-lake-id="u2cde2032" id="u2cde2032" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ufb419bc9" id="ufb419bc9" style="text-align: left"><span data-lake-id="ua7019dc9" id="ua7019dc9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注意，上述代码中获取配置文件是使用了 </span><code data-lake-id="u49af002a" id="u49af002a"><span data-lake-id="u398363fc" id="u398363fc" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ResourceUtil.getResources</span></code><span data-lake-id="u2d4b64c0" id="u2d4b64c0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，而不是通过文件路径获取。因为如果框架作为依赖被引入，是无法得到正确文件路径的。</span></p><p data-lake-id="u52bbbbba" id="u52bbbbba" style="text-align: left"><span data-lake-id="u8aba988e" id="u8aba988e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="vqSEr" id="vqSEr"><span data-lake-id="u8e7ffeb0" id="u8e7ffeb0" style="color: rgb(47, 48, 52)">3）重构序列化器工厂。</span></h4><p data-lake-id="ueb0b10e1" id="ueb0b10e1" style="text-align: left"><span data-lake-id="u4353ea0c" id="u4353ea0c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">之前，我们是通过在工厂中硬编码 HashMap 来存储序列化器和实现类的，有了 SPI 后，就可以改为从 SPI 加载指定的序列化器对象。</span></p><p data-lake-id="ua20ff05a" id="ua20ff05a" style="text-align: left"><span data-lake-id="uc92a6a0b" id="uc92a6a0b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.serializer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.spi.SpiLoader%3B%5Cn%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%B7%A5%E5%8E%82%EF%BC%88%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%AF%B9%E8%B1%A1%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F17%5Cn%20*%2F%5Cnpublic%20class%20SerializerFactory%20%7B%5Cn%20%20%20%20static%7B%5Cn%20%20%20%20%20%20%20%20SpiLoader.load(Serializer.class)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20public%20static%20final%20Serializer%20DEFAULT_SERIALIZER%20%3D%20new%20JdkSerializer()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%20%E6%8C%87%E5%AE%9A%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E4%BB%A3%E5%8F%B7%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.serializer.Serializer%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F17%2021%3A04%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Serializer%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SpiLoader.getInstance(Serializer.class%2Ckey)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22E4MP9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u15a020e0" id="u15a020e0"><span data-lake-id="u4a0ee7b2" id="u4a0ee7b2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用静态代码块，在工厂首次加载时，就会调用 SpiLoader 的 load 方法加载序列化器接口的所有实现类，之后就可以通过调用 getInstance 方法获取指定的实现类对象了。</span></p><p data-lake-id="ud475977f" id="ud475977f"><br></p><h1 data-lake-id="ZbmSh" id="ZbmSh"><span data-lake-id="u61fdb98f" id="u61fdb98f">五、注册中心基本实现</span></h1><h2 data-lake-id="RvxQA" id="RvxQA"><span data-lake-id="u199f6f39" id="u199f6f39">一、需求分析</span></h2><p data-lake-id="ub48df5b7" id="ub48df5b7"><span data-lake-id="uc0a7d42e" id="uc0a7d42e" style="color: rgb(31, 35, 40)">RPC 框架的一个核心模块是注册中心，目的是帮助服务消费者获取到服务提供者的调用地址，而不是将调用地址硬编码到项目中。</span></p><p data-lake-id="uca2fa563" id="uca2fa563"><span data-lake-id="u9a41185c" id="u9a41185c" style="color: rgb(31, 35, 40)">在第一节中，这样一张</span><span data-lake-id="u9aef63a0" id="u9aef63a0" style="color: rgb(31, 35, 40)">图片，注册中心的作用一目了然：</span></p><p data-lake-id="ub36d281b" id="ub36d281b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1711014660642-e362f2f0-cfd8-4a34-bbf3-5f38bc63126e.jpeg%22%2C%22taskId%22%3A%22uc64d4b3d-e09a-4679-a5fa-ee3d907b12a%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221708316408914-198184da-8985-4c8f-b8eb-593e82045881-20240309122414475.jpg%22%2C%22size%22%3A39673%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1498%2C%22originHeight%22%3A596%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%201%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%202%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%20ORDERSERVICE%2C1.1.1.1%20%E6%8F%90%E4%BE%9B%E8%80%85%203%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%20%E6%B6%88%E8%B4%B9%E8%80%85%20ORDERSERVICE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A631%2C%22y%22%3A76%2C%22width%22%3A139%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%22%7D%2C%7B%22x%22%3A1009%2C%22y%22%3A104%2C%22width%22%3A189%2C%22height%22%3A37%2C%22text%22%3A%221%2C%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A253%2C%22y%22%3A105%2C%22width%22%3A191%2C%22height%22%3A36%2C%22text%22%3A%222%2C%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A136%2C%22width%22%3A337%2C%22height%22%3A35%2C%22text%22%3A%22ORDERSERVICE%2C1.1.1.1%22%7D%2C%7B%22x%22%3A1213%2C%22y%22%3A379%2C%22width%22%3A103%2C%22height%22%3A37%2C%22text%22%3A%22%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A585%2C%22y%22%3A406%2C%22width%22%3A196%2C%22height%22%3A41%2C%22text%22%3A%223%2C%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A111%2C%22y%22%3A410%2C%22width%22%3A103%2C%22height%22%3A35%2C%22text%22%3A%22%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A1164%2C%22y%22%3A444%2C%22width%22%3A205%2C%22height%22%3A30%2C%22text%22%3A%22ORDERSERVICE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u2ffdc0b2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u2a25ad72" id="u2a25ad72"><span data-lake-id="ue3e4432a" id="ue3e4432a" style="color: rgb(31, 35, 40)">该节先来实现一个具有基本功能的注册中心，跑通注册中心的流程，之后再优化。</span></p><p data-lake-id="u1cec2762" id="u1cec2762"><span data-lake-id="ue4569aa9" id="ue4569aa9">​</span><br></p><h2 data-lake-id="mlZ1K" id="mlZ1K"><span data-lake-id="u5d8f57f9" id="u5d8f57f9" style="color: rgba(0, 0, 0, 0.85)">二、设计方案</span></h2><h3 data-lake-id="WZZO3" id="WZZO3"><span data-lake-id="u7ce3ad84" id="u7ce3ad84" style="color: rgba(0, 0, 0, 0.85)">注册中心核心能力</span></h3><p data-lake-id="u3c04dd48" id="u3c04dd48"><span data-lake-id="ubac10690" id="ubac10690" style="color: rgb(31, 35, 40)">先明确注册中心的几个实现关键（核心能力）：</span></p><ol list="ub235e040"><li fid="u061d8660" data-lake-id="u1a2c225f" id="u1a2c225f"><span data-lake-id="u1a56ffa6" id="u1a56ffa6" style="color: rgb(31, 35, 40)">数据分布式存储：集中的注册信息数据存储、读取和共享</span></li><li fid="u061d8660" data-lake-id="u845d7493" id="u845d7493"><span data-lake-id="ua64beb3f" id="ua64beb3f" style="color: rgb(31, 35, 40)">服务注册：服务提供者上报服务信息到注册中心</span></li><li fid="u061d8660" data-lake-id="u6ddd78f2" id="u6ddd78f2"><span data-lake-id="u8ef14d6a" id="u8ef14d6a" style="color: rgb(31, 35, 40)">服务发现：服务消费者从注册中心拉取服务信息</span></li><li fid="u061d8660" data-lake-id="uc4e8c65e" id="uc4e8c65e"><span data-lake-id="u8daa0318" id="u8daa0318" style="color: rgb(31, 35, 40)">心跳检测：定期检查服务提供者的存活状态</span></li><li fid="u061d8660" data-lake-id="u8b3a5ee4" id="u8b3a5ee4"><span data-lake-id="ue3894715" id="ue3894715" style="color: rgb(31, 35, 40)">服务注销：手动剔除节点、或者自动剔除失效节点</span></li><li fid="u061d8660" data-lake-id="u0beb6686" id="u0beb6686"><span data-lake-id="u8e4ed1f1" id="u8e4ed1f1" style="color: rgb(31, 35, 40)">更多优化点：比如注册中心本身的容错、服务消费者缓存等。</span></li></ol><h3 data-lake-id="bKjBR" id="bKjBR"><span data-lake-id="uba3437c1" id="uba3437c1" style="color: rgba(0, 0, 0, 0.85)">技术选型</span></h3><p data-lake-id="uf3528f45" id="uf3528f45"><span data-lake-id="u86d9f03e" id="u86d9f03e" style="color: rgb(31, 35, 40)">明确了注册中心的核心能力后，可以根据这些能力进行技术选型。</span></p><p data-lake-id="u7ff3cb83" id="u7ff3cb83"><span data-lake-id="u01793474" id="u01793474" style="color: rgb(31, 35, 40)">第一点是最重要的，</span><span data-lake-id="uad11e49a" id="uad11e49a" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">首先需要一个能够集中存储和读取数据的中间件。此外，它还需要有数据过期、数据监听的能力，便于移除失效节点、更新节点列表等。</span></p><p data-lake-id="u5cd4d5d4" id="u5cd4d5d4"><span data-lake-id="u2b9cca20" id="u2b9cca20" style="color: rgb(31, 35, 40)">此外，对于注册中心的技术选型，我们还要考虑它的性能、高可用性、高可靠性、稳定性、数据一致性、社区的生态和活跃度等。注册中心的可用性和可靠性尤其重要，因为一旦注册中心本身都挂了，会影响到所有服务的调用。</span></p><p data-lake-id="u44b63b46" id="u44b63b46"><span data-lake-id="u03024ef5" id="u03024ef5" style="color: rgb(31, 35, 40)">主流的注册中心实现中间件有 ZooKeeper、Redis 等。</span><span data-lake-id="u5abfe132" id="u5abfe132" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">在该 RPC 框架中，会使用一种更新颖的、更适合存储元信息（注册信息）的云原生中间件 Etcd，来实现注册中心</span><span data-lake-id="u2335af24" id="u2335af24" style="color: rgb(31, 35, 40)">。</span></p><h3 data-lake-id="j8v6f" id="j8v6f"><span data-lake-id="ufdf28af1" id="ufdf28af1" style="color: rgba(0, 0, 0, 0.85)">Etcd 入门</span></h3><h4 data-lake-id="nVGAq" id="nVGAq"><span data-lake-id="u8fbadb6c" id="u8fbadb6c" style="color: rgba(0, 0, 0, 0.85)">Etcd 介绍</span></h4><p data-lake-id="u52ad6142" id="u52ad6142"><span data-lake-id="uece4de8d" id="uece4de8d" style="color: rgb(31, 35, 40)">GitHub：</span><a href="https://github.com/etcd-io/etcd" target="_blank" data-lake-id="u22a1afd8" id="u22a1afd8"><span data-lake-id="uaf4f34d0" id="uaf4f34d0">https://github.com/etcd-io/etcd</span></a></p><p data-lake-id="ua5c942a7" id="ua5c942a7"><span data-lake-id="u02a11703" id="u02a11703" style="color: rgb(31, 35, 40)">Etcd 是一个 Go 语言实现的、开源的、</span><strong><span data-lake-id="u69094523" id="u69094523" style="color: rgb(31, 35, 40)">分布式</span></strong><span data-lake-id="ubaa21b82" id="ubaa21b82" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u8acd4bca" id="u8acd4bca" style="color: rgb(31, 35, 40)">的键值存储系统，它主要用于分布式系统中的服务发现、配置管理和分布式锁等场景。</span></p><p data-lake-id="u924af90d" id="u924af90d"><span data-lake-id="udeaf3b38" id="udeaf3b38" style="color: rgb(31, 35, 40)">提到 Go 语言实现，Etcd 的性能是很高的，而且它和云原生有着密切的关系，通常被作为云原生应用的基础设施，存储一些元信息。比如经典的容器管理平台 k8s 就使用了 Etcd 来存储集群配置信息、状态信息、节点信息等。</span></p><p data-lake-id="u3e0a2580" id="u3e0a2580"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711014771815-93dd2506-2a64-463c-8993-2d6fa27cb50f.png%22%2C%22taskId%22%3A%22u0db45a9f-27e8-4ebb-8dfd-7a05957e53d%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709612725144-4f9456d5-e559-42b1-9075-ee6e349eeebd-20240309122414503.png%22%2C%22size%22%3A28456%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A385%2C%22originHeight%22%3A489%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ALL%20CLOUD%20NATIVE%20INFRASTRUCTURE%20ETCD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A62%2C%22y%22%3A14%2C%22width%22%3A144%2C%22height%22%3A16%2C%22text%22%3A%22ALL%20CLOUD%20NATIVE%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A35%2C%22width%22%3A122%2C%22height%22%3A15%2C%22text%22%3A%22INFRASTRUCTURE%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A353%2C%22width%22%3A52%2C%22height%22%3A20%2C%22text%22%3A%22ETCD%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e7e7e7%22%2C%22id%22%3A%22u2f4167fb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u5030440b" id="u5030440b"><span data-lake-id="ub5c8799d" id="ub5c8799d" style="color: rgb(31, 35, 40)">除了性能之外，</span><span data-lake-id="uf9a1b4c0" id="uf9a1b4c0" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">Etcd 采用 Raft 一致性算法来保证数据的一致性和可靠性，具有高可用性、强一致性、分布式特性等特点。</span></p><p data-lake-id="u439ea78b" id="u439ea78b"><span data-lake-id="u1ed8bc42" id="u1ed8bc42" style="color: rgb(31, 35, 40)">最重要的是，Etcd 还非常简单易用！</span><span data-lake-id="u75075db5" id="u75075db5" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">提供了简单的 API、数据的过期机制、数据的监听和通知机制等，完美满足注册中心的实现诉求。</span></p><p data-lake-id="u9d22d783" id="u9d22d783"><span data-lake-id="u098b8f18" id="u098b8f18" style="color: rgb(31, 35, 40)">Etcd 的入门成本是极低的，只要你学过 Redis、ZooKeeper 或者对象存储中的一个，就能够很快理解 Etcd 并投入实战运用。我们学知识的一个技巧，就是把新知识和老知识进行类比和关联。</span></p><h4 data-lake-id="Wx1ki" id="Wx1ki"><span data-lake-id="uf7f16248" id="uf7f16248" style="color: rgba(0, 0, 0, 0.85)">Etcd 数据结构与特性</span></h4><p data-lake-id="u4ba9459c" id="u4ba9459c"><span data-lake-id="ufa06589b" id="ufa06589b" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">Etcd 在其数据模型和组织结构上更接近于 ZooKeeper 和对象存储，而不是 Redis。它使用层次化的键值对来存储数据，支持类似于文件系统路径的层次结构，能够很灵活地单 key 查询、按前缀查询、按范围查询。</span></p><p data-lake-id="u0af5fdf1" id="u0af5fdf1"><span data-lake-id="u827839fe" id="u827839fe" style="color: rgb(31, 35, 40)">如下图：</span></p><p data-lake-id="u501c9175" id="u501c9175"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711014844294-2a5de1e0-7be3-43e5-ad66-707d0b9d2ddd.png%22%2C%22taskId%22%3A%22ubdd11dc2-b7b0-4a02-9895-f55fd363ee9%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709614444902-ca92be42-56fc-4e40-899e-7134ab31fbbd-20240309122414692.png%22%2C%22size%22%3A83944%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1650%2C%22originHeight%22%3A923%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ETCD%20KEEPER%20V3%20127.0.0.1%3A2379%20%E6%A0%91%E5%BD%A2%E5%B1%95%E7%A4%BA%20%2FMYSERVICE%3A1.0%2FLOCALHOST%3A1234%20NODES%20I%5C%22SERVICENAME%5C%22.%5C%22MYSERVICE%5C%22%2C%5C%22SERVICEVERSION%5C%22%3A%5C%221.0%5C%22%2C%5C%22I.0%5C%22%2C%5C%22SERVICEADDRESS%5C%22%3A%5C%22LOCALHOST%3A1234%5C%22%20MYSERVICE%3A1.0%20LOCALHOST%3A1234%20LOCALHOST%3A12345%20MYSERVICE%3A2.0%20LOCALHOST%3A1234%20TTL%3A980%20MODREVISION%20%3A18%20CREATEREVISION%20%3A18%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A12%2C%22y%22%3A22%2C%22width%22%3A242%2C%22height%22%3A25%2C%22text%22%3A%22ETCD%20KEEPER%20V3%22%7D%2C%7B%22x%22%3A68%2C%22y%22%3A79%2C%22width%22%3A116%2C%22height%22%3A18%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A532%2C%22y%22%3A89%2C%22width%22%3A98%2C%22height%22%3A26%2C%22text%22%3A%22%E6%A0%91%E5%BD%A2%E5%B1%95%E7%A4%BA%22%7D%2C%7B%22x%22%3A591%2C%22y%22%3A141%2C%22width%22%3A274%2C%22height%22%3A22%2C%22text%22%3A%22%2FMYSERVICE%3A1.0%2FLOCALHOST%3A1234%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A144%2C%22width%22%3A55%2C%22height%22%3A14%2C%22text%22%3A%22NODES%22%7D%2C%7B%22x%22%3A662%2C%22y%22%3A186%2C%22width%22%3A836%2C%22height%22%3A24%2C%22text%22%3A%22I%5C%22SERVICENAME%5C%22.%5C%22MYSERVICE%5C%22%2C%5C%22SERVICEVERSION%5C%22%3A%5C%221.0%5C%22%2C%5C%22I.0%5C%22%2C%5C%22SERVICEADDRESS%5C%22%3A%5C%22LOCALHOST%3A1234%5C%22%22%7D%2C%7B%22x%22%3A91%2C%22y%22%3A217%2C%22width%22%3A117%2C%22height%22%3A18%2C%22text%22%3A%22MYSERVICE%3A1.0%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A245%2C%22width%22%3A125%2C%22height%22%3A19%2C%22text%22%3A%22LOCALHOST%3A1234%22%7D%2C%7B%22x%22%3A111%2C%22y%22%3A275%2C%22width%22%3A128%2C%22height%22%3A17%2C%22text%22%3A%22LOCALHOST%3A12345%22%7D%2C%7B%22x%22%3A91%2C%22y%22%3A303%2C%22width%22%3A118%2C%22height%22%3A17%2C%22text%22%3A%22MYSERVICE%3A2.0%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A329%2C%22width%22%3A135%2C%22height%22%3A19%2C%22text%22%3A%22LOCALHOST%3A1234%22%7D%2C%7B%22x%22%3A591%2C%22y%22%3A897%2C%22width%22%3A76%2C%22height%22%3A19%2C%22text%22%3A%22TTL%3A980%22%7D%2C%7B%22x%22%3A860%2C%22y%22%3A900%2C%22width%22%3A137%2C%22height%22%3A15%2C%22text%22%3A%22MODREVISION%20%3A18%22%7D%2C%7B%22x%22%3A692%2C%22y%22%3A900%2C%22width%22%3A146%2C%22height%22%3A16%2C%22text%22%3A%22CREATEREVISION%20%3A18%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfcfc%22%2C%22id%22%3A%22u812c7c11%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u814f36c9" id="u814f36c9"><span data-lake-id="u4dd7cdf1" id="u4dd7cdf1" style="color: rgb(31, 35, 40)">Etcd 的核心数据结构包括：</span></p><ol list="u3fd8890c"><li fid="ub2d47eba" data-lake-id="ucf92b75a" id="ucf92b75a"><span data-lake-id="u79d06357" id="u79d06357" style="color: rgb(31, 35, 40); background-color: #117CEE">Key（键）：Etcd 中的基本数据单元，类似于文件系统中的文件名。每个键都唯一标识一个值，并且可以包含子键，形成类似于路径的层次结构。</span></li><li fid="ub2d47eba" data-lake-id="uf4935030" id="uf4935030"><span data-lake-id="u47c049ca" id="u47c049ca" style="color: rgb(31, 35, 40)">Value（值）：与键关联的数据，可以是任意类型的数据，通常是字符串形式。</span></li></ol><p data-lake-id="u7e811e5e" id="u7e811e5e"><span data-lake-id="u5c00e315" id="u5c00e315" style="color: rgb(31, 35, 40)">只有 key、value，是不是比 Redis 好理解多了？我们可以将数据序列化后写入 value。</span></p><p data-lake-id="uae0c3b22" id="uae0c3b22"><span data-lake-id="u637c7113" id="u637c7113" style="color: rgb(31, 35, 40)">Etcd 有很多核心特性，其中，应用较多的特性是：</span></p><ol list="u2819330f"><li fid="u9f343169" data-lake-id="uf56b96c2" id="uf56b96c2"><span data-lake-id="u3b2ed42c" id="u3b2ed42c" style="color: rgb(31, 35, 40)">Lease（租约）：用于对键值对进行 TTL 超时设置，即设置键值对的过期时间。当租约过期时，相关的键值对将被自动删除。</span></li><li fid="u9f343169" data-lake-id="ue3f4b2ba" id="ue3f4b2ba"><span data-lake-id="u60e9fb1b" id="u60e9fb1b" style="color: rgb(31, 35, 40)">Watch（监听）：可以监视特定键的变化，当键的值发生变化时，会触发相应的通知。</span></li></ol><p data-lake-id="u1136371b" id="u1136371b"><span data-lake-id="u854e41fa" id="u854e41fa" style="color: rgb(31, 35, 40)">有了这些特性，我们就能够实现注册中心的服务提供者节点过期和监听了。</span></p><p data-lake-id="ue263008d" id="ue263008d"><span data-lake-id="udd1256f4" id="udd1256f4" style="color: rgb(31, 35, 40)">此外，Etcd 的一大优势就是能够保证数据的强一致性。</span></p><h4 data-lake-id="EQ5dG" id="EQ5dG"><span data-lake-id="u29ab9ed2" id="u29ab9ed2" style="color: rgba(0, 0, 0, 0.85)">Etcd 如何保证数据一致性？</span></h4><p data-lake-id="ub9a5f359" id="ub9a5f359"><span data-lake-id="ue4765312" id="ue4765312" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">从表层来看，Etcd 支持事务操作，能够保证数据一致性。</span></p><p data-lake-id="u30f92540" id="u30f92540"><span data-lake-id="ubb084354" id="ubb084354" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">从底层来看，Etcd 使用 Raft 一致性算法来保证数据的一致性。</span></p><p data-lake-id="u1a535fd9" id="u1a535fd9"><span data-lake-id="u4df2971d" id="u4df2971d" style="color: rgb(31, 35, 40)">Raft 是一种分布式一致性算法，它确保了分布式系统中的所有节点在任何时间点都能达成一致的数据视图。</span></p><blockquote data-lake-id="u7e53bb03" id="u7e53bb03" class="lake-alert lake-alert-color2"><p data-lake-id="u06234110" id="u06234110"><span data-lake-id="u46f88dac" id="u46f88dac" style="color: rgb(31, 35, 40)">具体来说，Raft 算法通过选举机制选举出一个领导者（Leader）节点，领导者负责接收客户端的写请求，并将写操作复制到其他节点上。当客户端发送写请求时，领导者首先将写操作写入自己的日志中，并将写操作的日志条目分发给其他节点，其他节点收到日志后也将其写入自己的日志中。一旦 </span><strong><span data-lake-id="u70bd1862" id="u70bd1862" style="color: rgb(31, 35, 40)">大多数节点</span></strong><span data-lake-id="u53291c63" id="u53291c63" style="color: rgb(31, 35, 40)">（即半数以上的节点）都将该日志条目成功写入到自己的日志中，该日志条目就被视为已提交，领导者会向客户端发送成功响应。在领导者发送成功响应后，该写操作就被视为已提交，从而保证了数据的一致性。</span></p><p data-lake-id="uedbf31c2" id="uedbf31c2"><span data-lake-id="uc61d93db" id="uc61d93db" style="color: rgb(31, 35, 40)">如果领导者节点宕机或失去联系，Raft 算法会在其他节点中</span><span data-lake-id="ub9c56d78" id="ub9c56d78" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u8a3e7cba" id="u8a3e7cba" style="color: rgb(31, 35, 40)">选举出新的领导者</span></strong><span data-lake-id="u617307cf" id="u617307cf" style="color: rgb(31, 35, 40)">，从而保证系统的可用性和一致性。新的领导者会继续接收客户端的写请求，并负责将写操作复制到其他节点上，从而保持数据的一致性。</span></p></blockquote><p data-lake-id="u754970bf" id="u754970bf"><span data-lake-id="uacfe6059" id="uacfe6059" style="color: rgb(31, 35, 40)">可以使用官方提供的 Etcd Playground 来可视化操作 Etcd，便于学习。</span></p><p data-lake-id="u41dd4258" id="u41dd4258"><span data-lake-id="u4b7f3544" id="u4b7f3544" style="color: rgb(31, 35, 40)">Playground 地址：</span><a href="http://play.etcd.io/play" target="_blank" data-lake-id="ud4e91f0f" id="ud4e91f0f"><span data-lake-id="u1e0720a5" id="u1e0720a5">http://play.etcd.io/play</span></a></p><p data-lake-id="u18b81d40" id="u18b81d40"><span data-lake-id="u4922ea3f" id="u4922ea3f" style="color: rgb(31, 35, 40)">比如可以尝试停止主节点，其余节点为从节点：</span></p><p data-lake-id="u4e2e57cd" id="u4e2e57cd"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019307789-c854eb87-eb60-4d73-a2f6-6aa13136feb4.png%22%2C%22taskId%22%3A%22ue0d3e1e9-7403-4e38-a5be-5d7adf6d678%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709614774759-80c4cb78-e589-4749-9f25-8b291170893a-20240309122414914.png%22%2C%22size%22%3A158941%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2382%2C%22originHeight%22%3A948%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163614)%204%20USER(S)ONLINE%20DISCONNECT%20NODE1%20NODE1%20NODE2%20(HASH%3B%202435058498)%20RESTART%20STOP%20(HASH%3A)%20ID%3A32E8C688BCFEC04D%20NODE2%20NODE5%20ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2389%20(HASH%3A2435058498)%20STATE%3ALEADER%20DB%20SIZE%3A8.4%20MB%20HASH%3A2435058498%20NODEL%20HAS%20BEEN%20HEALTHY%20(SINCE%2015%20HOURS%20AGO)%20NODE4%20NODE3%20(HASH%3A)%20(HASH%3A2435058498)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A543%2C%22y%22%3A45%2C%22width%22%3A391%2C%22height%22%3A35%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163614)%22%7D%2C%7B%22x%22%3A274%2C%22y%22%3A49%2C%22width%22%3A202%2C%22height%22%3A27%2C%22text%22%3A%224%20USER(S)ONLINE%22%7D%2C%7B%22x%22%3A56%2C%22y%22%3A50%2C%22width%22%3A149%2C%22height%22%3A27%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A467%2C%22y%22%3A227%2C%22width%22%3A81%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1589%2C%22y%22%3A230%2C%22width%22%3A86%2C%22height%22%3A26%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1909%2C%22y%22%3A232%2C%22width%22%3A91%2C%22height%22%3A27%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A464%2C%22y%22%3A264%2C%22width%22%3A206%2C%22height%22%3A21%2C%22text%22%3A%22(HASH%3B%202435058498)%22%7D%2C%7B%22x%22%3A1838%2C%22y%22%3A364%2C%22width%22%3A100%2C%22height%22%3A27%2C%22text%22%3A%22RESTART%22%7D%2C%7B%22x%22%3A1672%2C%22y%22%3A367%2C%22width%22%3A62%2C%22height%22%3A28%2C%22text%22%3A%22STOP%22%7D%2C%7B%22x%22%3A138%2C%22y%22%3A429%2C%22width%22%3A80%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1368%2C%22y%22%3A430%2C%22width%22%3A276%2C%22height%22%3A25%2C%22text%22%3A%22ID%3A32E8C688BCFEC04D%22%7D%2C%7B%22x%22%3A755%2C%22y%22%3A445%2C%22width%22%3A85%2C%22height%22%3A28%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A127%2C%22y%22%3A473%2C%22width%22%3A84%2C%22height%22%3A24%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A1365%2C%22y%22%3A477%2C%22width%22%3A426%2C%22height%22%3A28%2C%22text%22%3A%22ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2389%22%7D%2C%7B%22x%22%3A762%2C%22y%22%3A481%2C%22width%22%3A211%2C%22height%22%3A27%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A1368%2C%22y%22%3A528%2C%22width%22%3A193%2C%22height%22%3A27%2C%22text%22%3A%22STATE%3ALEADER%22%7D%2C%7B%22x%22%3A1366%2C%22y%22%3A576%2C%22width%22%3A229%2C%22height%22%3A26%2C%22text%22%3A%22DB%20SIZE%3A8.4%20MB%22%7D%2C%7B%22x%22%3A1368%2C%22y%22%3A622%2C%22width%22%3A259%2C%22height%22%3A30%2C%22text%22%3A%22HASH%3A2435058498%22%7D%2C%7B%22x%22%3A1536%2C%22y%22%3A702%2C%22width%22%3A524%2C%22height%22%3A34%2C%22text%22%3A%22NODEL%20HAS%20BEEN%20HEALTHY%20(SINCE%2015%20HOURS%20AGO)%22%7D%2C%7B%22x%22%3A204%2C%22y%22%3A767%2C%22width%22%3A85%2C%22height%22%3A24%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A682%2C%22y%22%3A768%2C%22width%22%3A85%2C%22height%22%3A22%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A202%2C%22y%22%3A802%2C%22width%22%3A84%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A647%2C%22y%22%3A802%2C%22width%22%3A208%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcf9f9%22%2C%22id%22%3A%22u6295034c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="u4fdb9b38" id="u4fdb9b38">​</span></p><p data-lake-id="u1eba29c5" id="u1eba29c5"><span data-lake-id="u3f32cbf9" id="u3f32cbf9" style="color: rgb(31, 35, 40)">然后会发现主节点挂掉后，并没有新的从节点成为主节点，因为还剩 2 个节点，一人一票，谁都不服谁！这种现象也称为 “脑裂”。</span></p><p data-lake-id="u7357c261" id="u7357c261"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019319362-75bcd642-bed7-4f5d-88f2-cdc9e9da4b63.png%22%2C%22taskId%22%3A%22uedb69af6-86ac-40c9-a173-d67355ab921%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709614825825-f01ff8f0-044d-4bdb-824a-0c4466894618-20240309122415148.png%22%2C%22size%22%3A156093%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2412%2C%22originHeight%22%3A952%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DISCONNECT%20UP%203%20YEARS%20AGO(VISITS%20163617)%204%20USER(S)ONLINE%20NODE1%20NODE1%20NODE2%20(HASH%3A)%20RESTART%20STOP%20(HASH%3A)%20ID%3A32E8C688BCFEC04D%20NODE2%20NODE5%20ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2389%20(HASH%3A%202435058498)%20STATE%3ASTOPPED%20DB%20SIZE%3A%20HASH%3A%20NODEL%20WAS%20NOT%20REACHABLE%20WHILE%20GETTING%20HASH%20(1%20SECOND%20AGO%20-%20RPC%20ERROR%3A%20CODE%20-%20DEADLINEEXCEEDED%20DESC%20-%20CONTEXT%20DEADLINE%20EXCEEDED)%20NODE4%20NODE3%20(HASH%3A2435058498)%20(HASH%3A)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A66%2C%22y%22%3A56%2C%22width%22%3A151%2C%22height%22%3A32%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A554%2C%22y%22%3A55%2C%22width%22%3A396%2C%22height%22%3A36%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163617)%22%7D%2C%7B%22x%22%3A283%2C%22y%22%3A58%2C%22width%22%3A202%2C%22height%22%3A29%2C%22text%22%3A%224%20USER(S)ONLINE%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A239%2C%22width%22%3A77%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1602%2C%22y%22%3A241%2C%22width%22%3A85%2C%22height%22%3A27%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1924%2C%22y%22%3A242%2C%22width%22%3A86%2C%22height%22%3A25%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A475%2C%22y%22%3A272%2C%22width%22%3A79%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1851%2C%22y%22%3A375%2C%22width%22%3A97%2C%22height%22%3A28%2C%22text%22%3A%22RESTART%22%7D%2C%7B%22x%22%3A1682%2C%22y%22%3A377%2C%22width%22%3A63%2C%22height%22%3A27%2C%22text%22%3A%22STOP%22%7D%2C%7B%22x%22%3A146%2C%22y%22%3A439%2C%22width%22%3A85%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1382%2C%22y%22%3A440%2C%22width%22%3A266%2C%22height%22%3A25%2C%22text%22%3A%22ID%3A32E8C688BCFEC04D%22%7D%2C%7B%22x%22%3A764%2C%22y%22%3A456%2C%22width%22%3A82%2C%22height%22%3A26%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A484%2C%22width%22%3A83%2C%22height%22%3A26%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A1381%2C%22y%22%3A489%2C%22width%22%3A422%2C%22height%22%3A27%2C%22text%22%3A%22ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2389%22%7D%2C%7B%22x%22%3A774%2C%22y%22%3A492%2C%22width%22%3A208%2C%22height%22%3A27%2C%22text%22%3A%22(HASH%3A%202435058498)%22%7D%2C%7B%22x%22%3A1383%2C%22y%22%3A539%2C%22width%22%3A207%2C%22height%22%3A23%2C%22text%22%3A%22STATE%3ASTOPPED%22%7D%2C%7B%22x%22%3A1385%2C%22y%22%3A587%2C%22width%22%3A114%2C%22height%22%3A25%2C%22text%22%3A%22DB%20SIZE%3A%22%7D%2C%7B%22x%22%3A1382%2C%22y%22%3A637%2C%22width%22%3A71%2C%22height%22%3A25%2C%22text%22%3A%22HASH%3A%22%7D%2C%7B%22x%22%3A1348%2C%22y%22%3A719%2C%22width%22%3A921%2C%22height%22%3A30%2C%22text%22%3A%22NODEL%20WAS%20NOT%20REACHABLE%20WHILE%20GETTING%20HASH%20(1%20SECOND%20AGO%20-%20RPC%20ERROR%3A%20CODE%20-%22%7D%2C%7B%22x%22%3A1502%2C%22y%22%3A773%2C%22width%22%3A606%2C%22height%22%3A27%2C%22text%22%3A%22DEADLINEEXCEEDED%20DESC%20-%20CONTEXT%20DEADLINE%20EXCEEDED)%22%7D%2C%7B%22x%22%3A214%2C%22y%22%3A776%2C%22width%22%3A85%2C%22height%22%3A26%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A693%2C%22y%22%3A778%2C%22width%22%3A86%2C%22height%22%3A22%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A656%2C%22y%22%3A812%2C%22width%22%3A208%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A214%2C%22y%22%3A812%2C%22width%22%3A81%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcf9f9%22%2C%22id%22%3A%22ud5bfb3be%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="uebd7b1d5" id="uebd7b1d5"><br /></span><span data-lake-id="uc583210b" id="uc583210b"> </span><span data-lake-id="ue729b271" id="ue729b271" style="color: rgb(31, 35, 40)">然后启动 node4，会发现 node3 成为了主节点，因为 3 个节点，不会出现选举主节点时的平票情况。</span></p><p data-lake-id="u2e8b117a" id="u2e8b117a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019335571-93c5c940-da8c-45fc-9c06-2c0b61dbbcc4.png%22%2C%22taskId%22%3A%22u7d6f2ee9-c9bc-4adc-8591-5f47c0f1af4%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709614912176-91d670c9-1774-43ad-b942-2e9266360c57-20240309122415292.png%22%2C%22size%22%3A160092%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2408%2C%22originHeight%22%3A974%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%224%20USER(S)%20ONLINE%20UP%203%20YEARS%20AGO(VISITS%20163618)%20DISCONNECT%20NODE1%20NODE4%20NODE3%20(HASH%3A)%20STOP%20RESTART%20ID%3AE3C1B452B3DA14B8%20(HASH%3A)%20NODE2%20NODE5%20ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2393%20(HASH%3A2435058498)%20STATE%3ALEADER%20DB%20SIZE%3A7.6%20MB%20HASH%3A2435058498%20NODE3%20HAS%20BEEN%20HEALTHY(SINCE%206%20HOURS%20AGO)%20NODE3%20NODE4%20(HASH%3B2435058498)%20(HASH%3A2435058498%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A296%2C%22y%22%3A75%2C%22width%22%3A200%2C%22height%22%3A30%2C%22text%22%3A%224%20USER(S)%20ONLINE%22%7D%2C%7B%22x%22%3A565%2C%22y%22%3A77%2C%22width%22%3A389%2C%22height%22%3A29%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163618)%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A77%2C%22width%22%3A149%2C%22height%22%3A28%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A489%2C%22y%22%3A255%2C%22width%22%3A79%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1933%2C%22y%22%3A261%2C%22width%22%3A89%2C%22height%22%3A25%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A1613%2C%22y%22%3A262%2C%22width%22%3A87%2C%22height%22%3A25%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A292%2C%22width%22%3A85%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1693%2C%22y%22%3A395%2C%22width%22%3A63%2C%22height%22%3A29%2C%22text%22%3A%22STOP%22%7D%2C%7B%22x%22%3A1857%2C%22y%22%3A395%2C%22width%22%3A102%2C%22height%22%3A26%2C%22text%22%3A%22RESTART%22%7D%2C%7B%22x%22%3A1385%2C%22y%22%3A457%2C%22width%22%3A273%2C%22height%22%3A24%2C%22text%22%3A%22ID%3AE3C1B452B3DA14B8%22%7D%2C%7B%22x%22%3A156%2C%22y%22%3A457%2C%22width%22%3A83%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A774%2C%22y%22%3A473%2C%22width%22%3A88%2C%22height%22%3A28%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A149%2C%22y%22%3A502%2C%22width%22%3A79%2C%22height%22%3A24%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A1386%2C%22y%22%3A507%2C%22width%22%3A428%2C%22height%22%3A24%2C%22text%22%3A%22ENDPOINT%3AHTTP%3A%2F%2FLOCALHOST%3A2393%22%7D%2C%7B%22x%22%3A784%2C%22y%22%3A507%2C%22width%22%3A211%2C%22height%22%3A31%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A1389%2C%22y%22%3A556%2C%22width%22%3A189%2C%22height%22%3A24%2C%22text%22%3A%22STATE%3ALEADER%22%7D%2C%7B%22x%22%3A1388%2C%22y%22%3A602%2C%22width%22%3A224%2C%22height%22%3A27%2C%22text%22%3A%22DB%20SIZE%3A7.6%20MB%22%7D%2C%7B%22x%22%3A1391%2C%22y%22%3A650%2C%22width%22%3A257%2C%22height%22%3A29%2C%22text%22%3A%22HASH%3A2435058498%22%7D%2C%7B%22x%22%3A1561%2C%22y%22%3A738%2C%22width%22%3A510%2C%22height%22%3A25%2C%22text%22%3A%22NODE3%20HAS%20BEEN%20HEALTHY(SINCE%206%20HOURS%20AGO)%22%7D%2C%7B%22x%22%3A704%2C%22y%22%3A795%2C%22width%22%3A80%2C%22height%22%3A24%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A224%2C%22y%22%3A796%2C%22width%22%3A80%2C%22height%22%3A24%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A223%2C%22y%22%3A832%2C%22width%22%3A208%2C%22height%22%3A26%2C%22text%22%3A%22(HASH%3B2435058498)%22%7D%2C%7B%22x%22%3A665%2C%22y%22%3A831%2C%22width%22%3A201%2C%22height%22%3A21%2C%22text%22%3A%22(HASH%3A2435058498%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfafa%22%2C%22id%22%3A%22u661776f7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="Acu5w" id="Acu5w"><span data-lake-id="u5345a2ba" id="u5345a2ba" style="color: rgba(0, 0, 0, 0.85)">Etcd 基本操作</span></h4><p data-lake-id="u3b562b11" id="u3b562b11"><span data-lake-id="u86e5bc0b" id="u86e5bc0b" style="color: rgb(31, 35, 40)">和所有数据存储中间件一样，基本操作无非就是：增删改查。</span></p><p data-lake-id="uaf76532c" id="uaf76532c"><span data-lake-id="u73b9f58c" id="u73b9f58c" style="color: rgb(31, 35, 40)">可以用可视化界面模拟操作，比如 write 写数据（更新数据）：</span></p><p data-lake-id="u8b011bac" id="u8b011bac"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019359612-fc2fc8a8-eeb4-4d74-96fd-f914a8134cd1.png%22%2C%22taskId%22%3A%22ubafcc11b-cb28-456f-a0ce-198ad8c0660%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709614483503-fc49036d-7cd3-4c06-9260-d9f51c93bd2e-20240309122415468.png%22%2C%22size%22%3A262124%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2438%2C%22originHeight%22%3A1376%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DISCONNECT%20UP%203%20YEARS%20AGO(VISITS%20163614)%204%20USER(S)ONLINE%20%3E%20NODE1%20DELETE%20WRITE%20READ%20(HASH%3B%202435058498)%20NODE1%20NODE5%20NODE2%20NODE4%20NODE3%20ENDPOINTS%3A%20(HASH%3A)%20NODE2%20NODE5%20SUBMIT%20(HASH%3B2435058498)%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%20STRESS%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU%20NODE3%20NODE4%20(HASH%3A)%20(HASH%3A2435058498)%20'WRITE'%20(TOOK%201MS)%20SUCCESS%20(%20%5B2024-03-05%2012%3A33%3A30%20OK%5DHELLOWORLD!%20%5B2024-03-05%2012%3A33%3A30%20INFO%5DTHIS%20IS%20AN%20ACTUAL%20ETCD%20CLUSTER.%20%5B2024-03-05%2012%3A33%3A30%20WARN%5DIPS%20AND%20USER%20AGENTS%20ARE%20USED%20ONLY%20TO%20PREVENT%20ABUSE.%20%5B2024-03-05%2012%3A33%3A30%20INFO%5DCONNECTED%20TO%20BACKEND%20PLAY.ETCD.IO%3A2200%20(SELECTED%20ENDPOINTS%3AHTTP%3A%2F%2FLOCALHOST%3A2389)%20%5B2024-03-05%2012%3A49%3A14%20OK%5DREQUESTED%20RITE%20%5C%22%20%5B2024-03-05%2012%3A49%3A15%20OK%5D'WRITE%201MS%3E%20(TOOK%20%E7%A8%8B%E5%BA%8F....VALUE%3A%E7%BC%96%E7%A8%8B....)%20(KEY%3A%20%5B2024-03-05%2012%3A49%3A15%20OK%5D'WRITE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A75%2C%22y%22%3A59%2C%22width%22%3A153%2C%22height%22%3A32%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A564%2C%22y%22%3A57%2C%22width%22%3A392%2C%22height%22%3A36%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163614)%22%7D%2C%7B%22x%22%3A291%2C%22y%22%3A59%2C%22width%22%3A204%2C%22height%22%3A32%2C%22text%22%3A%224%20USER(S)ONLINE%22%7D%2C%7B%22x%22%3A1334%2C%22y%22%3A232%2C%22width%22%3A26%2C%22height%22%3A43%2C%22text%22%3A%22%3E%22%7D%2C%7B%22x%22%3A486%2C%22y%22%3A237%2C%22width%22%3A82%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1813%2C%22y%22%3A242%2C%22width%22%3A89%2C%22height%22%3A29%2C%22text%22%3A%22DELETE%22%7D%2C%7B%22x%22%3A1499%2C%22y%22%3A241%2C%22width%22%3A75%2C%22height%22%3A28%2C%22text%22%3A%22WRITE%22%7D%2C%7B%22x%22%3A2144%2C%22y%22%3A244%2C%22width%22%3A69%2C%22height%22%3A27%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A274%2C%22width%22%3A207%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3B%202435058498)%22%7D%2C%7B%22x%22%3A1594%2C%22y%22%3A372%2C%22width%22%3A65%2C%22height%22%3A23%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A2161%2C%22y%22%3A373%2C%22width%22%3A62%2C%22height%22%3A20%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A1738%2C%22y%22%3A372%2C%22width%22%3A62%2C%22height%22%3A22%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A2017%2C%22y%22%3A373%2C%22width%22%3A65%2C%22height%22%3A21%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A1880%2C%22y%22%3A373%2C%22width%22%3A62%2C%22height%22%3A19%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A1394%2C%22y%22%3A378%2C%22width%22%3A122%2C%22height%22%3A22%2C%22text%22%3A%22ENDPOINTS%3A%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A441%2C%22width%22%3A80%2C%22height%22%3A22%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A775%2C%22y%22%3A457%2C%22width%22%3A84%2C%22height%22%3A27%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A149%2C%22y%22%3A485%2C%22width%22%3A81%2C%22height%22%3A24%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A2181%2C%22y%22%3A494%2C%22width%22%3A97%2C%22height%22%3A26%2C%22text%22%3A%22SUBMIT%22%7D%2C%7B%22x%22%3A782%2C%22y%22%3A493%2C%22width%22%3A211%2C%22height%22%3A27%2C%22text%22%3A%22(HASH%3B2435058498)%22%7D%2C%7B%22x%22%3A1337%2C%22y%22%3A525%2C%22width%22%3A164%2C%22height%22%3A36%2C%22text%22%3A%22%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%22%7D%2C%7B%22x%22%3A2185%2C%22y%22%3A568%2C%22width%22%3A89%2C%22height%22%3A28%2C%22text%22%3A%22STRESS%22%7D%2C%7B%22x%22%3A1335%2C%22y%22%3A634%2C%22width%22%3A392%2C%22height%22%3A43%2C%22text%22%3A%22%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU%22%7D%2C%7B%22x%22%3A702%2C%22y%22%3A777%2C%22width%22%3A83%2C%22height%22%3A27%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A226%2C%22y%22%3A778%2C%22width%22%3A82%2C%22height%22%3A25%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A224%2C%22y%22%3A815%2C%22width%22%3A85%2C%22height%22%3A25%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A666%2C%22y%22%3A815%2C%22width%22%3A210%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A1664%2C%22y%22%3A900%2C%22width%22%3A75%2C%22height%22%3A23%2C%22text%22%3A%22'WRITE'%22%7D%2C%7B%22x%22%3A1843%2C%22y%22%3A900%2C%22width%22%3A127%2C%22height%22%3A23%2C%22text%22%3A%22(TOOK%201MS)%22%7D%2C%7B%22x%22%3A1761%2C%22y%22%3A904%2C%22width%22%3A95%2C%22height%22%3A20%2C%22text%22%3A%22SUCCESS%20(%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A1040%2C%22width%22%3A504%2C%22height%22%3A28%2C%22text%22%3A%22%5B2024-03-05%2012%3A33%3A30%20OK%5DHELLOWORLD!%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A1088%2C%22width%22%3A811%2C%22height%22%3A30%2C%22text%22%3A%22%5B2024-03-05%2012%3A33%3A30%20INFO%5DTHIS%20IS%20AN%20ACTUAL%20ETCD%20CLUSTER.%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A1141%2C%22width%22%3A1105%2C%22height%22%3A26%2C%22text%22%3A%22%5B2024-03-05%2012%3A33%3A30%20WARN%5DIPS%20AND%20USER%20AGENTS%20ARE%20USED%20ONLY%20TO%20PREVENT%20ABUSE.%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A1186%2C%22width%22%3A934%2C%22height%22%3A31%2C%22text%22%3A%22%5B2024-03-05%2012%3A33%3A30%20INFO%5DCONNECTED%20TO%20BACKEND%20PLAY.ETCD.IO%3A2200%22%7D%2C%7B%22x%22%3A663%2C%22y%22%3A1234%2C%22width%22%3A650%2C%22height%22%3A30%2C%22text%22%3A%22(SELECTED%20ENDPOINTS%3AHTTP%3A%2F%2FLOCALHOST%3A2389)%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A1237%2C%22width%22%3A432%2C%22height%22%3A27%2C%22text%22%3A%22%5B2024-03-05%2012%3A49%3A14%20OK%5DREQUESTED%22%7D%2C%7B%22x%22%3A579%2C%22y%22%3A1239%2C%22width%22%3A88%2C%22height%22%3A22%2C%22text%22%3A%22RITE%20%5C%22%22%7D%2C%7B%22x%22%3A80%2C%22y%22%3A1284%2C%22width%22%3A384%2C%22height%22%3A32%2C%22text%22%3A%22%5B2024-03-05%2012%3A49%3A15%20OK%5D'WRITE%22%7D%2C%7B%22x%22%3A726%2C%22y%22%3A1287%2C%22width%22%3A56%2C%22height%22%3A27%2C%22text%22%3A%221MS%3E%22%7D%2C%7B%22x%22%3A647%2C%22y%22%3A1286%2C%22width%22%3A65%2C%22height%22%3A26%2C%22text%22%3A%22(TOOK%22%7D%2C%7B%22x%22%3A721%2C%22y%22%3A1330%2C%22width%22%3A398%2C%22height%22%3A35%2C%22text%22%3A%22%E7%A8%8B%E5%BA%8F....VALUE%3A%E7%BC%96%E7%A8%8B....)%22%7D%2C%7B%22x%22%3A644%2C%22y%22%3A1335%2C%22width%22%3A71%2C%22height%22%3A26%2C%22text%22%3A%22(KEY%3A%22%7D%2C%7B%22x%22%3A82%2C%22y%22%3A1336%2C%22width%22%3A406%2C%22height%22%3A26%2C%22text%22%3A%22%5B2024-03-05%2012%3A49%3A15%20OK%5D'WRITE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfaf9%22%2C%22id%22%3A%22ub050de93%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ubd07d2c9" id="ubd07d2c9"><span data-lake-id="udd947828" id="udd947828" style="color: rgb(31, 35, 40)">然后读取数据：</span></p><p data-lake-id="u2093aa3a" id="u2093aa3a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019376514-a05abe76-b128-4d40-bfae-783aae050f87.png%22%2C%22taskId%22%3A%22ue565ad05-4f36-4cb2-b0b5-dd56d612762%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709615071575-1ebad413-9cc7-46bb-8a46-91a9b2bcd013-20240309122415698.png%22%2C%22size%22%3A331506%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2420%2C%22originHeight%22%3A1502%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163618)%20DISCONNECT%204%20USER(S)ONLINE%20NODE1%20DELETE%20READ%20NODE1%20(HASH%3A)%20NODE3%20NODE2%20NODE5%20NODE4%20NODE1%20ENDPOINTS%3A%20(HASH%3A)%20NODE2%20NODE5%20(HASH%3A%202435058498)%20SUBMIT%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%20PREFIX%20SUCCESS(TOOK%201MS)(ERROR%3A504%20-GATEWAY%20TIMEOUT)%20GET%20NODE3%20NODE4%20(HASH%3A2435058498)%20(HASH%3A2435058498)%20IC2024-03-05%2013%3A04%3A96%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.344S)%20%5B2024-03-05%2013%3A04%3A05%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDEDED%20(TRY%20AGAIN%20AFTER%202.344S)%20(C2024-83-05%2013%3A04%3A05%20WARN)%20AGAIN%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202%20998S)%20%7B2024-93-05%2013%3A04%3A95%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.998S)%20%5BT2024-03-05%2013%3A04%3A97%20OK%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3AHTTP%3A%2F%2FLOCALHOST%3A2391)%20%5BC2024-93-95%2013%3A94%3A97%20WARNICLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%20%5BC2024-03-05%2013%3A04%3A07%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%20%5B%5B2024-05%2013%3A04%3A12%20OK%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%20LOCALHOST%3A2391)%20%5B2024-03-05%2013%3A04%3A13%20OK%5D%20SUCCESS%20(TOOK%201%201MS)%201'GET'%20(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%20%5B2024-03-05%2013%3A04%3A13%20OK%5D%20GET%20SUCCESS%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A556%2C%22y%22%3A44%2C%22width%22%3A391%2C%22height%22%3A37%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163618)%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A48%2C%22width%22%3A148%2C%22height%22%3A30%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A288%2C%22y%22%3A50%2C%22width%22%3A201%2C%22height%22%3A27%2C%22text%22%3A%224%20USER(S)ONLINE%22%7D%2C%7B%22x%22%3A483%2C%22y%22%3A227%2C%22width%22%3A78%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1521%2C%22y%22%3A232%2C%22width%22%3A87%2C%22height%22%3A27%2C%22text%22%3A%22DELETE%22%7D%2C%7B%22x%22%3A1853%2C%22y%22%3A233%2C%22width%22%3A66%2C%22height%22%3A24%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A2161%2C%22y%22%3A233%2C%22width%22%3A84%2C%22height%22%3A26%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A476%2C%22y%22%3A263%2C%22width%22%3A87%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1873%2C%22y%22%3A361%2C%22width%22%3A64%2C%22height%22%3A20%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A1734%2C%22y%22%3A361%2C%22width%22%3A59%2C%22height%22%3A21%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A2153%2C%22y%22%3A362%2C%22width%22%3A65%2C%22height%22%3A19%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A2015%2C%22y%22%3A361%2C%22width%22%3A62%2C%22height%22%3A22%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A1597%2C%22y%22%3A363%2C%22width%22%3A54%2C%22height%22%3A19%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1386%2C%22y%22%3A364%2C%22width%22%3A126%2C%22height%22%3A27%2C%22text%22%3A%22ENDPOINTS%3A%22%7D%2C%7B%22x%22%3A148%2C%22y%22%3A429%2C%22width%22%3A85%2C%22height%22%3A22%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A770%2C%22y%22%3A446%2C%22width%22%3A83%2C%22height%22%3A26%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A142%2C%22y%22%3A475%2C%22width%22%3A80%2C%22height%22%3A23%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A777%2C%22y%22%3A481%2C%22width%22%3A208%2C%22height%22%3A29%2C%22text%22%3A%22(HASH%3A%202435058498)%22%7D%2C%7B%22x%22%3A2175%2C%22y%22%3A482%2C%22width%22%3A98%2C%22height%22%3A26%2C%22text%22%3A%22SUBMIT%22%7D%2C%7B%22x%22%3A1330%2C%22y%22%3A512%2C%22width%22%3A166%2C%22height%22%3A35%2C%22text%22%3A%22%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%22%7D%2C%7B%22x%22%3A2186%2C%22y%22%3A545%2C%22width%22%3A68%2C%22height%22%3A21%2C%22text%22%3A%22PREFIX%22%7D%2C%7B%22x%22%3A1561%2C%22y%22%3A648%2C%22width%22%3A572%2C%22height%22%3A31%2C%22text%22%3A%22SUCCESS(TOOK%201MS)(ERROR%3A504%20-GATEWAY%20TIMEOUT)%22%7D%2C%7B%22x%22%3A1499%2C%22y%22%3A650%2C%22width%22%3A42%2C%22height%22%3A23%2C%22text%22%3A%22GET%22%7D%2C%7B%22x%22%3A696%2C%22y%22%3A765%2C%22width%22%3A81%2C%22height%22%3A27%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A217%2C%22y%22%3A767%2C%22width%22%3A85%2C%22height%22%3A26%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A661%2C%22y%22%3A802%2C%22width%22%3A209%2C%22height%22%3A24%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A218%2C%22y%22%3A804%2C%22width%22%3A207%2C%22height%22%3A22%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A72%2C%22y%22%3A979%2C%22width%22%3A1232%2C%22height%22%3A30%2C%22text%22%3A%22IC2024-03-05%2013%3A04%3A96%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.344S)%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A1030%2C%22width%22%3A1230%2C%22height%22%3A28%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A05%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDEDED%20(TRY%20AGAIN%20AFTER%202.344S)%22%7D%2C%7B%22x%22%3A72%2C%22y%22%3A1078%2C%22width%22%3A1232%2C%22height%22%3A30%2C%22text%22%3A%22(C2024-83-05%2013%3A04%3A05%20WARN)%20AGAIN%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202%20998S)%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A1127%2C%22width%22%3A1229%2C%22height%22%3A31%2C%22text%22%3A%22%7B2024-93-05%2013%3A04%3A95%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.998S)%22%7D%2C%7B%22x%22%3A72%2C%22y%22%3A1172%2C%22width%22%3A1210%2C%22height%22%3A38%2C%22text%22%3A%22%5BT2024-03-05%2013%3A04%3A97%20OK%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3AHTTP%3A%2F%2FLOCALHOST%3A2391)%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A1222%2C%22width%22%3A1237%2C%22height%22%3A31%2C%22text%22%3A%22%5BC2024-93-95%2013%3A94%3A97%20WARNICLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A1273%2C%22width%22%3A1232%2C%22height%22%3A30%2C%22text%22%3A%22%5BC2024-03-05%2013%3A04%3A07%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1323%2C%22width%22%3A1208%2C%22height%22%3A32%2C%22text%22%3A%22%5B%5B2024-05%2013%3A04%3A12%20OK%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%20LOCALHOST%3A2391)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1371%2C%22width%22%3A327%2C%22height%22%3A31%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A13%20OK%5D%22%7D%2C%7B%22x%22%3A479%2C%22y%22%3A1373%2C%22width%22%3A219%2C%22height%22%3A28%2C%22text%22%3A%22SUCCESS%20(TOOK%201%22%7D%2C%7B%22x%22%3A677%2C%22y%22%3A1376%2C%22width%22%3A74%2C%22height%22%3A24%2C%22text%22%3A%221MS)%22%7D%2C%7B%22x%22%3A374%2C%22y%22%3A1374%2C%22width%22%3A90%2C%22height%22%3A30%2C%22text%22%3A%221'GET'%22%7D%2C%7B%22x%22%3A602%2C%22y%22%3A1417%2C%22width%22%3A780%2C%22height%22%3A32%2C%22text%22%3A%22(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A1423%2C%22width%22%3A300%2C%22height%22%3A27%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A13%20OK%5D%22%7D%2C%7B%22x%22%3A411%2C%22y%22%3A1426%2C%22width%22%3A44%2C%22height%22%3A22%2C%22text%22%3A%22GET%22%7D%2C%7B%22x%22%3A479%2C%22y%22%3A1426%2C%22width%22%3A110%2C%22height%22%3A21%2C%22text%22%3A%22SUCCESS%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f8f7%22%2C%22id%22%3A%22uce260cdf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7559dbd0" id="u7559dbd0"><span data-lake-id="u4607ef4c" id="u4607ef4c" style="color: rgb(31, 35, 40)">还支持根据前缀搜索数据：</span></p><p data-lake-id="ub4a26f84" id="ub4a26f84"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019402130-5505ae56-9a5d-4286-a559-158e4108a6cd.png%22%2C%22taskId%22%3A%22ua8e838d4-2b11-47de-a538-cde46a47ede%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709615098398-60e01360-6656-4c69-bf7f-93dd36fbdd24-20240309122415953.png%22%2C%22size%22%3A327901%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2406%2C%22originHeight%22%3A1536%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163618)%20DISCONNECT%204%20USER(S)ONLINE%20NODE1%20DELETE%20READ%20NODE1%20(HASH%3A)%20NODE3%20NODE2%20NODE4%20NODE1%20NODE5%20ENDPOINTS%3A%20(HASH%3A)%20NODE2%20NODE5%20SUBMIT%20(HASH%3A2435058498)%20%E7%A8%8B%E5%BA%8F%E5%91%98%20PREFIX%20OK%201MS)(ERROR%3A504%20-GATEWAY%20TIMEOUT)%20SUCCESS%20(TOOK%201M%20GET%20NODE3%20NODE4%20(HASH%3A2435058498)%20(HASH%3A2435058498)%20%5BC2024-03-05%2013%3A04%3A66%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.098S)%20%7B2024-03-05%2013%3A04%3A07%200K%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%20IC2024-05%2013%3A04%3A94%3A97%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%20(C2024-03-05%2013%3A04%3A07%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AGAIN%20AFTER%201.051S)%20%5B%5B2024-03-05%2013%3A04%3A12%20QK%5D%20REQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%20%5B2024-03-05%2013%3A04%3A13%20OK%5D'GET'%20SUCCESS%20(TOOK%201MS)%20%5B(2024-03-05%2013%3A04%3A13%20QK)'GET'%20SUCCESS%20(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%20(%5B2024-93-05%2013%3A04%3A38%20QKI%20REQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%20SUCCESS(TOOK%201MS)%20%5B2024-03-05%2013%3A04%3A39%20OK%5D'GET'%20SU%20(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%20%5B2024-03-05%2013%3A04%3A39%20OK%5D'GET'%20SUCCESS%20(KEY%3A%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A557%2C%22y%22%3A41%2C%22width%22%3A389%2C%22height%22%3A35%2C%22text%22%3A%22UP%203%20YEARS%20AGO(VISITS%20163618)%22%7D%2C%7B%22x%22%3A68%2C%22y%22%3A44%2C%22width%22%3A149%2C%22height%22%3A29%2C%22text%22%3A%22DISCONNECT%22%7D%2C%7B%22x%22%3A284%2C%22y%22%3A45%2C%22width%22%3A202%2C%22height%22%3A28%2C%22text%22%3A%224%20USER(S)ONLINE%22%7D%2C%7B%22x%22%3A482%2C%22y%22%3A223%2C%22width%22%3A76%2C%22height%22%3A24%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A1517%2C%22y%22%3A228%2C%22width%22%3A89%2C%22height%22%3A27%2C%22text%22%3A%22DELETE%22%7D%2C%7B%22x%22%3A1849%2C%22y%22%3A228%2C%22width%22%3A64%2C%22height%22%3A25%2C%22text%22%3A%22READ%22%7D%2C%7B%22x%22%3A2159%2C%22y%22%3A229%2C%22width%22%3A85%2C%22height%22%3A26%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A474%2C%22y%22%3A259%2C%22width%22%3A86%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A1870%2C%22y%22%3A354%2C%22width%22%3A62%2C%22height%22%3A24%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A1731%2C%22y%22%3A356%2C%22width%22%3A61%2C%22height%22%3A22%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A2011%2C%22y%22%3A357%2C%22width%22%3A62%2C%22height%22%3A21%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A1591%2C%22y%22%3A357%2C%22width%22%3A58%2C%22height%22%3A21%2C%22text%22%3A%22NODE1%22%7D%2C%7B%22x%22%3A2151%2C%22y%22%3A356%2C%22width%22%3A64%2C%22height%22%3A21%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A1384%2C%22y%22%3A363%2C%22width%22%3A122%2C%22height%22%3A21%2C%22text%22%3A%22ENDPOINTS%3A%22%7D%2C%7B%22x%22%3A146%2C%22y%22%3A425%2C%22width%22%3A85%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A)%22%7D%2C%7B%22x%22%3A768%2C%22y%22%3A443%2C%22width%22%3A81%2C%22height%22%3A24%2C%22text%22%3A%22NODE2%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A470%2C%22width%22%3A80%2C%22height%22%3A23%2C%22text%22%3A%22NODE5%22%7D%2C%7B%22x%22%3A2173%2C%22y%22%3A477%2C%22width%22%3A100%2C%22height%22%3A28%2C%22text%22%3A%22SUBMIT%22%7D%2C%7B%22x%22%3A775%2C%22y%22%3A478%2C%22width%22%3A210%2C%22height%22%3A27%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A1329%2C%22y%22%3A509%2C%22width%22%3A97%2C%22height%22%3A33%2C%22text%22%3A%22%E7%A8%8B%E5%BA%8F%E5%91%98%22%7D%2C%7B%22x%22%3A2190%2C%22y%22%3A542%2C%22width%22%3A62%2C%22height%22%3A18%2C%22text%22%3A%22PREFIX%22%7D%2C%7B%22x%22%3A1706%2C%22y%22%3A645%2C%22width%22%3A426%2C%22height%22%3A27%2C%22text%22%3A%22OK%201MS)(ERROR%3A504%20-GATEWAY%20TIMEOUT)%22%7D%2C%7B%22x%22%3A1561%2C%22y%22%3A646%2C%22width%22%3A186%2C%22height%22%3A23%2C%22text%22%3A%22SUCCESS%20(TOOK%201M%22%7D%2C%7B%22x%22%3A1495%2C%22y%22%3A647%2C%22width%22%3A43%2C%22height%22%3A22%2C%22text%22%3A%22GET%22%7D%2C%7B%22x%22%3A696%2C%22y%22%3A762%2C%22width%22%3A80%2C%22height%22%3A26%2C%22text%22%3A%22NODE3%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A763%2C%22width%22%3A85%2C%22height%22%3A24%2C%22text%22%3A%22NODE4%22%7D%2C%7B%22x%22%3A660%2C%22y%22%3A799%2C%22width%22%3A206%2C%22height%22%3A23%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A216%2C%22y%22%3A801%2C%22width%22%3A206%2C%22height%22%3A21%2C%22text%22%3A%22(HASH%3A2435058498)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A974%2C%22width%22%3A1234%2C%22height%22%3A30%2C%22text%22%3A%22%5BC2024-03-05%2013%3A04%3A66%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%202.098S)%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A1025%2C%22width%22%3A1204%2C%22height%22%3A31%2C%22text%22%3A%22%7B2024-03-05%2013%3A04%3A07%200K%5DREQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%22%7D%2C%7B%22x%22%3A69%2C%22y%22%3A1073%2C%22width%22%3A1234%2C%22height%22%3A29%2C%22text%22%3A%22IC2024-05%2013%3A04%3A94%3A97%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AFTER%201.051S)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1123%2C%22width%22%3A1233%2C%22height%22%3A30%2C%22text%22%3A%22(C2024-03-05%2013%3A04%3A07%20WARN)CLIENT%20REQUEST%20RATE%20LIMIT%20EXCEEDED%20(TRY%20AGAIN%20AGAIN%20AFTER%201.051S)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1174%2C%22width%22%3A1205%2C%22height%22%3A28%2C%22text%22%3A%22%5B%5B2024-03-05%2013%3A04%3A12%20QK%5D%20REQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1218%2C%22width%22%3A706%2C%22height%22%3A34%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A13%20OK%5D'GET'%20SUCCESS%20(TOOK%201MS)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1269%2C%22width%22%3A1313%2C%22height%22%3A33%2C%22text%22%3A%22%5B(2024-03-05%2013%3A04%3A13%20QK)'GET'%20SUCCESS%20(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3A%20%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A1317%2C%22width%22%3A1200%2C%22height%22%3A33%2C%22text%22%3A%22(%5B2024-93-05%2013%3A04%3A38%20QKI%20REQUESTED%20%5C%22GET%5C%22%20(SELECTED%20ENDPOINTS%3A%20HTTP%3A%2F%2FLOCALHOST%3A2391)%22%7D%2C%7B%22x%22%3A456%2C%22y%22%3A1369%2C%22width%22%3A299%2C%22height%22%3A30%2C%22text%22%3A%22SUCCESS(TOOK%201MS)%22%7D%2C%7B%22x%22%3A70%2C%22y%22%3A1369%2C%22width%22%3A427%2C%22height%22%3A30%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A39%20OK%5D'GET'%20SU%22%7D%2C%7B%22x%22%3A597%2C%22y%22%3A1412%2C%22width%22%3A785%2C%22height%22%3A37%2C%22text%22%3A%22(KEY%3A%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE%2CVALUE%3A%E7%BC%96%E7%A8%8B%E5%AF%BC%E8%88%AA%3AHTTPS%3A%2F%2FYUPI.ICU)%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A1417%2C%22width%22%3A595%2C%22height%22%3A31%2C%22text%22%3A%22%5B2024-03-05%2013%3A04%3A39%20OK%5D'GET'%20SUCCESS%20(KEY%3A%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f7f7%22%2C%22id%22%3A%22ud3f31efc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="u59ba2ac8" id="u59ba2ac8"><br /><br /></span></p><h4 data-lake-id="afkg1" id="afkg1"><span data-lake-id="u39184eef" id="u39184eef" style="color: rgba(0, 0, 0, 0.85)">Etcd 安装</span></h4><p data-lake-id="ue4d880d0" id="ue4d880d0"><span data-lake-id="u7c33d3db" id="u7c33d3db" style="color: rgb(31, 35, 40)">进入 Etcd 官方的下载页：</span><a href="https://github.com/etcd-io/etcd/releases" target="_blank" data-lake-id="u01d8b813" id="u01d8b813"><span data-lake-id="u22134fdd" id="u22134fdd">https://github.com/etcd-io/etcd/releases</span></a></p><p data-lake-id="u8a3484f2" id="u8a3484f2"><span data-lake-id="ud4e43c66" id="ud4e43c66" style="color: rgb(31, 35, 40)">也可以在这里下载：</span><a href="https://etcd.io/docs/v3.2/install/" target="_blank" data-lake-id="u1e6b63ed" id="u1e6b63ed"><span data-lake-id="u5a9e2a25" id="u5a9e2a25">https://etcd.io/docs/v3.2/install/</span></a></p><p data-lake-id="u59fe8fb1" id="u59fe8fb1"><span data-lake-id="u9bf398ce" id="u9bf398ce" style="color: rgb(31, 35, 40)">找到自己操作系统的版本执行即可：</span></p><p data-lake-id="uddef29d8" id="uddef29d8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711019442048-14980dbc-45e7-45bf-9800-23c93dc78549.png%22%2C%22taskId%22%3A%22u35f99592-ae36-4381-9b6d-3ee2f91239b%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1277%2C%22height%22%3A540%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A65870%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1277%2C%22originHeight%22%3A540%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ASSETS%208%20ETCD-V3.4.31-DARWIN-AMD64.ZIP%2020%20HOURS%20AGO%2028.7%20MB%20ETCD-V3.4.31-LINUX-AMD64.TAR.GZ%2020%20HOURS%20AGO%2015.9%20MB%2014.8%20MB%2020%20HOURS%20AGO%20ETCD.V3.4.31-LINUX-ARM64.TAR.GZ%20ETCD-V3.4.51-LINUX-PPC64LE.TAR.GZ%2014.7%20MB%20YESTERDAY%20ETCD-V3.4.31-WINDOWS-AMD64.ZIP%2016.4%20MB%20YESTERDAY%20YSHA256SUMS%20489BYTES%20YESTERDAY%20SOURCE%20CODE(ZIP)%20YESTERDAY%20SOURCE%20CODE(TAR.GZ)%20YESTERDAY%2091%204%20PEOPLE%20REACTED%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A91%2C%22y%22%3A80%2C%22width%22%3A72%2C%22height%22%3A20%2C%22text%22%3A%22ASSETS%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A84%2C%22width%22%3A14%2C%22height%22%3A15%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A138%2C%22width%22%3A258%2C%22height%22%3A20%2C%22text%22%3A%22ETCD-V3.4.31-DARWIN-AMD64.ZIP%22%7D%2C%7B%22x%22%3A1048%2C%22y%22%3A139%2C%22width%22%3A104%2C%22height%22%3A20%2C%22text%22%3A%2220%20HOURS%20AGO%22%7D%2C%7B%22x%22%3A844%2C%22y%22%3A139%2C%22width%22%3A65%2C%22height%22%3A18%2C%22text%22%3A%2228.7%20MB%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A179%2C%22width%22%3A268%2C%22height%22%3A23%2C%22text%22%3A%22ETCD-V3.4.31-LINUX-AMD64.TAR.GZ%22%7D%2C%7B%22x%22%3A1048%2C%22y%22%3A181%2C%22width%22%3A105%2C%22height%22%3A20%2C%22text%22%3A%2220%20HOURS%20AGO%22%7D%2C%7B%22x%22%3A846%2C%22y%22%3A181%2C%22width%22%3A63%2C%22height%22%3A17%2C%22text%22%3A%2215.9%20MB%22%7D%2C%7B%22x%22%3A846%2C%22y%22%3A222%2C%22width%22%3A64%2C%22height%22%3A19%2C%22text%22%3A%2214.8%20MB%22%7D%2C%7B%22x%22%3A1048%2C%22y%22%3A223%2C%22width%22%3A105%2C%22height%22%3A20%2C%22text%22%3A%2220%20HOURS%20AGO%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A224%2C%22width%22%3A259%2C%22height%22%3A20%2C%22text%22%3A%22ETCD.V3.4.31-LINUX-ARM64.TAR.GZ%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A261%2C%22width%22%3A278%2C%22height%22%3A26%2C%22text%22%3A%22ETCD-V3.4.51-LINUX-PPC64LE.TAR.GZ%22%7D%2C%7B%22x%22%3A845%2C%22y%22%3A263%2C%22width%22%3A66%2C%22height%22%3A19%2C%22text%22%3A%2214.7%20MB%22%7D%2C%7B%22x%22%3A1073%2C%22y%22%3A266%2C%22width%22%3A81%2C%22height%22%3A20%2C%22text%22%3A%22YESTERDAY%22%7D%2C%7B%22x%22%3A106%2C%22y%22%3A306%2C%22width%22%3A272%2C%22height%22%3A19%2C%22text%22%3A%22ETCD-V3.4.31-WINDOWS-AMD64.ZIP%22%7D%2C%7B%22x%22%3A845%2C%22y%22%3A306%2C%22width%22%3A64%2C%22height%22%3A17%2C%22text%22%3A%2216.4%20MB%22%7D%2C%7B%22x%22%3A1074%2C%22y%22%3A307%2C%22width%22%3A77%2C%22height%22%3A20%2C%22text%22%3A%22YESTERDAY%22%7D%2C%7B%22x%22%3A100%2C%22y%22%3A348%2C%22width%22%3A129%2C%22height%22%3A18%2C%22text%22%3A%22YSHA256SUMS%22%7D%2C%7B%22x%22%3A843%2C%22y%22%3A349%2C%22width%22%3A79%2C%22height%22%3A20%2C%22text%22%3A%22489BYTES%22%7D%2C%7B%22x%22%3A1073%2C%22y%22%3A349%2C%22width%22%3A79%2C%22height%22%3A20%2C%22text%22%3A%22YESTERDAY%22%7D%2C%7B%22x%22%3A102%2C%22y%22%3A387%2C%22width%22%3A150%2C%22height%22%3A23%2C%22text%22%3A%22SOURCE%20CODE(ZIP)%22%7D%2C%7B%22x%22%3A1073%2C%22y%22%3A391%2C%22width%22%3A79%2C%22height%22%3A19%2C%22text%22%3A%22YESTERDAY%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A429%2C%22width%22%3A174%2C%22height%22%3A23%2C%22text%22%3A%22SOURCE%20CODE(TAR.GZ)%22%7D%2C%7B%22x%22%3A1074%2C%22y%22%3A432%2C%22width%22%3A77%2C%22height%22%3A19%2C%22text%22%3A%22YESTERDAY%22%7D%2C%7B%22x%22%3A243%2C%22y%22%3A490%2C%22width%22%3A33%2C%22height%22%3A19%2C%22text%22%3A%2291%22%7D%2C%7B%22x%22%3A301%2C%22y%22%3A492%2C%22width%22%3A130%2C%22height%22%3A20%2C%22text%22%3A%224%20PEOPLE%20REACTED%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefefe%22%2C%22id%22%3A%22u9e6a2950%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ue89d3b36" id="ue89d3b36"><span data-lake-id="u382c4455" id="u382c4455" style="color: rgb(31, 35, 40)">安装完成后，会得到 3 个脚本：</span></p><ul list="u53c1c161"><li fid="uf5981b28" data-lake-id="ufa600f73" id="ufa600f73"><span data-lake-id="uafb2b6ef" id="uafb2b6ef" style="color: rgb(31, 35, 40)">etcd：etcd 服务本身</span></li><li fid="uf5981b28" data-lake-id="ub935298a" id="ub935298a"><span data-lake-id="udbac7834" id="udbac7834" style="color: rgb(31, 35, 40)">etcdctl：客户端，用于操作 etcd，比如读写数据</span></li><li fid="uf5981b28" data-lake-id="u1ddaff32" id="u1ddaff32"><span data-lake-id="u23544957" id="u23544957" style="color: rgb(31, 35, 40)">etcdutl：备份恢复工具</span></li></ul><p data-lake-id="u136edf60" id="u136edf60"><span data-lake-id="ue23d609d" id="ue23d609d" style="color: rgb(31, 35, 40)">执行 etcd 脚本后，可以启动 etcd 服务，服务默认占用 2379 和 2380 端口，作用分别如下：</span></p><ul list="ued1148dc"><li fid="u9d8794fb" data-lake-id="u55d2ebe0" id="u55d2ebe0"><span data-lake-id="u458d3b06" id="u458d3b06" style="color: rgb(31, 35, 40)">2379：提供 HTTP API 服务，和 etcdctl 交互</span></li><li fid="u9d8794fb" data-lake-id="u6ed9d1c5" id="u6ed9d1c5"><span data-lake-id="ueb106ecc" id="ueb106ecc" style="color: rgb(31, 35, 40)">2380：集群中节点间通讯</span></li></ul><p data-lake-id="u7443268a" id="u7443268a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711020619818-38b1011b-1519-46c2-b8d3-f3ca4b72c316.png%22%2C%22taskId%22%3A%22u49966096-7532-480c-a20b-eb2a8eac8c5%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A919%2C%22height%22%3A161%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A20463%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A919%2C%22originHeight%22%3A161%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%3ENETSTAT%20-ANO%20FINDSTR%20%3A2379%20127.0.0.1%3A2379%200.0.0.0.0%3A0%2026304%20LISTENING%20TCP%20127.0.0.1%3A2379%20127.0.0.1%3A54826%20TCP%2026304%20ESTABLISHED%20127.0.0.1%3A54826%20127.0.0.1%3A2379%2026304%20TCP%20ESTABLISHED%20C%3A%5C%5CUSERS%5C%5CLENOVO%3ENETSTAT%20-A%20FINDSTR%3A2380%20-ANO%20127.0.0.1%3A2380%2026304%20LISTENING%200.0.0.0.0%20TCP%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A8%2C%22y%22%3A10%2C%22width%22%3A279%2C%22height%22%3A18%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%3ENETSTAT%20-ANO%22%7D%2C%7B%22x%22%3A317%2C%22y%22%3A10%2C%22width%22%3A131%2C%22height%22%3A19%2C%22text%22%3A%22FINDSTR%20%3A2379%22%7D%2C%7B%22x%22%3A99%2C%22y%22%3A30%2C%22width%22%3A139%2C%22height%22%3A16%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A328%2C%22y%22%3A31%2C%22width%22%3A92%2C%22height%22%3A16%2C%22text%22%3A%220.0.0.0.0%3A0%22%7D%2C%7B%22x%22%3A717%2C%22y%22%3A31%2C%22width%22%3A51%2C%22height%22%3A17%2C%22text%22%3A%2226304%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A31%2C%22width%22%3A93%2C%22height%22%3A16%2C%22text%22%3A%22LISTENING%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A31%2C%22width%22%3A30%2C%22height%22%3A15%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A50%2C%22width%22%3A140%2C%22height%22%3A17%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A327%2C%22y%22%3A51%2C%22width%22%3A151%2C%22height%22%3A17%2C%22text%22%3A%22127.0.0.1%3A54826%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A51%2C%22width%22%3A29%2C%22height%22%3A15%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A717%2C%22y%22%3A52%2C%22width%22%3A50%2C%22height%22%3A15%2C%22text%22%3A%2226304%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A52%2C%22width%22%3A111%2C%22height%22%3A15%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A70%2C%22width%22%3A150%2C%22height%22%3A18%2C%22text%22%3A%22127.0.0.1%3A54826%22%7D%2C%7B%22x%22%3A327%2C%22y%22%3A70%2C%22width%22%3A141%2C%22height%22%3A17%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A717%2C%22y%22%3A71%2C%22width%22%3A50%2C%22height%22%3A15%2C%22text%22%3A%2226304%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A72%2C%22width%22%3A29%2C%22height%22%3A15%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A72%2C%22width%22%3A110%2C%22height%22%3A16%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A7%2C%22y%22%3A110%2C%22width%22%3A247%2C%22height%22%3A19%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%3ENETSTAT%20-A%22%7D%2C%7B%22x%22%3A317%2C%22y%22%3A111%2C%22width%22%3A131%2C%22height%22%3A17%2C%22text%22%3A%22FINDSTR%3A2380%22%7D%2C%7B%22x%22%3A241%2C%22y%22%3A114%2C%22width%22%3A45%2C%22height%22%3A13%2C%22text%22%3A%22-ANO%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A129%2C%22width%22%3A139%2C%22height%22%3A19%2C%22text%22%3A%22127.0.0.1%3A2380%22%7D%2C%7B%22x%22%3A716%2C%22y%22%3A130%2C%22width%22%3A52%2C%22height%22%3A16%2C%22text%22%3A%2226304%22%7D%2C%7B%22x%22%3A555%2C%22y%22%3A131%2C%22width%22%3A93%2C%22height%22%3A16%2C%22text%22%3A%22LISTENING%22%7D%2C%7B%22x%22%3A325%2C%22y%22%3A131%2C%22width%22%3A93%2C%22height%22%3A16%2C%22text%22%3A%220.0.0.0.0%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A132%2C%22width%22%3A29%2C%22height%22%3A15%2C%22text%22%3A%22TCP%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23141210%22%2C%22id%22%3A%22u5b75ad64%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u8737aa7c" id="u8737aa7c"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711020084345-41efd48b-96b4-4ea3-ac68-f089e7b3edcb.png%22%2C%22taskId%22%3A%22u0d829257-bc00-4efd-a4db-6429f4f7524%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A856%2C%22height%22%3A45%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A6135%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A856%2C%22originHeight%22%3A45%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%2213612%200.0.0.0.0%20127.0.0.1%3A2379%20LISTENING%20TCP%20127.0.0.1%3A2380%2013612%200.0.0.0.0%20TCP%20LISTENING%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A706%2C%22y%22%3A5%2C%22width%22%3A49%2C%22height%22%3A18%2C%22text%22%3A%2213612%22%7D%2C%7B%22x%22%3A316%2C%22y%22%3A5%2C%22width%22%3A90%2C%22height%22%3A17%2C%22text%22%3A%220.0.0.0.0%22%7D%2C%7B%22x%22%3A87%2C%22y%22%3A6%2C%22width%22%3A139%2C%22height%22%3A16%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A544%2C%22y%22%3A6%2C%22width%22%3A93%2C%22height%22%3A16%2C%22text%22%3A%22LISTENING%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A6%2C%22width%22%3A29%2C%22height%22%3A16%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A86%2C%22y%22%3A26%2C%22width%22%3A140%2C%22height%22%3A17%2C%22text%22%3A%22127.0.0.1%3A2380%22%7D%2C%7B%22x%22%3A706%2C%22y%22%3A26%2C%22width%22%3A49%2C%22height%22%3A17%2C%22text%22%3A%2213612%22%7D%2C%7B%22x%22%3A315%2C%22y%22%3A26%2C%22width%22%3A92%2C%22height%22%3A16%2C%22text%22%3A%220.0.0.0.0%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A27%2C%22width%22%3A31%2C%22height%22%3A16%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A545%2C%22y%22%3A27%2C%22width%22%3A92%2C%22height%22%3A16%2C%22text%22%3A%22LISTENING%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23141210%22%2C%22id%22%3A%22ub78fd635%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u95320d46" id="u95320d46"><span data-lake-id="udf76166e" id="udf76166e">获取指定端口号的占用情况</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22netstat%20-ano%20%7C%20findstr%20%3A%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WRsx6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua9e8ffc4" id="ua9e8ffc4"><span data-lake-id="ub3ffecff" id="ub3ffecff">获取全部端口号的占用情况</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22netstat%20-ano%20%7C%20findstr%20LISTENING%5Cn%5Cn%20%20TCP%20%20%20%20127.0.0.1%3A2379%20%20%20%20%20%20%20%20%200.0.0.0%3A0%20%20%20%20%20%20%20%20%20%20%20%20%20%20LISTENING%20%20%20%20%20%20%2013612%5Cn%20%20TCP%20%20%20%20127.0.0.1%3A2380%20%20%20%20%20%20%20%20%200.0.0.0%3A0%20%20%20%20%20%20%20%20%20%20%20%20%20%20LISTENING%20%20%20%20%20%20%2013612%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ftwwp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="kiIxt" id="kiIxt"><span data-lake-id="u13803a89" id="u13803a89" style="color: rgba(0, 0, 0, 0.85)">Etcd 可视化工具</span></h4><p data-lake-id="u2e0744b2" id="u2e0744b2"><span data-lake-id="udf6e3358" id="udf6e3358" style="color: rgb(31, 35, 40)">一般情况下，使用数据存储中间件时，一定要有一个可视化工具，能够更直观清晰地管理已经存储的数据。比如 Redis 的 Redis Desktop Manager。</span></p><p data-lake-id="u4427c9fe" id="u4427c9fe"><span data-lake-id="uc465db4f" id="uc465db4f" style="color: rgb(31, 35, 40)">同样的，Etcd 也有一些可视化工具，比如：</span></p><ul list="ubab7ede5"><li fid="u500e962a" data-lake-id="u5f5bae15" id="u5f5bae15"><span data-lake-id="u18c4d1f0" id="u18c4d1f0" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">etcdkeeper：️</span><a href="https://github.com/evildecay/etcdkeeper/" target="_blank" data-lake-id="u944a8418" id="u944a8418"><span data-lake-id="u012f4093" id="u012f4093" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">https://github.com/evildecay/etcdkeeper/</span></a></li><li fid="u500e962a" data-lake-id="u52fc3da8" id="u52fc3da8"><span data-lake-id="u015594c0" id="u015594c0" style="color: rgb(31, 35, 40)">kstone：</span><a href="https://github.com/kstone-io/kstone/tree/master/charts" target="_blank" data-lake-id="u04c277a9" id="u04c277a9"><span data-lake-id="u5d969795" id="u5d969795">https://github.com/kstone-io/kstone/tree/master/charts</span></a></li></ul><p data-lake-id="u93d6fa2a" id="u93d6fa2a"><span data-lake-id="ua194a15c" id="ua194a15c" style="color: rgb(31, 35, 40)">更推荐 etcdkeeper，安装成本更低，学习使用更方便。</span></p><p data-lake-id="uae08373f" id="uae08373f"><span data-lake-id="u9de21554" id="u9de21554" style="color: rgb(31, 35, 40)">进入项目的 GitHub，就能看到安装方式，直接按照指引下载、解压、运行脚本即可：</span></p><p data-lake-id="u36b499c7" id="u36b499c7"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711020829665-1be97256-b101-4e1c-bbdc-00c3e8c78fce.png%22%2C%22taskId%22%3A%22ua0edd348-43e3-474a-b545-e8da4703be8%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1627%2C%22height%22%3A769%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A77032%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1627%2C%22originHeight%22%3A769%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22RELEASES%2FVO.7.6%20COMPARE%20V0.7.6%20LATEST%20EVILDECAY%20RELEASED%20THIS%20JUN%208%2C2020%20ED360E8%205%20COMMITS%20TO%20MASTER%20SINCE%20THIS%20RELEASE%20V0.7.6%20MERGE%20PULL%20REQUEST%20%2343%20FIX%20CONNECT%20HAPPEN%20IN%20BACKGROUND%20RETURNING%20THE%20CLIENT%20OBJECT%20BEFORE%20INITIAL%20CONNECT%20ASSETS%20ETCDKEEPER-V0.7.6-DARWIN_AMD64.ZIP%20JUN%208%2C2020%2011.1%20MB%20ETCDKEEPER-V0.7.6-LINUX_X86_64.ZIP%2011.1%20MB%20JUN%208%2C2020%20ETCDKEEPER-V0.7.6-WINDOWS.X86_64.ZIP%2010.9%20MB%20JUN%208%2C2020%20SOURCE%20CODE(ZIP)%20JUN%208%2C2020%20SOURCE%20CODE(TAR.GZ)%20JUN%208%2C2020%205%20PEOPLE%20REACTED%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A35%2C%22y%22%3A26%2C%22width%22%3A132%2C%22height%22%3A19%2C%22text%22%3A%22RELEASES%2FVO.7.6%22%7D%2C%7B%22x%22%3A1433%2C%22y%22%3A119%2C%22width%22%3A65%2C%22height%22%3A16%2C%22text%22%3A%22COMPARE%22%7D%2C%7B%22x%22%3A56%2C%22y%22%3A126%2C%22width%22%3A107%2C%22height%22%3A32%2C%22text%22%3A%22V0.7.6%22%7D%2C%7B%22x%22%3A203%2C%22y%22%3A138%2C%22width%22%3A41%2C%22height%22%3A15%2C%22text%22%3A%22LATEST%22%7D%2C%7B%22x%22%3A85%2C%22y%22%3A191%2C%22width%22%3A271%2C%22height%22%3A23%2C%22text%22%3A%22EVILDECAY%20RELEASED%20THIS%20JUN%208%2C2020%22%7D%2C%7B%22x%22%3A846%2C%22y%22%3A196%2C%22width%22%3A74%2C%22height%22%3A18%2C%22text%22%3A%22ED360E8%22%7D%2C%7B%22x%22%3A399%2C%22y%22%3A196%2C%22width%22%3A289%2C%22height%22%3A17%2C%22text%22%3A%225%20COMMITS%20TO%20MASTER%20SINCE%20THIS%20RELEASE%22%7D%2C%7B%22x%22%3A742%2C%22y%22%3A196%2C%22width%22%3A50%2C%22height%22%3A18%2C%22text%22%3A%22V0.7.6%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A284%2C%22width%22%3A211%2C%22height%22%3A21%2C%22text%22%3A%22MERGE%20PULL%20REQUEST%20%2343%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A313%2C%22width%22%3A734%2C%22height%22%3A22%2C%22text%22%3A%22FIX%20CONNECT%20HAPPEN%20IN%20BACKGROUND%20RETURNING%20THE%20CLIENT%20OBJECT%20BEFORE%20INITIAL%20CONNECT%22%7D%2C%7B%22x%22%3A68%2C%22y%22%3A409%2C%22width%22%3A80%2C%22height%22%3A22%2C%22text%22%3A%22ASSETS%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A467%2C%22width%22%3A313%2C%22height%22%3A22%2C%22text%22%3A%22ETCDKEEPER-V0.7.6-DARWIN_AMD64.ZIP%22%7D%2C%7B%22x%22%3A1426%2C%22y%22%3A469%2C%22width%22%3A90%2C%22height%22%3A19%2C%22text%22%3A%22JUN%208%2C2020%22%7D%2C%7B%22x%22%3A1092%2C%22y%22%3A470%2C%22width%22%3A65%2C%22height%22%3A18%2C%22text%22%3A%2211.1%20MB%22%7D%2C%7B%22x%22%3A80%2C%22y%22%3A507%2C%22width%22%3A297%2C%22height%22%3A26%2C%22text%22%3A%22ETCDKEEPER-V0.7.6-LINUX_X86_64.ZIP%22%7D%2C%7B%22x%22%3A1093%2C%22y%22%3A511%2C%22width%22%3A64%2C%22height%22%3A18%2C%22text%22%3A%2211.1%20MB%22%7D%2C%7B%22x%22%3A1426%2C%22y%22%3A511%2C%22width%22%3A92%2C%22height%22%3A18%2C%22text%22%3A%22JUN%208%2C2020%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A550%2C%22width%22%3A332%2C%22height%22%3A25%2C%22text%22%3A%22ETCDKEEPER-V0.7.6-WINDOWS.X86_64.ZIP%22%7D%2C%7B%22x%22%3A1093%2C%22y%22%3A554%2C%22width%22%3A65%2C%22height%22%3A17%2C%22text%22%3A%2210.9%20MB%22%7D%2C%7B%22x%22%3A1426%2C%22y%22%3A554%2C%22width%22%3A92%2C%22height%22%3A17%2C%22text%22%3A%22JUN%208%2C2020%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A591%2C%22width%22%3A155%2C%22height%22%3A24%2C%22text%22%3A%22SOURCE%20CODE(ZIP)%22%7D%2C%7B%22x%22%3A1426%2C%22y%22%3A595%2C%22width%22%3A91%2C%22height%22%3A16%2C%22text%22%3A%22JUN%208%2C2020%22%7D%2C%7B%22x%22%3A83%2C%22y%22%3A633%2C%22width%22%3A174%2C%22height%22%3A25%2C%22text%22%3A%22SOURCE%20CODE(TAR.GZ)%22%7D%2C%7B%22x%22%3A1427%2C%22y%22%3A637%2C%22width%22%3A91%2C%22height%22%3A17%2C%22text%22%3A%22JUN%208%2C2020%22%7D%2C%7B%22x%22%3A226%2C%22y%22%3A698%2C%22width%22%3A127%2C%22height%22%3A18%2C%22text%22%3A%225%20PEOPLE%20REACTED%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefefe%22%2C%22id%22%3A%22u3ff20b01%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uf2d39e24" id="uf2d39e24"><span data-lake-id="u686607a2" id="u686607a2" style="color: rgb(31, 35, 40)">安装后，执行命令，可以在指定端口启动可视化界面（默认是 8080 端口）</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22.%2Fetcdkeeper%20-p%208081%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FuTxt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ub1397873" id="ub1397873"><span data-lake-id="ufad3c26d" id="ufad3c26d" style="color: rgb(31, 35, 40)">安装后，访问本地 </span><a href="http://127.0.0.1:8080/etcdkeeper/" target="_blank" data-lake-id="u03314bfd" id="u03314bfd"><span data-lake-id="u386663b8" id="u386663b8">http://127.0.0.1:8080/etcdkeeper/</span></a><span data-lake-id="ua940df97" id="ua940df97"> 就能看到可视化页面了，如图：</span></p><p data-lake-id="u393dd924" id="u393dd924"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711020810552-68687ef8-dbb5-4251-b22e-278a92c8f65c.png%22%2C%22taskId%22%3A%22uc6e66f96-13aa-4977-a3d1-69cd18a8bab%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1920%2C%22height%22%3A952%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A33612%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A952%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ETCD%20KEEPER%20V3%20127.0.0.1%3A2379%20MODE%20NODES%20ETCD%20VERSION%3A3.5.12%20SIZE%3A44K%20MEMBER%20NAME%3ADEFAULT%20ETCD%20KEEPER%200.7.6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A55%2C%22y%22%3A31%2C%22width%22%3A208%2C%22height%22%3A23%2C%22text%22%3A%22ETCD%20KEEPER%20V3%22%7D%2C%7B%22x%22%3A81%2C%22y%22%3A88%2C%22width%22%3A132%2C%22height%22%3A16%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A1768%2C%22y%22%3A149%2C%22width%22%3A46%2C%22height%22%3A16%2C%22text%22%3A%22MODE%22%7D%2C%7B%22x%22%3A31%2C%22y%22%3A151%2C%22width%22%3A56%2C%22height%22%3A15%2C%22text%22%3A%22NODES%22%7D%2C%7B%22x%22%3A1275%2C%22y%22%3A927%2C%22width%22%3A605%2C%22height%22%3A28%2C%22text%22%3A%22ETCD%20VERSION%3A3.5.12%20SIZE%3A44K%20MEMBER%20NAME%3ADEFAULT%20ETCD%20KEEPER%200.7.6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfcfc%22%2C%22id%22%3A%22u94bb0474%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ufe7c5c12" id="ufe7c5c12"><br></p><h5 data-lake-id="hyj7U" id="hyj7U"><span data-lake-id="uebd32fd1" id="uebd32fd1" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">这里可以编写批处理文件双击执行</span></h5><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22bash%22%2C%22code%22%3A%22%40echo%20off%5Cnstart%20%2FD%20%5C%22D%3A%5C%5CsoftWare%5C%5CEtcd%5C%5Cetcd-v3.5.12-windows-amd64%5C%22%20cmd%20%2Fk%20etcd.exe%5Cnstart%20%2FD%20%5C%22D%3A%5C%5CsoftWare%5C%5CEtcd%5C%5Cetcdkeeper-v0.7.6-windows_x86_64%5C%5Cetcdkeeper%5C%22%20cmd%20%2Fk%20etcdkeeper.exe%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22I10K5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uf64c2ab5" id="uf64c2ab5"><br></p><h4 data-lake-id="ZdLye" id="ZdLye"><span data-lake-id="u5a905329" id="u5a905329" style="color: rgba(0, 0, 0, 0.85)">Etcd Java 客户端</span></h4><p data-lake-id="u88468bb2" id="u88468bb2"><span data-lake-id="u8cafe391" id="u8cafe391" style="color: rgb(31, 35, 40)">所谓客户端，就是操作 Etcd 的工具。</span></p><p data-lake-id="ub009b666" id="ub009b666"><span data-lake-id="u133a7edf" id="u133a7edf" style="color: rgb(31, 35, 40)">etcd 主流的 Java 客户端是 jetcd：</span><a href="https://github.com/etcd-io/jetcd%E3%80%82" target="_blank" data-lake-id="u0b9fc1fc" id="u0b9fc1fc"><span data-lake-id="u8f6c624a" id="u8f6c624a">https://github.com/etcd-io/jetcd。</span></a></p><p data-lake-id="u8490b4c6" id="u8490b4c6"><strong><span data-lake-id="ubfcb023d" id="ubfcb023d" style="color: rgb(31, 35, 40)">注意，Java 版本必须大于 11！（建议直接一步到位升级到java17）</span></strong></p><blockquote data-lake-id="udb3d436e" id="udb3d436e"><p data-lake-id="u8f46637f" id="u8f46637f"><strong><span data-lake-id="u992e4690" id="u992e4690" style="color: rgb(31, 35, 40)">如果是从Java8开始升级的要注意引入的一个日志依赖</span></strong><code data-lake-id="udbf9279c" id="udbf9279c"><strong><span data-lake-id="u2e3bf2dc" id="u2e3bf2dc" style="color: rgb(31, 35, 40)">logback-classic</span></strong></code><strong><span data-lake-id="u5b75be02" id="u5b75be02" style="color: rgb(31, 35, 40)">需要将版本修改为</span></strong><code data-lake-id="u0bfe0f8e" id="u0bfe0f8e"><strong><span data-lake-id="ua1e08ebf" id="ua1e08ebf" style="color: rgb(31, 35, 40)">1.4.14</span></strong></code></p></blockquote><p data-lake-id="ua01537b6" id="ua01537b6"><span data-lake-id="u07789dce" id="u07789dce" style="color: rgb(31, 35, 40)">用法非常简单，就像 curator 能够操作 ZooKeeper、jedis 能够操作 Redis 一样。</span></p><p data-lake-id="u39f933e5" id="u39f933e5"><span data-lake-id="ue61263c9" id="ue61263c9" style="color: rgb(31, 35, 40)">1）首先在项目中引入 jetcd：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fio.etcd%2Fjetcd-core%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eio.etcd%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Ejetcd-core%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E0.7.7%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22juBr3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uc1806aaa" id="uc1806aaa"><span data-lake-id="u5ef8771b" id="u5ef8771b" style="color: rgb(31, 35, 40)">2）按照官方文档的示例写 Demo：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22EtcdRegistryDemo%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20io.etcd.jetcd.ByteSequence%3B%5Cnimport%20io.etcd.jetcd.Client%3B%5Cnimport%20io.etcd.jetcd.KV%3B%5Cnimport%20io.etcd.jetcd.kv.GetResponse%3B%5Cn%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cn%5Cn%2F**%5Cn%20*%20%24END%24%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cnpublic%20class%20EtcdRegistryDemo%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20ExecutionException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%E7%AB%AF%E7%82%B9%E5%88%9B%E5%BB%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%5Cn%20%20%20%20%20%20%20%20Client%20client%20%3D%20Client.builder().endpoints(%5C%22http%3A%2F%2Flocalhost%3A2379%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20KV%20kvClient%20%3D%20client.getKVClient()%3B%5Cn%20%20%20%20%20%20%20%20ByteSequence%20key%20%3D%20ByteSequence.from(%5C%22test_key%5C%22.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20ByteSequence%20value%20%3D%20ByteSequence.from(%5C%22test_value%5C%22.getBytes())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%BE%93%E5%85%A5%20key-value%5Cn%20%20%20%20%20%20%20%20kvClient.put(key%2C%20value).get()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%20CompletableFuture%5Cn%20%20%20%20%20%20%20%20CompletableFuture%3CGetResponse%3E%20getFuture%20%3D%20kvClient.get(key)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8ECompletableFuture%E4%B8%AD%E8%8E%B7%E5%8F%96value%5Cn%20%20%20%20%20%20%20%20GetResponse%20response%20%3D%20getFuture.get()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%A0%E9%99%A4%E9%94%AE%5Cn%20%20%20%20%20%20%20%20kvClient.delete(key).get()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22EtcdRegistryDemo%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22y3hFf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ubcbdc65d" id="ubcbdc65d"><span data-lake-id="u8ad150c3" id="u8ad150c3" style="color: rgb(31, 35, 40)">在上述代码中，使用 KVClient 来操作 etcd 写入和读取数据。除了 KVClient 客户端外，Etcd 还提供了很多其他客户端。</span></p><p data-lake-id="u625a73fb" id="u625a73fb"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711021154092-c1de6a71-3056-44f6-b462-68e37f06ad44.png%22%2C%22taskId%22%3A%22ue6b39371-a72f-4e2a-bf19-5d9d8821d42%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709615561837-9eaa7fe3-c51e-4c89-ac69-58fa470b5811-20240309122416959.png%22%2C%22size%22%3A122444%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1432%2C%22originHeight%22%3A460%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CLIENT.GET%20)%20GETLEASECLIENT(%20KVC7%20LEASE%20KV%20GETKVCLIENT()%20HEAR%20WATCH%20GETWATCHCLIENT()%20GETAUTHCLIENT%20AUTH%20CLUSTER%20GETCLUSTERCLIENT()%20SAGES%20GETELECTIONCLIENT()%20ELECTION%20VERRID%20LOCK%20GETLOCKCLIENT()%20LIC%20MAINTENANCE%20GETMAINTENANCECLIENT%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A28%2C%22y%22%3A10%2C%22width%22%3A209%2C%22height%22%3A36%2C%22text%22%3A%22CLIENT.GET%22%7D%2C%7B%22x%22%3A152%2C%22y%22%3A61%2C%22width%22%3A298%2C%22height%22%3A35%2C%22text%22%3A%22)%20GETLEASECLIENT(%22%7D%2C%7B%22x%22%3A30%2C%22y%22%3A64%2C%22width%22%3A74%2C%22height%22%3A31%2C%22text%22%3A%22KVC7%22%7D%2C%7B%22x%22%3A1312%2C%22y%22%3A67%2C%22width%22%3A96%2C%22height%22%3A26%2C%22text%22%3A%22LEASE%22%7D%2C%7B%22x%22%3A1368%2C%22y%22%3A113%2C%22width%22%3A38%2C%22height%22%3A28%2C%22text%22%3A%22KV%22%7D%2C%7B%22x%22%3A165%2C%22y%22%3A112%2C%22width%22%3A251%2C%22height%22%3A36%2C%22text%22%3A%22GETKVCLIENT()%22%7D%2C%7B%22x%22%3A29%2C%22y%22%3A122%2C%22width%22%3A75%2C%22height%22%3A26%2C%22text%22%3A%22HEAR%22%7D%2C%7B%22x%22%3A1310%2C%22y%22%3A163%2C%22width%22%3A98%2C%22height%22%3A28%2C%22text%22%3A%22WATCH%22%7D%2C%7B%22x%22%3A161%2C%22y%22%3A161%2C%22width%22%3A309%2C%22height%22%3A39%2C%22text%22%3A%22GETWATCHCLIENT()%22%7D%2C%7B%22x%22%3A163%2C%22y%22%3A211%2C%22width%22%3A259%2C%22height%22%3A36%2C%22text%22%3A%22GETAUTHCLIENT%22%7D%2C%7B%22x%22%3A1332%2C%22y%22%3A214%2C%22width%22%3A76%2C%22height%22%3A29%2C%22text%22%3A%22AUTH%22%7D%2C%7B%22x%22%3A1273%2C%22y%22%3A262%2C%22width%22%3A136%2C%22height%22%3A32%2C%22text%22%3A%22CLUSTER%22%7D%2C%7B%22x%22%3A165%2C%22y%22%3A258%2C%22width%22%3A352%2C%22height%22%3A45%2C%22text%22%3A%22GETCLUSTERCLIENT()%22%7D%2C%7B%22x%22%3A2%2C%22y%22%3A287%2C%22width%22%3A78%2C%22height%22%3A26%2C%22text%22%3A%22SAGES%22%7D%2C%7B%22x%22%3A168%2C%22y%22%3A312%2C%22width%22%3A358%2C%22height%22%3A34%2C%22text%22%3A%22GETELECTIONCLIENT()%22%7D%2C%7B%22x%22%3A1254%2C%22y%22%3A313%2C%22width%22%3A153%2C%22height%22%3A30%2C%22text%22%3A%22ELECTION%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A335%2C%22width%22%3A106%2C%22height%22%3A32%2C%22text%22%3A%22VERRID%22%7D%2C%7B%22x%22%3A1331%2C%22y%22%3A362%2C%22width%22%3A78%2C%22height%22%3A30%2C%22text%22%3A%22LOCK%22%7D%2C%7B%22x%22%3A168%2C%22y%22%3A362%2C%22width%22%3A287%2C%22height%22%3A39%2C%22text%22%3A%22GETLOCKCLIENT()%22%7D%2C%7B%22x%22%3A4%2C%22y%22%3A388%2C%22width%22%3A68%2C%22height%22%3A34%2C%22text%22%3A%22LIC%22%7D%2C%7B%22x%22%3A1194%2C%22y%22%3A413%2C%22width%22%3A214%2C%22height%22%3A30%2C%22text%22%3A%22MAINTENANCE%22%7D%2C%7B%22x%22%3A166%2C%22y%22%3A415%2C%22width%22%3A388%2C%22height%22%3A31%2C%22text%22%3A%22GETMAINTENANCECLIENT%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23484a4c%22%2C%22id%22%3A%22u27cfd115%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ua7393da2" id="ua7393da2"><span data-lake-id="ued324513" id="ued324513" style="color: rgb(31, 35, 40)">常用的客户端和作用如下，仅作了解即可：</span></p><ol list="u301a5945"><li fid="u21e8cbe8" data-lake-id="u91eed4a8" id="u91eed4a8"><span data-lake-id="u434cda22" id="u434cda22" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">kvClient：用于对 etcd 中的键值对进行操作。通过 kvClient 可以进行设置值、获取值、删除值、列出目录等操作。</span></li><li fid="u21e8cbe8" data-lake-id="ud81f1393" id="ud81f1393"><span data-lake-id="u8ce149ad" id="u8ce149ad" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">leaseClient：用于管理 etcd 的租约机制。租约是 etcd 中的一种时间片，用于为键值对分配生存时间，并在租约到期时自动删除相关的键值对。通过 leaseClient 可以创建、获取、续约和撤销租约。</span></li><li fid="u21e8cbe8" data-lake-id="ucffd172e" id="ucffd172e"><span data-lake-id="u22a66d0b" id="u22a66d0b" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">watchClient：用于监视 etcd 中键的变化，并在键的值发生变化时接收通知。</span></li><li fid="u21e8cbe8" data-lake-id="u55b9fd72" id="u55b9fd72"><span data-lake-id="u05f74ec6" id="u05f74ec6" style="color: rgb(31, 35, 40)">clusterClient：用于与 etcd 集群进行交互，包括添加、移除、列出成员、设置选举、获取集群的健康状态、获取成员列表信息等操作。</span></li><li fid="u21e8cbe8" data-lake-id="ud1946f7b" id="ud1946f7b"><span data-lake-id="u2ec48f6e" id="u2ec48f6e" style="color: rgb(31, 35, 40)">authClient：用于管理 etcd 的身份验证和授权。通过 authClient 可以添加、删除、列出用户、角色等身份信息，以及授予或撤销用户或角色的权限。</span></li><li fid="u21e8cbe8" data-lake-id="ua699b92c" id="ua699b92c"><span data-lake-id="ua59d804d" id="ua59d804d" style="color: rgb(31, 35, 40)">maintenanceClient：用于执行 etcd 的维护操作，如健康检查、数据库备份、成员维护、数据库快照、数据库压缩等。</span></li><li fid="u21e8cbe8" data-lake-id="u7aa45bb3" id="u7aa45bb3"><span data-lake-id="u02bc76bc" id="u02bc76bc" style="color: rgb(31, 35, 40)">lockClient：用于实现分布式锁功能，通过 lockClient 可以在 etcd 上创建、获取、释放锁，能够轻松实现并发控制。</span></li><li fid="u21e8cbe8" data-lake-id="uff6d39fe" id="uff6d39fe"><span data-lake-id="u7631d463" id="u7631d463" style="color: rgb(31, 35, 40)">electionClient：用于实现分布式选举功能，可以在 etcd 上创建选举、提交选票、监视选举结果等。</span></li></ol><p data-lake-id="ub9584d5f" id="ub9584d5f"><span data-lake-id="u1a418940" id="u1a418940" style="color: rgb(31, 35, 40)">绝大多数情况下，用前 3 个客户端就足够了。</span></p><p data-lake-id="uf8604c42" id="uf8604c42"><span data-lake-id="u85503f18" id="u85503f18" style="color: rgb(31, 35, 40)">3）使用 Debug 执行上述代码，观察 Etcd 的数据结构，如图：</span></p><p data-lake-id="u7216f0d9" id="u7216f0d9"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711021177601-d7992e49-3d79-4fcd-babd-6f17770b6469.png%22%2C%22taskId%22%3A%22uca792b6c-ad91-462b-ad94-5c6b47623a7%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709034946224-afe736d4-3bb4-4ce8-923c-a5f69c864906-20240309122417084.png%22%2C%22size%22%3A28135%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A524%2C%22originHeight%22%3A354%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%5C%22TEST_KEY%5C%22%20KEY%3A%20CREATE_REVISION%3A%205%20IMOD_REVISION%3A%205%20'VERSION%3A%201%20VALUE%3A%20%5C%22TEST_VALUE%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A98%2C%22y%22%3A10%2C%22width%22%3A202%2C%22height%22%3A37%2C%22text%22%3A%22%5C%22TEST_KEY%5C%22%22%7D%2C%7B%22x%22%3A3%2C%22y%22%3A11%2C%22width%22%3A75%2C%22height%22%3A37%2C%22text%22%3A%22KEY%3A%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A66%2C%22width%22%3A362%2C%22height%22%3A30%2C%22text%22%3A%22CREATE_REVISION%3A%205%22%7D%2C%7B%22x%22%3A0%2C%22y%22%3A119%2C%22width%22%3A302%2C%22height%22%3A31%2C%22text%22%3A%22IMOD_REVISION%3A%205%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A172%2C%22width%22%3A200%2C%22height%22%3A32%2C%22text%22%3A%22'VERSION%3A%201%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A226%2C%22width%22%3A380%2C%22height%22%3A33%2C%22text%22%3A%22VALUE%3A%20%5C%22TEST_VALUE%5C%22%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%234f5253%22%2C%22id%22%3A%22u857f3bcf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ucaf4103d" id="ucaf4103d"><span data-lake-id="u5cdeaaac" id="u5cdeaaac" style="color: rgb(31, 35, 40)">发现除了 key 和 value 外，还能看到版本、创建版本、修改版本字段。这是因为 etcd 中的每个键都有一个与之关联的版本号，用于跟踪键的修改历史。当一个键的值发生变化时，其版本号也会增加。</span></p><p data-lake-id="u0d3a1d76" id="u0d3a1d76"><span data-lake-id="u1e89af98" id="u1e89af98" style="color: rgb(31, 35, 40)">通过使用 etcd 的 Watch API，可以监视键的变化，并在发生变化时接收通知。这种版本机制使得 etcd 在分布式系统中能够实现乐观并发控制、一致性和可靠性的数据访问。</span></p><card type="block" name="hr" value="data:%7B%22id%22%3A%22g1pfK%22%7D"></card><p data-lake-id="u3f8de63a" id="u3f8de63a"><span data-lake-id="u99481dd0" id="u99481dd0" style="color: rgb(31, 35, 40)">OK，了解了 Etcd 的基础用法后，还要设计服务注册信息如何存储在注册中心内。</span></p><h3 data-lake-id="BUJG4" id="BUJG4"><span data-lake-id="u23fa26ee" id="u23fa26ee" style="color: rgba(0, 0, 0, 0.85)">存储结构设计</span></h3><p data-lake-id="u80ddcc14" id="u80ddcc14"><span data-lake-id="u51859043" id="u51859043" style="color: rgb(31, 35, 40)">存储结构设计的几个要点：</span></p><ol list="u2d3c28bc"><li fid="u0dd59974" data-lake-id="u4671690a" id="u4671690a"><span data-lake-id="u8dddaf20" id="u8dddaf20" style="color: rgb(31, 35, 40)">key 如何设计？</span></li><li fid="u0dd59974" data-lake-id="u1c365452" id="u1c365452"><span data-lake-id="u15de253f" id="u15de253f" style="color: rgb(31, 35, 40)">value 如何设计？</span></li><li fid="u0dd59974" data-lake-id="u18810ea3" id="u18810ea3"><span data-lake-id="u55b35065" id="u55b35065" style="color: rgb(31, 35, 40)">key 什么时候过期？</span></li></ol><p data-lake-id="u015b8ea7" id="u015b8ea7"><span data-lake-id="u32585d68" id="u32585d68" style="color: rgb(31, 35, 40)">由于一个服务可能有多个服务提供者（负载均衡），我们可以有两种结构设计：</span></p><h4 data-lake-id="nXKiN" id="nXKiN"><span data-lake-id="u5fa5e068" id="u5fa5e068" style="color: rgb(31, 35, 40)">1）层级结构。</span></h4><p data-lake-id="ubaa29747" id="ubaa29747"><span data-lake-id="u8358ae1c" id="u8358ae1c" style="color: rgb(31, 35, 40)">将服务理解为文件夹、将服务对应的多个节点理解为文件夹下的文件，那么可以通过服务名称，用前缀查询的方式查询到某个服务的所有节点。</span></p><p data-lake-id="u9857384e" id="u9857384e"><span data-lake-id="ufe261c24" id="ufe261c24" style="color: rgb(31, 35, 40)">如图，键名的规则可以是 </span><span data-lake-id="u887efc8f" id="u887efc8f" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">/业务前缀/服务名/服务节点地址</span><span data-lake-id="uebd6c41e" id="uebd6c41e" style="color: rgb(31, 35, 40)">：</span></p><p data-lake-id="u4521fa7e" id="u4521fa7e"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1711021219478-230b185b-f1cc-417d-9297-e97172b15363.jpeg%22%2C%22taskId%22%3A%22u42bd3f69-2054-4617-adfa-191d69e65f2%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709634947509-0046904b-94ed-471e-bea3-7ce5f3bdbe8b-20240309122417179.jpg%22%2C%22size%22%3A43624%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1379%2C%22originHeight%22%3A594%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1A%20KEY%2FSERVICE%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B91%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B93%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B92%20KEYSERVICE%2FLOCALHOST%3A8080%20KEY%2FSERVICE%2FCODEFATHER.CN%20KEY%2FSERVICE%2FYUPI.ICU%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A649%2C%22y%22%3A72%2C%22width%22%3A93%2C%22height%22%3A31%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1A%22%7D%2C%7B%22x%22%3A595%2C%22y%22%3A124%2C%22width%22%3A198%2C%22height%22%3A32%2C%22text%22%3A%22KEY%2FSERVICE%22%7D%2C%7B%22x%22%3A160%2C%22y%22%3A439%2C%22width%22%3A145%2C%22height%22%3A31%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B91%22%7D%2C%7B%22x%22%3A1066%2C%22y%22%3A440%2C%22width%22%3A149%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B93%22%7D%2C%7B%22x%22%3A620%2C%22y%22%3A441%2C%22width%22%3A149%2C%22height%22%3A29%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B92%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A492%2C%22width%22%3A416%2C%22height%22%3A33%2C%22text%22%3A%22KEYSERVICE%2FLOCALHOST%3A8080%22%7D%2C%7B%22x%22%3A940%2C%22y%22%3A493%2C%22width%22%3A401%2C%22height%22%3A32%2C%22text%22%3A%22KEY%2FSERVICE%2FCODEFATHER.CN%22%7D%2C%7B%22x%22%3A538%2C%22y%22%3A494%2C%22width%22%3A315%2C%22height%22%3A30%2C%22text%22%3A%22KEY%2FSERVICE%2FYUPI.ICU%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22ua0f981cc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="Bh9AN" id="Bh9AN"><span data-lake-id="u0de23490" id="u0de23490" style="color: rgb(31, 35, 40)">2）列表结构。</span></h4><p data-lake-id="u8f55a1d3" id="u8f55a1d3"><span data-lake-id="u19895207" id="u19895207" style="color: rgb(31, 35, 40)">将所有的服务节点以列表的形式整体作为 value。</span></p><p data-lake-id="u6fa43d24" id="u6fa43d24"><span data-lake-id="u637dfcd5" id="u637dfcd5" style="color: rgb(31, 35, 40)">如图：</span></p><p data-lake-id="ue1350185" id="ue1350185"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1711021233052-234ba9e6-6785-4b90-9f30-95ca97cb6804.jpeg%22%2C%22taskId%22%3A%22u61fd0fd7-5ec5-42a9-b434-c56b7798bde%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709635031133-06c13ac4-84e0-4fbb-80ba-c701aa6a6798-20240309122417258.jpg%22%2C%22size%22%3A34485%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1035%2C%22originHeight%22%3A657%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1A%20KEY%20SERVICE%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B91%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B92%20%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B93%20VALUE%20CODEFATHER.CN%20VALUEYUPI.ICU%20VALUELOCALHOST%3A8080%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A139%2C%22y%22%3A69%2C%22width%22%3A91%2C%22height%22%3A33%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1A%22%7D%2C%7B%22x%22%3A90%2C%22y%22%3A124%2C%22width%22%3A187%2C%22height%22%3A32%2C%22text%22%3A%22KEY%20SERVICE%22%7D%2C%7B%22x%22%3A110%2C%22y%22%3A504%2C%22width%22%3A147%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B91%22%7D%2C%7B%22x%22%3A422%2C%22y%22%3A504%2C%22width%22%3A149%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B92%22%7D%2C%7B%22x%22%3A753%2C%22y%22%3A504%2C%22width%22%3A150%2C%22height%22%3A31%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B93%22%7D%2C%7B%22x%22%3A673%2C%22y%22%3A555%2C%22width%22%3A306%2C%22height%22%3A34%2C%22text%22%3A%22VALUE%20CODEFATHER.CN%22%7D%2C%7B%22x%22%3A385%2C%22y%22%3A558%2C%22width%22%3A218%2C%22height%22%3A29%2C%22text%22%3A%22VALUEYUPI.ICU%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A556%2C%22width%22%3A321%2C%22height%22%3A31%2C%22text%22%3A%22VALUELOCALHOST%3A8080%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22u9f2c57d5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u95da0ac8" id="u95da0ac8"><span data-lake-id="uffaa9898" id="uffaa9898" style="color: rgb(31, 35, 40)">选择哪种存储结构呢？这个也会跟技术选型有关。</span></p><p data-lake-id="u9f0915e7" id="u9f0915e7"><span data-lake-id="u9d2d8afb" id="u9d2d8afb" style="color: rgb(31, 35, 40)">对于 ZooKeeper 和 Etcd 这种支持层级查询的中间件，用第一种结构会更清晰；</span></p><p data-lake-id="ue022bdcc" id="ue022bdcc"><span data-lake-id="u581b445a" id="u581b445a" style="color: rgb(31, 35, 40)">对于 Redis，由于本身就支持列表数据结构，可以选择第二种结构。</span></p><p data-lake-id="u9f35db80" id="u9f35db80"><span data-lake-id="u6aa98685" id="u6aa98685" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u24e82805" id="u24e82805"><span data-lake-id="uc05fcbc3" id="uc05fcbc3" style="color: rgb(31, 35, 40)">最后，一定要给 key 设置过期时间，比如默认 30 秒过期，这样如果服务提供者宕机了，也可以超时后自动移除。</span></p><p data-lake-id="uf9dcc661" id="uf9dcc661"><span data-lake-id="ub0a16f8a" id="ub0a16f8a" style="color: rgb(31, 35, 40)">做好整体的方案设计后，下面开发实现。</span></p><h2 data-lake-id="EuW6b" id="EuW6b"><span data-lake-id="u534abeaa" id="u534abeaa" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><h3 data-lake-id="q4IGq" id="q4IGq"><span data-lake-id="u9eed7dca" id="u9eed7dca" style="color: rgba(0, 0, 0, 0.85)">1、注册中心开发</span></h3><h4 data-lake-id="iXNV6" id="iXNV6"><span data-lake-id="u07661c91" id="u07661c91" style="color: rgb(31, 35, 40)">1）注册信息定义。</span></h4><p data-lake-id="ud682d466" id="ud682d466"><span data-lake-id="uad9d4b49" id="uad9d4b49" style="color: rgb(31, 35, 40)">在 model 包下新建</span><span data-lake-id="u6d6e2b14" id="u6d6e2b14" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u31762f4d" id="u31762f4d" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceMetaInfo</span><span data-lake-id="u074e3008" id="u074e3008" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u429a4024" id="u429a4024" style="color: rgb(31, 35, 40)">类，封装服务的注册信息，包括服务名称、服务版本号、服务地址（域名和端口号）、服务分组等。</span></p><p data-lake-id="uf8e69cf8" id="uf8e69cf8"><span data-lake-id="u84624e04" id="u84624e04" style="color: rgb(31, 35, 40)">同时</span><span data-lake-id="u15c864b9" id="u15c864b9" style="color: rgb(31, 35, 40)">需要给</span><span data-lake-id="u37583f04" id="u37583f04" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u319572dd" id="u319572dd" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceMetaInfo</span><span data-lake-id="ub876618e" id="ub876618e" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="uf3467947" id="uf3467947" style="color: rgb(31, 35, 40)">增加一些工具方法，用于获取服务注册键名、获取服务注册节点键名等。</span></p><p data-lake-id="u8b427da9" id="u8b427da9"><span data-lake-id="u5471b845" id="u5471b845" style="color: rgb(31, 35, 40)">可以把版本号和分组都放到服务键名中，就可以在查询时根据这些参数获取对应版本和分组的服务了。</span></p><p data-lake-id="u7660b8f0" id="u7660b8f0"><span data-lake-id="u579aae92" id="u579aae92" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u0311c9df" id="u0311c9df"><span data-lake-id="u43cbcd1c" id="u43cbcd1c" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.model%3B%5Cn%5Cnimport%20cn.hutool.core.util.StrUtil%3B%5Cnimport%20lombok.Data%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%9C%8D%E5%8A%A1%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%88%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cn%40Data%5Cnpublic%20class%20ServiceMetaInfo%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceName%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceVersion%20%3D%20%5C%221.0%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%9F%9F%E5%90%8D%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceHost%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3%E5%8F%B7%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Integer%20servicePort%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%88%86%E7%BB%84%EF%BC%88%E5%BE%85%E5%AE%9E%E7%8E%B0%EF%BC%89%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceGroup%20%3D%20%5C%22default%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%5Cn%20%20%20%20%20*%20%E6%A0%BC%E5%BC%8F%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%90%8D%EF%BC%9A%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%88%EF%BC%9A%E6%9C%8D%E5%8A%A1%E7%BB%84%EF%BC%89%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20java.lang.String%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2016%3A48%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20String%20getServiceKey()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%8E%E7%BB%AD%E5%8F%AF%E6%B7%BB%E5%8A%A0%E5%88%86%E7%BB%84%5Cn%20%20%20%20%20%20%20%20%2F%2F%20return%20String.format(%5C%22%25s%3A%25s%3A%25s%5C%22%2CserviceName%2CserviceVersion%2CserviceGroup)%3B%5Cn%20%20%20%20%20%20%20%20return%20String.format(%5C%22%25s%3A%25s%5C%22%2C%20serviceName%2C%20serviceVersion)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E8%8A%82%E7%82%B9%E9%94%AE%E5%90%8D%5Cn%20%20%20%20%20*%20%E6%A0%BC%E5%BC%8F%EF%BC%9A%E9%94%AE%E5%90%8D%2F%E6%B3%A8%E5%86%8C%E5%9C%B0%E5%9D%80%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20java.lang.String%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2016%3A49%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20String%20getServiceNodeKey()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20String.format(%5C%22%25s%2F%25s%3A%25s%5C%22%2C%20getServiceKey()%2C%20serviceHost%2C%20servicePort)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20java.lang.String%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2020%3A19%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20String%20getServiceAddress()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(StrUtil.contains(%5C%22http%5C%22%2C%20serviceHost))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20String.format(%5C%22http%3A%2F%2F%25s%3A%25s%5C%22%2C%20serviceHost%2C%20servicePort)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20String.format(%5C%22%25s%3A%25s%5C%22%2C%20serviceHost%2C%20servicePort)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vgaRu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u077af648" id="u077af648"><br></p><p data-lake-id="uefe8717b" id="uefe8717b"><span data-lake-id="u2b39a1e3" id="u2b39a1e3" style="color: rgb(31, 35, 40)">由于注册信息里包含了服务版本号字段，所以我们也可以给 RpcRequest 对象补充服务版本号字段，可以先作为预留字段，默认值为 &quot;1.0&quot;，后续再自行实现。</span></p><p data-lake-id="ue82341be" id="ue82341be"><span data-lake-id="u7dc4cf14" id="u7dc4cf14" style="color: rgb(31, 35, 40)">在 RpcConstant 常量类中补充默认服务版本常量：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.constant%3B%5Cn%5Cn%2F**%5Cn%20*%20RPC%20%E7%9B%B8%E5%85%B3%E5%B8%B8%E9%87%8F%5Cn%20*%2F%5Cnpublic%20interface%20RpcConstant%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%89%8D%E7%BC%80%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20DEFAULT_CONFIG_PREFIX%20%3D%20%5C%22rpc%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%BB%98%E8%AE%A4%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20DEFAULT_SERVICE_VERSION%20%3D%20%5C%221.0%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Bu0XU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua12efb5b" id="ua12efb5b"><span data-lake-id="u9bfa26d4" id="u9bfa26d4" style="color: rgb(31, 35, 40)">在 RpcRequest 请求类中使用该常量，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.model%3B%5Cn%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20lombok.AllArgsConstructor%3B%5Cnimport%20lombok.Builder%3B%5Cnimport%20lombok.Data%3B%5Cnimport%20lombok.NoArgsConstructor%3B%5Cn%5Cnimport%20java.io.Serializable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%B0%81%E8%A3%85%E8%B0%83%E7%94%A8%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cn%40Data%5Cn%40Builder%5Cn%40NoArgsConstructor%5Cn%40AllArgsConstructor%5Cnpublic%20class%20RpcRequest%20implements%20Serializable%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceName%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20methodName%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceVersion%20%3D%20RpcConstant.DEFAULT_SERVICE_VERSION%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Class%3C%3F%3E%5B%5D%20parameterTypes%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Object%5B%5D%20args%3B%5Cn%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GgXi4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="e6O0j" id="e6O0j"><span data-lake-id="uddd50256" id="uddd50256" style="color: rgb(31, 35, 40)">2）注册中心配置。</span></h4><p data-lake-id="u4a93bbd5" id="u4a93bbd5"><span data-lake-id="uf40ee493" id="uf40ee493" style="color: rgb(31, 35, 40)">在 config 包下编写注册中心配置类</span><span data-lake-id="ue6c970b7" id="ue6c970b7" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="uec8f98a1" id="uec8f98a1" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RegistryConfig</span><span data-lake-id="u34c27df3" id="u34c27df3" style="color: rgb(31, 35, 40)">，让用户配置连接注册中心所需的信息，比如注册中心类别、注册中心地址、用户名、密码、连接超时时间等。</span></p><p data-lake-id="u6764b3c2" id="u6764b3c2"><span data-lake-id="ubf52e6a8" id="ubf52e6a8" style="color: rgb(31, 35, 40)">代码如下</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.config%3B%5Cn%5Cnimport%20lombok.Data%3B%5Cn%5Cn%2F**%5Cn%20*%20RPC%E6%A1%86%E6%9E%B6%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%85%8D%E7%BD%AE%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cn%40Data%5Cnpublic%20class%20RegistryConfig%20%7B%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%B1%BB%E5%88%AB%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20registry%20%3D%20%5C%22etcd%5C%22%3B%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%9C%B0%E5%9D%80%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20address%20%3D%20%5C%22http%3A%2F%2Flocalhost%3A2380%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%94%A8%E6%88%B7%E5%90%8D%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20username%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%AF%86%E7%A0%81%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20password%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%EF%BC%88ms%EF%BC%89%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Long%20timeout%20%3D%201000000L%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b8BBj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8c18326e" id="u8c18326e"><span data-lake-id="ue177382f" id="ue177382f" style="color: rgb(31, 35, 40)">还要为 RpcConfig 全局配置补充注册中心配置，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20RegistryConfig%20registryConfig%20%3D%20new%20RegistryConfig()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mJsPj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="En1bK" id="En1bK"><span data-lake-id="u856be6e3" id="u856be6e3" style="color: rgb(31, 35, 40)">3）注册中心接口。</span></h4><p data-lake-id="u44d43fdf" id="u44d43fdf"><span data-lake-id="u49fad2e7" id="u49fad2e7" style="color: rgb(31, 35, 40)">遵循可扩展设计，先写一个注册中心接口，后续可以实现多种不同的注册中心，并且和序列化器一样，可以使用 SPI 机制动态加载。</span></p><p data-lake-id="u803f2aff" id="u803f2aff"><span data-lake-id="uafd8abaf" id="uafd8abaf" style="color: rgb(31, 35, 40)">注册中心接口代码如下，主要是提供了初始化、注册服务、注销服务、服务发现（获取服务节点列表）、服务销毁等方法。</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%8E%A5%E5%8F%A3%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20-18%3A22%5Cn%20*%2F%5Cnpublic%20interface%20Registry%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20registryConfig%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2018%3A24%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20init(RegistryConfig%20registryConfig)%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceMetaInfo%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2018%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20register(ServiceMetaInfo%20serviceMetaInfo)%20throws%20Exception%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E9%94%80%E6%9C%8D%E5%8A%A1%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceMetaInfo%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2018%3A26%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20unRegister(ServiceMetaInfo%20serviceMetaInfo)%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%88%E8%8E%B7%E5%8F%96%E6%9F%90%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9%EF%BC%8C%E6%B6%88%E8%B4%B9%E7%AB%AF%EF%BC%89%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceKey%3A%5Cn%20%20%20%20%20*%20%40return%20java.util.List%3Ccom.yybf.chenrpc.model.ServiceMetaInfo%3E%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2018%3A27%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20List%3CServiceMetaInfo%3E%20serviceDiscovery(String%20serviceKey)%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E9%94%80%E6%AF%81%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2018%3A27%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20destroy()%3B%5Cn%5Cn%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yrdLO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="vZNmE" id="vZNmE"><span data-lake-id="u58f9d11b" id="u58f9d11b" style="color: rgb(31, 35, 40)">4）Etcd 注册中心实现。</span></h4><p data-lake-id="ub3f62174" id="ub3f62174"><span data-lake-id="u3122e2fe" id="u3122e2fe" style="color: rgb(31, 35, 40)">在 registry 目录下新建</span><span data-lake-id="u7e1bb4d4" id="u7e1bb4d4" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u80fe77c5" id="u80fe77c5" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">EtcdRegistry</span><span data-lake-id="u7a56e744" id="u7a56e744" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u51e5e25b" id="u51e5e25b" style="color: rgb(31, 35, 40)">类，实现注册中心接口，先完成初始化方法，读取注册中心配置并初始化客户端对象。</span></p><p data-lake-id="u22852ecc" id="u22852ecc"><span data-lake-id="uc82972c7" id="uc82972c7" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20cn.hutool.json.JSONUtil%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20io.etcd.jetcd.*%3B%5Cnimport%20io.etcd.jetcd.options.GetOption%3B%5Cnimport%20io.etcd.jetcd.options.PutOption%3B%5Cn%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.time.Duration%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cnimport%20java.util.stream.Collectors%3B%5Cn%5Cn%2F**%5Cn%20*%20Etcd%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cnpublic%20class%20EtcdRegistry%20implements%20Registry%20%7B%5Cn%5Cn%20%20%20%20private%20Client%20client%3B%5Cn%5Cn%20%20%20%20private%20KV%20kvClient%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E8%8A%82%E7%82%B9%20--%20%20Etcd%20%E9%94%AE%E5%AD%98%E5%82%A8%E7%9A%84%E6%A0%B9%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20final%20String%20ETCD_ROOT_PATH%20%3D%20%5C%22%2Frpc%2F%5C%22%3B%5Cn%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20init(RegistryConfig%20registryConfig)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AB%AF%E7%82%B9%5Cn%20%20%20%20%20%20%20%20client%20%3D%20Client.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.endpoints(registryConfig.getAddress())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.connectTimeout(Duration.ofMillis(registryConfig.getTimeout()))%20%2F%2F%20%E6%AD%A4%E6%96%B9%E6%B3%95%E4%BB%A51%E6%AF%AB%E7%A7%92%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%BF%94%E5%9B%9E%E8%A1%A8%E7%A4%BA%E6%97%B6%E9%97%B4%E7%9A%84Duration%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAkv%E5%AE%A2%E6%88%B7%E7%AB%AF%5Cn%20%20%20%20%20%20%20%20kvClient%20%3D%20client.getKVClient()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20register(ServiceMetaInfo%20serviceMetaInfo)%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AALease%E5%AE%A2%E6%88%B7%E7%AB%AF%5Cn%20%20%20%20%20%20%20%20Lease%20leaseClient%20%3D%20client.getLeaseClient()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA30%E7%A7%92%E7%9A%84%E7%A7%9F%E7%BA%A6%5Cn%20%20%20%20%20%20%20%20Long%20leaseId%20%3D%20leaseClient.grant(30).get().getID()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%A6%81%E5%AD%98%E5%82%A8%E7%9A%84%E9%94%AE%E5%80%BC%E5%AF%B9%5Cn%20%20%20%20%20%20%20%20String%20registerKey%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceMetaInfo.getServiceNodeKey()%3B%5Cn%20%20%20%20%20%20%20%20ByteSequence%20key%20%3D%20ByteSequence.from(registerKey%2C%20StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20ByteSequence%20value%20%3D%20ByteSequence.from(JSONUtil.toJsonStr(serviceMetaInfo)%2CStandardCharsets.UTF_8)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E9%94%AE%E5%80%BC%E5%AF%B9%E4%B8%8E%E7%A7%9F%E7%BA%A6%E5%85%B3%E8%81%94%E8%B5%B7%E6%9D%A5%EF%BC%8C%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%5Cn%20%20%20%20%20%20%20%20PutOption%20putOption%20%3D%20PutOption.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.withLeaseId(leaseId)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20kvClient.put(key%2Cvalue%2CputOption).get()%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20unRegister(ServiceMetaInfo%20serviceMetaInfo)%20%7B%5Cn%20%20%20%20%20%20%20%20kvClient.delete(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ByteSequence.from(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ETCD_ROOT_PATH%20%2B%20serviceMetaInfo.getServiceNodeKey()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2CStandardCharsets.UTF_8)%5Cn%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20List%3CServiceMetaInfo%3E%20serviceDiscovery(String%20serviceKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E5%89%8D%E7%BC%80%EF%BC%8C%E4%BB%8E%20Etcd%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%BB%93%E5%B0%BE%E8%A6%81%E5%8A%A0%20%E2%80%9C%20%2F%20%E2%80%9D%5Cn%20%20%20%20%20%20%20%20String%20searchPrefix%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceKey%20%2B%20%5C%22%2F%5C%22%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%9F%A5%E8%AF%A2%5Cn%20%20%20%20%20%20%20%20%20%20%20%20GetOption%20getOption%20%3D%20GetOption.builder().isPrefix(true).build()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CKeyValue%3E%20keyValues%20%3D%20kvClient.get(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ByteSequence.from(searchPrefix%2CStandardCharsets.UTF_8)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2CgetOption)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getKvs()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20keyValues.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(keyValue%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20value%20%3D%20keyValue.getValue().toString(StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20JSONUtil.toBean(value%2C%20ServiceMetaInfo.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.toList())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%5C%22%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20destroy()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E4%B8%8B%E7%BA%BF%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90%5Cn%20%20%20%20%20%20%20%20if(kvClient%20!%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20kvClient.close()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if(client%20!%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20client.close()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nYdnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue63cf29d" id="ue63cf29d"><span data-lake-id="u26106f14" id="u26106f14" style="color: rgb(31, 35, 40)">上述代码中，我们定义 Etcd 键存储的根路径为</span><span data-lake-id="u4f713c17" id="u4f713c17" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="uad64df1f" id="uad64df1f" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">/rpc/</span><span data-lake-id="uf403af51" id="uf403af51" style="color: rgb(31, 35, 40)">，为了区分不同的项目。</span></p><ul list="u723f392d"><li fid="u4713bf1c" data-lake-id="u20a83f07" id="u20a83f07"><span data-lake-id="u4206a010" id="u4206a010" style="color: rgb(31, 35, 40)">依次实现不同的方法，首先是服务注册，创建 key 并设置过期时间，value 为服务注册信息的 JSON 序列化。</span></li><li fid="u4713bf1c" data-lake-id="u9b79aee7" id="u9b79aee7"><span data-lake-id="u5bcda9ba" id="u5bcda9ba" style="color: rgb(31, 35, 40)">然后是服务注销，删除 key</span></li><li fid="u4713bf1c" data-lake-id="u7ddb8a13" id="u7ddb8a13"><span data-lake-id="u4cc95348" id="u4cc95348" style="color: rgb(31, 35, 40)">然后是服务发现，根据服务名称作为前缀，从 Etcd 获取服务下的节点列表</span></li><li fid="u4713bf1c" data-lake-id="u14fc4d79" id="u14fc4d79"><span data-lake-id="u5133f10d" id="u5133f10d" style="color: rgb(31, 35, 40)">最后是注册中心销毁，用于项目关闭后释放资源</span></li></ul><p data-lake-id="ucc7daa6f" id="ucc7daa6f"><span data-lake-id="u90cf916d" id="u90cf916d" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="IXPql" id="IXPql"><span data-lake-id="u029dd480" id="u029dd480" style="color: rgba(0, 0, 0, 0.85)">2、支持配置和扩展注册中心</span></h3><p data-lake-id="uddb85b94" id="uddb85b94"><span data-lake-id="ufa649976" id="ufa649976" style="color: rgb(31, 35, 40)">一个成熟的 RPC 框架可能会支持多个注册中心，像序列化器一样，我们的需求是，让开发者能够填写配置来指定使用的注册中心，并且支持自定义注册中心，让框架更易用、更利于扩展。</span></p><p data-lake-id="u56696523" id="u56696523"><span data-lake-id="udce67af7" id="udce67af7" style="color: rgb(31, 35, 40)">要实现这点，开发方式和序列化器也是一样的，都可以使用工厂创建对象、使用 SPI 动态加载自定义的注册中心。</span></p><h4 data-lake-id="vdD4m" id="vdD4m"><span data-lake-id="uf8210724" id="uf8210724" style="color: rgb(31, 35, 40)">1）注册中心常量。</span></h4><p data-lake-id="u05988848" id="u05988848"><span data-lake-id="uc60ccbc4" id="uc60ccbc4" style="color: rgb(31, 35, 40)">在 registry 包下新建</span><span data-lake-id="u37923aec" id="u37923aec" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u448fb6df" id="u448fb6df" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RegistryKeys</span><span data-lake-id="u880419f5" id="u880419f5" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u2bfddf3d" id="u2bfddf3d" style="color: rgb(31, 35, 40)">类，列举所有支持的注册中心键名。</span></p><p data-lake-id="u39c74d65" id="u39c74d65"><span data-lake-id="u206c0861" id="u206c0861" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.constant%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%A8%E6%9D%A5%E9%85%8D%E7%BD%AERPC%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cnpublic%20interface%20RpcConstant%20%7B%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E5%89%8D%E7%BC%80%EF%BC%9A%E8%A1%A8%E7%A4%BA%E5%8F%AA%E6%9C%89%E7%B1%BB%E4%BC%BC%20%E2%80%98rpc.xxx%20%3D%20xxx%E2%80%99%20%E7%9A%84%E9%85%8D%E7%BD%AE%E6%89%8D%E8%83%BD%E8%A2%AB%E5%8A%A0%E8%BD%BD%5Cn%20%20%20%20String%20DEFAULT_CONFIG_PREFIX%20%3D%20%5C%22rpc%5C%22%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%BB%98%E8%AE%A4%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20String%20DEFAULT_SERVICE_VERSION%20%3D%20%5C%221.0%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uEwt4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="XILfG" id="XILfG"><span data-lake-id="u133101ce" id="u133101ce" style="color: rgb(31, 35, 40)">2）使用工厂模式，支持根据 key 从 SPI 获取注册中心对象实例。</span></h4><p data-lake-id="uc269026b" id="uc269026b"><span data-lake-id="u6536348a" id="u6536348a" style="color: rgb(31, 35, 40)">在 registry 包下新建 </span><span data-lake-id="ub153b1d6" id="ub153b1d6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RegistryFactory</span><span data-lake-id="u109c56d8" id="u109c56d8" style="color: rgb(31, 35, 40)"> 类，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.spi.SpiLoader%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%B7%A5%E5%8E%82%EF%BC%88%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AF%B9%E8%B1%A1%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cnpublic%20class%20RegistryFactory%20%7B%5Cn%20%20%20%20static%20%7B%5Cn%20%20%20%20%20%20%20%20SpiLoader.load(Registry.class)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%BB%98%E8%AE%A4%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20final%20Registry%20CEFAULT_REGISTRY%20%3D%20new%20EtcdRegistry()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.registry.Registry%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F20%2019%3A57%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Registry%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SpiLoader.getInstance(Registry.class%2C%20key)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22crWs3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9550fdb8" id="u9550fdb8"><span data-lake-id="u82e5e1d2" id="u82e5e1d2" style="color: rgb(31, 35, 40)">这个类可以直接复制之前的 SerializerFactory，然后略做修改。可以发现，只要跑通了 SPI 机制，后续的开发就很简单了~</span></p><p data-lake-id="u64bf2b41" id="u64bf2b41"><span data-lake-id="u0b387152" id="u0b387152" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="ZVBcf" id="ZVBcf"><span data-lake-id="uf38c3745" id="uf38c3745" style="color: rgb(31, 35, 40)">3）编写SPI配置文件</span></h4><p data-lake-id="uf10ec79e" id="uf10ec79e"><span data-lake-id="u447bfd7e" id="u447bfd7e" style="color: rgb(31, 35, 40)">在 </span><span data-lake-id="ud412c325" id="ud412c325" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">META-INF</span><span data-lake-id="ua0535268" id="ua0535268" style="color: rgb(31, 35, 40)"> 的 </span><span data-lake-id="u8597c5a5" id="u8597c5a5" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">rpc/system</span><span data-lake-id="u1df797c2" id="u1df797c2" style="color: rgb(31, 35, 40)"> 目录下编写注册中心接口的 SPI 配置文件，文件名称为 </span><span data-lake-id="u7b3c9721" id="u7b3c9721" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">com.yupi.yurpc.registry.Registry</span><span data-lake-id="u342b7c06" id="u342b7c06" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="u242ccf4c" id="u242ccf4c"><span data-lake-id="u29db60ef" id="u29db60ef" style="color: rgb(31, 35, 40)">如图：</span></p><p data-lake-id="u987910cd" id="u987910cd"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1711022149076-f8ec11b8-d4a4-41bd-a60d-992a7ff18fd2.png%22%2C%22taskId%22%3A%22ufba4124b-8175-4d40-a7fa-6aaf9d7c3e4%22%2C%22clientId%22%3A%22u8a1b42d5-e0db-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1526%2C%22height%22%3A211%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A165814%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1526%2C%22originHeight%22%3A211%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BA%8C%20%E9%A1%B9%E7%9B%AE%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%20RPC%20CUSTOM%20ETCD-COM.YYBF.CHENRPC.REGISTRY.ETCDREGISTRY%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20SYSTEM%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20SERVICES%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A396%2C%22y%22%3A8%2C%22width%22%3A18%2C%22height%22%3A17%2C%22text%22%3A%22%E4%BA%8C%22%7D%2C%7B%22x%22%3A6%2C%22y%22%3A9%2C%22width%22%3A31%2C%22height%22%3A15%2C%22text%22%3A%22%E9%A1%B9%E7%9B%AE%22%7D%2C%7B%22x%22%3A530%2C%22y%22%3A10%2C%22width%22%3A261%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.REGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A509%2C%22y%22%3A42%2C%22width%22%3A212%2C%22height%22%3A20%2C%22text%22%3A%22%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%22%7D%2C%7B%22x%22%3A155%2C%22y%22%3A43%2C%22width%22%3A27%2C%22height%22%3A13%2C%22text%22%3A%22RPC%22%7D%2C%7B%22x%22%3A177%2C%22y%22%3A67%2C%22width%22%3A57%2C%22height%22%3A13%2C%22text%22%3A%22CUSTOM%22%7D%2C%7B%22x%22%3A567%2C%22y%22%3A74%2C%22width%22%3A433%2C%22height%22%3A21%2C%22text%22%3A%22ETCD-COM.YYBF.CHENRPC.REGISTRY.ETCDREGISTRY%22%7D%2C%7B%22x%22%3A197%2C%22y%22%3A90%2C%22width%22%3A273%2C%22height%22%3A16%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A116%2C%22width%22%3A53%2C%22height%22%3A16%2C%22text%22%3A%22SYSTEM%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A141%2C%22width%22%3A256%2C%22height%22%3A16%2C%22text%22%3A%22COM.YYBF.CHENRPC.REGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A196%2C%22y%22%3A165%2C%22width%22%3A272%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A152%2C%22y%22%3A190%2C%22width%22%3A60%2C%22height%22%3A14%2C%22text%22%3A%22SERVICES%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2348515d%22%2C%22id%22%3A%22uf89dcc07%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ud6625fbe" id="ud6625fbe"><span data-lake-id="u4768afbb" id="u4768afbb" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22etcd%3Dcom.yupi.yurpc.registry.EtcdRegistry%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KkNLn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="LB8kq" id="LB8kq"><span data-lake-id="u4b49fbd2" id="u4b49fbd2" style="color: rgb(31, 35, 40)">4）初始化注册中心。</span></h4><p data-lake-id="ua6c50ad5" id="ua6c50ad5"><span data-lake-id="uc51d67ee" id="uc51d67ee" style="color: rgb(31, 35, 40)">由于服务提供者和服务消费者都需要和注册中心建立连接，是一个 RPC 框架启动必不可少的环节，所以可以将初始化流程放在 </span><span data-lake-id="uae98095c" id="uae98095c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RpcApplication</span><span data-lake-id="ud8168ccb" id="ud8168ccb" style="color: rgb(31, 35, 40)"> 类中。</span></p><p data-lake-id="uc3d20ab2" id="uc3d20ab2"><span data-lake-id="ua5c3329f" id="ua5c3329f" style="color: rgb(31, 35, 40)">修改其 </span><span data-lake-id="udb04a32d" id="udb04a32d" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">init</span><span data-lake-id="u9b54d5ec" id="u9b54d5ec" style="color: rgb(31, 35, 40)"> 方法代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BC%A0%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%5Cn%20*%5Cn%20*%20%40param%20newRpcConfig%5Cn%20*%2F%5Cnpublic%20static%20void%20init(RpcConfig%20newRpcConfig)%20%7B%5Cn%20%20%20%20rpcConfig%20%3D%20newRpcConfig%3B%5Cn%20%20%20%20log.info(%5C%22rpc%20init%2C%20config%20%3D%20%7B%7D%5C%22%2C%20newRpcConfig.toString())%3B%5Cn%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20registry.init(registryConfig)%3B%5Cn%20%20%20%20log.info(%5C%22registry%20init%2C%20config%20%3D%20%7B%7D%5C%22%2C%20registryConfig)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z5fxG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u3f367e29" id="u3f367e29"><br></p><h3 data-lake-id="pvsj0" id="pvsj0"><span data-lake-id="u91b21827" id="u91b21827" style="color: rgba(0, 0, 0, 0.85)">3、完成调用流程</span></h3><p data-lake-id="uc2d9698e" id="uc2d9698e"><span data-lake-id="uefad5bbe" id="uefad5bbe" style="color: rgb(31, 35, 40)">下面要改造服务消费者调用服务的代码，跑通整个动态获取节点并调用的流程。</span></p><h4 data-lake-id="OR2W4" id="OR2W4"><span data-lake-id="ub150361b" id="ub150361b" style="color: rgb(31, 35, 40)">1）服务消费者需要先从注册中心获取节点信息，再得到调用地址并执行。</span></h4><p data-lake-id="u29254eb1" id="u29254eb1"><span data-lake-id="u3cdc49ed" id="u3cdc49ed" style="color: rgb(31, 35, 40)">需要给 </span><span data-lake-id="u6817ab9b" id="u6817ab9b" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceMetaInfo</span><span data-lake-id="ud8f92d67" id="ud8f92d67" style="color: rgb(31, 35, 40)"> 类增加一个方法，便于获取可调用的地址，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E8%8E%B7%E5%8F%96%E5%AE%8C%E6%95%B4%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80%5Cn%20*%5Cn%20*%20%40return%5Cn%20*%2F%5Cnpublic%20String%20getServiceAddress()%20%7B%5Cn%20%20%20%20if%20(!StrUtil.contains(serviceHost%2C%20%5C%22http%5C%22))%20%7B%5Cn%20%20%20%20%20%20%20%20return%20String.format(%5C%22http%3A%2F%2F%25s%3A%25s%5C%22%2C%20serviceHost%2C%20servicePort)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20String.format(%5C%22%25s%3A%25s%5C%22%2C%20serviceHost%2C%20servicePort)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hedMs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="PCoYI" id="PCoYI"><span data-lake-id="uf3b0c639" id="uf3b0c639" style="color: rgb(31, 35, 40)">2）修改服务代理 ServiceProxy 类，更改调用逻辑。</span></h4><p data-lake-id="u8d25e08e" id="u8d25e08e"><span data-lake-id="u63573224" id="u63573224" style="color: rgb(31, 35, 40)">修改的部分代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22...%5Cn%5Cn%2F%2F%20%E5%BA%8F%E5%88%97%E5%8C%96%5Cnbyte%5B%5D%20bodyBytes%20%3D%20serializer.serialize(rpcRequest)%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%5CnRpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5CnRegistry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5CnServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5CnserviceMetaInfo.setServiceName(serviceName)%3B%5CnserviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5CnList%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cnif%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80%5C%22)%3B%5Cn%7D%5Cn%2F%2F%20%E6%9A%82%E6%97%B6%E5%85%88%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%5CnServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20serviceMetaInfoList.get(0)%3B%5Cn%5Cn%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cntry%20(HttpResponse%20httpResponse%20%3D%20HttpRequest.post(selectedServiceMetaInfo.getServiceAddress())%5Cn%20%20%20%20%20%20%20%20.body(bodyBytes)%5Cn%20%20%20%20%20%20%20%20.execute())%20%7B%5Cn%20%20%20%20byte%5B%5D%20result%20%3D%20httpResponse.bodyBytes()%3B%5Cn%20%20%20%20%2F%2F%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20RpcResponse%20rpcResponse%20%3D%20serializer.deserialize(result%2C%20RpcResponse.class)%3B%5Cn%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%7D%5Cn%5Cn...%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ze1By%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u033bd517" id="u033bd517"><span data-lake-id="u3d1ffad5" id="u3d1ffad5" style="color: rgb(31, 35, 40)">注意，从注册中心获取到的服务节点地址可能是多个。上述代码中，我们为了方便，暂时先取第一个，之后会对这里的代码进行优化。</span></p><p data-lake-id="udb632fa5" id="udb632fa5"><span data-lake-id="u95c4c476" id="u95c4c476" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceProxy</span><span data-lake-id="udfad8f94" id="udfad8f94" style="color: rgb(31, 35, 40)"> 的完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxy%20%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20cn.hutool.http.HttpRequest%3B%5Cnimport%20cn.hutool.http.HttpResponse%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20Serializer%20serializer%20%3D%20new%20JdkSerializer()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%20%2B%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(RpcApplication.getRpcConfig().getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20serializer.toString())%3B%5Cn%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%AF%B7%E6%B1%82%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20bodyBytes%20%3D%20serializer.serializer(rpcRequest)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E6%98%AF%E7%A1%AC%E7%BC%96%E7%A0%81%EF%BC%8C%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E5%8E%BB%E8%A7%A3%E5%86%B3%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20try(HttpResponse%20httpResponse%20%3D%20HttpRequest.post(%5C%22http%3A%2F%2Flocalhost%3A%5C%22%20%2B%20RpcApplication.getRpcConfig().getServerPort()).body(bodyBytes).execute())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20httpResponse.bodyBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%93%8D%E5%BA%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20serializer.deserializer(result%2C%20RpcResponse.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E6%9D%A5%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8EserviceMetaInfo%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8EEtcd%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if(CollUtil.isEmpty(serviceMetaInfoList))%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E6%9A%82%E6%97%B6%E5%85%88%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AAmateInfo%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectServiceMetaInfo%20%3D%20serviceMetaInfoList.get(0)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try(HttpResponse%20httpResponse%20%3D%20HttpRequest.post(selectServiceMetaInfo.getServiceAddress())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.body(bodyBytes)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.execute())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20result%20%3D%20httpResponse.bodyBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20serializer.deserializer(result%2CRpcResponse.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxy%20%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22EqOSQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h2 data-lake-id="x4sJd" id="x4sJd"><span data-lake-id="u301096e9" id="u301096e9" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><h3 data-lake-id="n2mCQ" id="n2mCQ"><span data-lake-id="u8fd425f2" id="u8fd425f2" style="color: rgba(0, 0, 0, 0.85)">1、注册中心测试</span></h3><p data-lake-id="u9ab3a691" id="u9ab3a691"><span data-lake-id="u4293b29b" id="u4293b29b" style="color: rgb(31, 35, 40)">首先验证注册中心能否正常完成服务注册、注销、服务发现。</span></p><p data-lake-id="u9d939de5" id="u9d939de5"><span data-lake-id="uc5ce2445" id="uc5ce2445" style="color: rgb(31, 35, 40)">编写单元测试类 </span><span data-lake-id="u089fa122" id="u089fa122" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RegistryTest</span><span data-lake-id="u6b42b809" id="u6b42b809" style="color: rgb(31, 35, 40)">，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.utils.ConfigUtil%3B%5Cnimport%20org.junit.Assert%3B%5Cnimport%20org.junit.Before%3B%5Cnimport%20org.junit.Test%3B%5Cn%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%AF%B9EtcdRegistry%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%5Cn%20*%20%40date%202024%2F3%2F20-20%3A43%5Cn%20*%2F%5Cnpublic%20class%20RegistryTest%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20final%20Registry%20registry%20%3D%20new%20EtcdRegistry()%3B%5Cn%5Cn%20%20%20%20%40Before%5Cn%20%20%20%20public%20void%20Init()%20%7B%5Cn%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20new%20RegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20registryConfig.setAddress(%5C%22http%3A%2F%2Flocalhost%3A2379%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20registry.init(registryConfig)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20Register()%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(%5C%22chenService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(%5C%221.0.1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(%5C%22localhost%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(1145)%3B%5Cn%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(%5C%22chenService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(%5C%221.0.1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(%5C%22localhost%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(1146)%3B%5Cn%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(%5C%22chenService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(%5C%221.1.0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(%5C%22localhost%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(1145)%3B%5Cn%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20UnRegister()%20%7B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(%5C%22chenService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(%5C%221.0.1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(%5C%22localhost%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(1145)%3B%5Cn%20%20%20%20%20%20%20%20registry.unRegister(serviceMetaInfo)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20ServiceDiscovery()%20%7B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(%5C%22chenService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(%5C%221.0.1%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20String%20serviceKey%20%3D%20serviceMetaInfo.getServiceKey()%3B%5Cn%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceKey)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(serviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20Assert.assertNotNull(serviceMetaInfoList)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ay87x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u68e6c038" id="u68e6c038"><span data-lake-id="ue0ec3197" id="ue0ec3197" style="color: rgb(31, 35, 40)">服务注册后，打开 EtcdKeeper 可视化界面，能够看到注册成功的服务节点信息，如图：</span></p><p data-lake-id="uf8101f65" id="uf8101f65"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710940304877-b7ac0016-77cb-4a4f-bb84-e16d7f55a830.png%22%2C%22taskId%22%3A%22u3290793e-e29c-4ebc-9ce5-bc4a8e3c551%22%2C%22clientId%22%3A%22u85cb6058-63c5-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1405%2C%22height%22%3A405%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A32115%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1405%2C%22originHeight%22%3A405%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22127.0.0.1%3A2379%20NODES%20%2FRPC%2FCHENSERVICE%3A1.1.0%2FLOCALHOST%3A1145%20123456%20%5C%22SERVICENAME%5C%22%3A%20%5C%22CHENSERVICE%5C%22%2C%20RPC%20%5C%22SERVICEVERSION%5C%22%3A%20%5C%221.1.0%5C%22%2C%20CHENSERVICE%3A1.0.1%20%5C%22SERVICEHOST%5C%22%3A%20%5C%22LOCALHOST%5C%22%20%5C%22SERVICEPORT%5C%22%3A%201145%2C%20LOCALHOST%3A1145%20%5C%22SERVICEGROUP%5C%22%3A%20%5C%22DEFAULT%5C%22%20LOCALHOST%3A1146%20CHENSERVICE%3A1.1.0%20LOCALHOST%3A1145%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A66%2C%22y%22%3A33%2C%22width%22%3A129%2C%22height%22%3A15%2C%22text%22%3A%22127.0.0.1%3A2379%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A95%2C%22width%22%3A55%2C%22height%22%3A15%2C%22text%22%3A%22NODES%22%7D%2C%7B%22x%22%3A477%2C%22y%22%3A94%2C%22width%22%3A336%2C%22height%22%3A18%2C%22text%22%3A%22%2FRPC%2FCHENSERVICE%3A1.1.0%2FLOCALHOST%3A1145%22%7D%2C%7B%22x%22%3A516%2C%22y%22%3A153%2C%22width%22%3A12%2C%22height%22%3A92%2C%22text%22%3A%22123456%22%7D%2C%7B%22x%22%3A587%2C%22y%22%3A155%2C%22width%22%3A254%2C%22height%22%3A18%2C%22text%22%3A%22%5C%22SERVICENAME%5C%22%3A%20%5C%22CHENSERVICE%5C%22%2C%22%7D%2C%7B%22x%22%3A85%2C%22y%22%3A169%2C%22width%22%3A28%2C%22height%22%3A14%2C%22text%22%3A%22RPC%22%7D%2C%7B%22x%22%3A587%2C%22y%22%3A175%2C%22width%22%3A221%2C%22height%22%3A15%2C%22text%22%3A%22%5C%22SERVICEVERSION%5C%22%3A%20%5C%221.1.0%5C%22%2C%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A193%2C%22width%22%3A138%2C%22height%22%3A18%2C%22text%22%3A%22CHENSERVICE%3A1.0.1%22%7D%2C%7B%22x%22%3A586%2C%22y%22%3A194%2C%22width%22%3A118%2C%22height%22%3A15%2C%22text%22%3A%22%5C%22SERVICEHOST%5C%22%3A%22%7D%2C%7B%22x%22%3A716%2C%22y%22%3A194%2C%22width%22%3A98%2C%22height%22%3A15%2C%22text%22%3A%22%5C%22LOCALHOST%5C%22%22%7D%2C%7B%22x%22%3A586%2C%22y%22%3A212%2C%22width%22%3A119%2C%22height%22%3A16%2C%22text%22%3A%22%5C%22SERVICEPORT%5C%22%3A%22%7D%2C%7B%22x%22%3A713%2C%22y%22%3A213%2C%22width%22%3A46%2C%22height%22%3A15%2C%22text%22%3A%221145%2C%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A223%2C%22width%22%3A115%2C%22height%22%3A16%2C%22text%22%3A%22LOCALHOST%3A1145%22%7D%2C%7B%22x%22%3A588%2C%22y%22%3A232%2C%22width%22%3A215%2C%22height%22%3A16%2C%22text%22%3A%22%5C%22SERVICEGROUP%5C%22%3A%20%5C%22DEFAULT%5C%22%22%7D%2C%7B%22x%22%3A125%2C%22y%22%3A250%2C%22width%22%3A112%2C%22height%22%3A16%2C%22text%22%3A%22LOCALHOST%3A1146%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A277%2C%22width%22%3A138%2C%22height%22%3A16%2C%22text%22%3A%22CHENSERVICE%3A1.1.0%22%7D%2C%7B%22x%22%3A126%2C%22y%22%3A305%2C%22width%22%3A112%2C%22height%22%3A14%2C%22text%22%3A%22LOCALHOST%3A1145%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfcfb%22%2C%22id%22%3A%22uoBxS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u219013c0" id="u219013c0"><span data-lake-id="u38d9ff3a" id="u38d9ff3a" style="color: rgb(31, 35, 40)">可以发现 key 列表是树形展示的，因为 Etcd 是层级结构，很清晰。</span></p><h3 data-lake-id="G6xTB" id="G6xTB"><span data-lake-id="u86841243" id="u86841243" style="color: rgba(0, 0, 0, 0.85)">2、完整流程测试</span></h3><p data-lake-id="ua758f15d" id="ua758f15d"><span data-lake-id="u0d802eb7" id="u0d802eb7" style="color: rgb(31, 35, 40)">在</span><span data-lake-id="u4d160dd0" id="u4d160dd0" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u7a026fbf" id="u7a026fbf" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">example-provider</span><span data-lake-id="u32865822" id="u32865822" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u9f4a9393" id="u9f4a9393" style="color: rgb(31, 35, 40)">模块下新增服务提供者示例类，需要初始化 RPC 框架并且将服务手动注册到注册中心上。</span></p><p data-lake-id="ub9d584cd" id="ub9d584cd"><span data-lake-id="u45bcb05d" id="u45bcb05d" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.provider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.server.HttpServer%3B%5Cnimport%20com.yybf.chenrpc.server.VertxHttpServer%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%A4%BA%E4%BE%8B%5Cn%20*%20%E6%B5%8B%E8%AF%95%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8A%A0%E8%BD%BD%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%5Cn%20*%2F%5Cnpublic%20class%20ProviderExample%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20RPC%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20%20%20%20RpcApplication.init()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20UserService.class.getName()%3B%5Cn%20%20%20%20%20%20%20%20LocalRegistry.register(serviceName%2CUserServiceImpl.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E5%88%B0%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(rpcConfig.getServerHost())%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(rpcConfig.getServerPort())%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8web%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20HttpServer%20httpServer%20%3D%20new%20VertxHttpServer()%3B%5Cn%20%20%20%20%20%20%20%20httpServer.doStart(RpcApplication.getRpcConfig().getServerPort())%3B%5Cn%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zcepN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u37a059fa" id="u37a059fa"><span data-lake-id="u37413b4b" id="u37413b4b" style="color: rgb(31, 35, 40)">服务消费者的代码不用改动，我们依然是先启动提供者、再启动消费者，验证流程能否正常跑通。</span></p><p data-lake-id="u284d9b1b" id="u284d9b1b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1710940995372-cb629ebf-df5d-419f-bcda-d10b48bff2c8.png%22%2C%22taskId%22%3A%22u4c50b05c-d294-4550-b7aa-392ef1160ba%22%2C%22clientId%22%3A%22u85cb6058-63c5-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1066%2C%22height%22%3A227%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A172386%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1066%2C%22originHeight%22%3A227%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22PROVIDEREXAMPLE%20CONSUMEREXAMPLE%20HEADERS-GRPCHTTP2RESPONSEHEADERS%5BGRPC-STATUS%3A%200%2C%20G%5D%202%2C%20GRPC-MESSAGE%3A%20%5D%20PADDING-0%20ENDSTREAM-TRUE%2021-%20%20%20%20%20%203333333-%20SVERTERSOP%20%20%20%20DEREAD'%20DERV%20-%20%20%20%20%20%20AJDETRESTHANDLER%20--%20%20%20%20%20%20%20%20%20DAT%2C%20%20EXCEPTION%20IN%20THREAD%5C%22MAIN%5C%22JAVA.LANG.RUNTIMEEXCEPTION%20GREATEBREAKPOINT%3A%20%3A%20%E6%99%AE%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%20AT%20COM.YYBF.CHENRPC.PROXY.SERVICEPROXY.INVOKE(SERVICEPROXY.JAVA%3A88)%20AT%20JDK.PROXY1%2FJDK.PROXY1.%24PROXY0.GETUSER(UNKNOWN%20SO%20N%20SOURCE)%20.TESTCONSUMER(CONSUMEREXAMPLE.JAVA%3A26)%20AT%20COM.YYBF.EXAMPLE.CONSUMER.CONSUMEREXAMPLE%20MPLE.MAIN(CONSUMEREXAMPLE.JAVA%3A17)%20AT%20COM.YYBF.EXAMPLE.CONSUMER.CONSUMEREXAMPLE%20%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%2C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A20%2C%22y%22%3A1%2C%22width%22%3A102%2C%22height%22%3A12%2C%22text%22%3A%22PROVIDEREXAMPLE%22%7D%2C%7B%22x%22%3A177%2C%22y%22%3A1%2C%22width%22%3A112%2C%22height%22%3A12%2C%22text%22%3A%22CONSUMEREXAMPLE%22%7D%2C%7B%22x%22%3A28%2C%22y%22%3A40%2C%22width%22%3A398%2C%22height%22%3A16%2C%22text%22%3A%22HEADERS-GRPCHTTP2RESPONSEHEADERS%5BGRPC-STATUS%3A%200%2C%20G%5D%22%7D%2C%7B%22x%22%3A408%2C%22y%22%3A40%2C%22width%22%3A336%2C%22height%22%3A17%2C%22text%22%3A%222%2C%20GRPC-MESSAGE%3A%20%5D%20PADDING-0%20ENDSTREAM-TRUE%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A60%2C%22width%22%3A1040%2C%22height%22%3A19%2C%22text%22%3A%2221-%20%20%20%20%20%203333333-%20SVERTERSOP%20%20%20%20DEREAD'%20DERV%20-%20%20%20%20%20%20AJDETRESTHANDLER%20--%20%20%20%20%20%20%20%20%20DAT%2C%20%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A83%2C%22width%22%3A702%2C%22height%22%3A19%2C%22text%22%3A%22EXCEPTION%20IN%20THREAD%5C%22MAIN%5C%22JAVA.LANG.RUNTIMEEXCEPTION%20GREATEBREAKPOINT%3A%20%3A%20%E6%99%AE%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%22%7D%2C%7B%22x%22%3A51%2C%22y%22%3A105%2C%22width%22%3A535%2C%22height%22%3A18%2C%22text%22%3A%22AT%20COM.YYBF.CHENRPC.PROXY.SERVICEPROXY.INVOKE(SERVICEPROXY.JAVA%3A88)%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A129%2C%22width%22%3A400%2C%22height%22%3A15%2C%22text%22%3A%22AT%20JDK.PROXY1%2FJDK.PROXY1.%24PROXY0.GETUSER(UNKNOWN%20SO%22%7D%2C%7B%22x%22%3A430%2C%22y%22%3A130%2C%22width%22%3A66%2C%22height%22%3A14%2C%22text%22%3A%22N%20SOURCE)%22%7D%2C%7B%22x%22%3A412%2C%22y%22%3A149%2C%22width%22%3A295%2C%22height%22%3A17%2C%22text%22%3A%22.TESTCONSUMER(CONSUMEREXAMPLE.JAVA%3A26)%22%7D%2C%7B%22x%22%3A51%2C%22y%22%3A151%2C%22width%22%3A343%2C%22height%22%3A15%2C%22text%22%3A%22AT%20COM.YYBF.EXAMPLE.CONSUMER.CONSUMEREXAMPLE%22%7D%2C%7B%22x%22%3A381%2C%22y%22%3A172%2C%22width%22%3A262%2C%22height%22%3A16%2C%22text%22%3A%22MPLE.MAIN(CONSUMEREXAMPLE.JAVA%3A17)%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A174%2C%22width%22%3A344%2C%22height%22%3A15%2C%22text%22%3A%22AT%20COM.YYBF.EXAMPLE.CONSUMER.CONSUMEREXAMPLE%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A214%2C%22width%22%3A166%2C%22height%22%3A14%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%2C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22consumer%E8%8E%B7%E5%8F%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%9C%AA%E6%B3%A8%E5%86%8C%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233f4956%22%2C%22id%22%3A%22xQIw3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u9e82e3ea" id="u9e82e3ea"><br></p><h1 data-lake-id="cw2Fd" id="cw2Fd"><span data-lake-id="u619034f3" id="u619034f3">六、注册中心优化</span></h1><h2 data-lake-id="ARiSt" id="ARiSt" style="text-align: left"><span data-lake-id="uc345d6f6" id="uc345d6f6" style="color: rgb(47, 48, 52)">一、需求分析</span></h2><p data-lake-id="u40fa85eb" id="u40fa85eb" style="text-align: left"><span data-lake-id="u65c0d7d5" id="u65c0d7d5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">上节中，基于 Etcd 完成了基础的注册中心，能够注册和获取服务和节点信息。</span></p><p data-lake-id="u6e01f3a6" id="u6e01f3a6" style="text-align: left"><span data-lake-id="uf32e3465" id="uf32e3465" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u9a41cec8" id="u9a41cec8" style="text-align: left"><span data-lake-id="u8178391c" id="u8178391c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但目前系统仅仅是处于可用的程度，还有很多需要解决的问题和可优化点：</span></p><p data-lake-id="u3b985965" id="u3b985965" style="text-align: left"><span data-lake-id="u61ac1723" id="u61ac1723" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><ol list="ub119cf9c"><li fid="u87076e83" data-lake-id="u8782bdb7" id="u8782bdb7" style="text-align: left"><span data-lake-id="uf64cc1c4" id="uf64cc1c4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">数据一致性：服务提供者如果下线了，注册中心需要即时更新，剔除下线节点。否则消费者可能会调用到已经下线的节点。</span></li><li fid="u87076e83" data-lake-id="u6b6a8182" id="u6b6a8182" style="text-align: left"><span data-lake-id="ude50ccae" id="ude50ccae" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">性能优化：服务消费者每次都需要从注册中心获取服务，可以使用缓存进行优化。</span></li><li fid="u87076e83" data-lake-id="udd0a2528" id="udd0a2528" style="text-align: left"><span data-lake-id="u0c7d41b2" id="u0c7d41b2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">高可用性：保证注册中心本身不会宕机。</span></li><li fid="u87076e83" data-lake-id="ufd2f678b" id="ufd2f678b" style="text-align: left"><span data-lake-id="u9a6f9676" id="u9a6f9676" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可扩展性：实现更多其他种类的注册中心。</span></li></ol><p data-lake-id="ubbeb62de" id="ubbeb62de"><br></p><p data-lake-id="u53e4b65c" id="u53e4b65c" style="text-align: left"><span data-lake-id="u26fe01f6" id="u26fe01f6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">本节实践 4 个注册中心的优化点：</span></p><p data-lake-id="u5f9edfc9" id="u5f9edfc9" style="text-align: left"><span data-lake-id="u11893c26" id="u11893c26" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><ol list="ub790213a"><li fid="u36fc626e" data-lake-id="u146755e1" id="u146755e1" style="text-align: left"><span data-lake-id="ufbe71176" id="ufbe71176" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">心跳检测和续期机制</span></li><li fid="u36fc626e" data-lake-id="u9ab486f5" id="u9ab486f5" style="text-align: left"><span data-lake-id="u6155b508" id="u6155b508" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务节点下线机制</span></li><li fid="u36fc626e" data-lake-id="ub68a3114" id="ub68a3114" style="text-align: left"><span data-lake-id="u40646e72" id="u40646e72" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">消费端服务缓存</span></li><li fid="u36fc626e" data-lake-id="uc50482e0" id="uc50482e0" style="text-align: left"><span data-lake-id="uc0339882" id="uc0339882" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">基于 ZooKeeper 的注册中心实现（按着教程写的，代码实在是看不懂QAQ）</span></li></ol><p data-lake-id="u29ef8a19" id="u29ef8a19"><br></p><h2 data-lake-id="hUuGx" id="hUuGx" style="text-align: left"><span data-lake-id="u7b878581" id="u7b878581" style="color: rgb(47, 48, 52)">二、注册中心优化</span></h2><p data-lake-id="u781e0cf0" id="u781e0cf0"><br></p><h3 data-lake-id="NXSaq" id="NXSaq" style="text-align: left"><span data-lake-id="uc0ab2dcb" id="uc0ab2dcb" style="color: rgb(47, 48, 52)">心跳检测和续期机制</span></h3><p data-lake-id="u539268ea" id="u539268ea"><br></p><h4 data-lake-id="lxoMN" id="lxoMN" style="text-align: left"><span data-lake-id="ubbcd781d" id="ubbcd781d" style="color: rgb(47, 48, 52)">心跳检测介绍</span></h4><p data-lake-id="u21171adf" id="u21171adf" style="text-align: left"><span data-lake-id="ufa103872" id="ufa103872" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">心跳检测（俗称 heartBeat）是一种用于监测系统是否正常工作的机制。它通过定期发送 </span><strong><span data-lake-id="u02c57e54" id="u02c57e54" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">心跳信号</span></strong><span data-lake-id="u6b155275" id="u6b155275" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">（请求）来检测目标系统的状态。</span></p><p data-lake-id="u13b55da0" id="u13b55da0" style="text-align: left"><span data-lake-id="ubcef9ad9" id="ubcef9ad9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u26d81e8d" id="u26d81e8d" style="text-align: left"><span data-lake-id="u70024de0" id="u70024de0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如果接收方在一定时间内没有收到心跳信号或者未能正常响应请求，就会认为目标系统故障或不可用，从而触发相应的处理或告警机制。</span></p><p data-lake-id="u35f43bf6" id="u35f43bf6" style="text-align: left"><span data-lake-id="u3ac41f76" id="u3ac41f76" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u83c4ed0d" id="u83c4ed0d" style="text-align: left"><span data-lake-id="ufc7390d1" id="ufc7390d1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">心跳检测的应用场景非常广泛，尤其是在分布式、微服务系统中，比如集群管理、服务健康检查等。</span></p><p data-lake-id="u687b2675" id="u687b2675" style="text-align: left"><span data-lake-id="u56b615d5" id="u56b615d5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uecd10787" id="uecd10787" style="text-align: left"><span data-lake-id="ud4a91b50" id="ud4a91b50" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">那么我们怎么检测自己做的 web 后端是否正常运行呢？</span></p><p data-lake-id="ufe65946a" id="ufe65946a" style="text-align: left"><span data-lake-id="u32d5ba67" id="u32d5ba67" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u93e48d51" id="u93e48d51" style="text-align: left"><span data-lake-id="u4a57d063" id="u4a57d063" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一个最简单的方法，就是写一个心跳检测接口，比如：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22import%20org.springframework.boot.SpringApplication%3B%5Cnimport%20org.springframework.boot.autoconfigure.SpringBootApplication%3B%5Cnimport%20org.springframework.web.bind.annotation.GetMapping%3B%5Cnimport%20org.springframework.web.bind.annotation.RestController%3B%5Cn%5Cn%40RestController%5Cnclass%20HealthCheckController%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E6%8E%A5%E5%8F%A3%5Cn%20%20%20%20%40GetMapping(%5C%22%2Factuator%2Fhealth%5C%22)%5Cn%20%20%20%20public%20String%20healthCheck()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%9C%A8%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E5%85%B6%E4%BB%96%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E9%80%BB%E8%BE%91%EF%BC%8C%E4%BE%8B%E5%A6%82%E6%A3%80%E6%9F%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E3%80%81%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E7%AD%89%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%81%A5%E5%BA%B7%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20%20%20return%20%5C%22OK%5C%22%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jh8Wz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9fdd48d4" id="u9fdd48d4"><br></p><p data-lake-id="u066bf02d" id="u066bf02d"><span data-lake-id="ub7abd780" id="ub7abd780" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">然后我们只需要执行一个脚本，定期调用这个接口，如果调用失败，就知道系统故障了。</span></p><p data-lake-id="u6e0d27f9" id="u6e0d27f9"><br></p><h4 data-lake-id="nPmrJ" id="nPmrJ" style="text-align: left"><span data-lake-id="u073e8183" id="u073e8183" style="color: rgb(47, 48, 52)">方案设计</span></h4><p data-lake-id="u1cad43ab" id="u1cad43ab"><br></p><p data-lake-id="u922b1b33" id="u922b1b33" style="text-align: left"><span data-lake-id="u7c94679c" id="u7c94679c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">1）从心跳检测的概念来看，实现心跳检测一般需要 2 个关键：</span><strong><span data-lake-id="u84e15017" id="u84e15017" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">定时</span></strong><span data-lake-id="u85c07b93" id="u85c07b93" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">、</span><strong><span data-lake-id="u013d399a" id="u013d399a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">网络请求</span></strong><span data-lake-id="u0caa8f31" id="u0caa8f31" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">。</span></p><p data-lake-id="ub3fabeff" id="ub3fabeff" style="text-align: left"><span data-lake-id="uc093049b" id="uc093049b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u820c0550" id="u820c0550" style="text-align: left"><span data-lake-id="u3cde3479" id="u3cde3479" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">但是使用 Etcd 实现心跳检测会更简单一些，因为 Etcd 自带了 key 过期机制，我们不妨换个思路：给节点注册信息一个 “生命倒计时”，让节点定期 </span><strong><span data-lake-id="u903dcedf" id="u903dcedf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">续期</span></strong><span data-lake-id="u21199616" id="u21199616" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，重置 </span><strong><span data-lake-id="ue3387e9c" id="ue3387e9c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">自己的</span></strong><span data-lake-id="uc4f361e8" id="uc4f361e8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 倒计时。如果节点已宕机，一直不续期，Etcd 就会对 key 进行过期删除。</span></p><p data-lake-id="u73140168" id="u73140168" style="text-align: left"><span data-lake-id="ua1ab802f" id="ua1ab802f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u08280077" id="u08280077" style="text-align: left"><span data-lake-id="uabf1ca47" id="uabf1ca47" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一句话总结：到时间还不续期就是寄了。</span></p><p data-lake-id="ue89dbce4" id="ue89dbce4" style="text-align: left"><span data-lake-id="u138c183c" id="u138c183c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u154f48f4" id="u154f48f4" style="text-align: left"><span data-lake-id="u72ee2a34" id="u72ee2a34" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 Etcd 中，我们要实现心跳检测和续期机制，可以遵循如下步骤：</span></p><ol list="u425c469d"><li fid="u0a0ee329" data-lake-id="ud1ffff25" id="ud1ffff25" style="text-align: left"><span data-lake-id="u9de15a5c" id="u9de15a5c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务提供者向 Etcd 注册自己的服务信息，并在注册时设置 TTL（生存时间）。</span></li><li fid="u0a0ee329" data-lake-id="u39bd19d8" id="u39bd19d8" style="text-align: left"><span data-lake-id="ued7450b5" id="ued7450b5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Etcd 在接收到服务提供者的注册信息后，会自动维护服务信息的 TTL，并在 TTL 过期时删除该服务信息。</span></li><li fid="u0a0ee329" data-lake-id="ua3eadb51" id="ua3eadb51" style="text-align: left"><span data-lake-id="u719cc720" id="u719cc720" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务提供者定期请求 Etcd 续签自己的注册信息，重写 TTL。</span></li></ol><p data-lake-id="u2a1553a6" id="u2a1553a6"><br></p><p data-lake-id="ua4c0b737" id="ua4c0b737" style="text-align: left"><span data-lake-id="u8fef9007" id="u8fef9007" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">需要注意的是，续期时间一定要小于过期时间，允许一次容错的机会。</span></p><p data-lake-id="ue46cbe9d" id="ue46cbe9d" style="text-align: left"><span data-lake-id="ub2707639" id="ub2707639" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u9575ae44" id="u9575ae44" style="text-align: left"><span data-lake-id="u24d83c4c" id="u24d83c4c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">2）每个服务提供者都需要找到自己注册的节点、续期自己的节点，但问题是，怎么找到当前服务提供者项目自己的节点呢？</span></p><p data-lake-id="u046c5996" id="u046c5996" style="text-align: left"><span data-lake-id="ucfb12d99" id="ucfb12d99" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u9b2fc342" id="u9b2fc342" style="text-align: left"><span data-lake-id="u86ac63b1" id="u86ac63b1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">那就充分利用本地的特性，在服务提供者本地维护一个 </span><strong><span data-lake-id="ua55d2672" id="ua55d2672" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">已注册节点集合</span></strong><span data-lake-id="uc6aa0db2" id="uc6aa0db2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，注册时添加节点 key 到集合中，只需要续期集合内的 key 即可。</span></p><p data-lake-id="uddd36377" id="uddd36377" style="text-align: left"><span data-lake-id="u5bdb287e" id="u5bdb287e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="O65NK" id="O65NK" style="text-align: left"><span data-lake-id="u25ae6257" id="u25ae6257" style="color: rgb(47, 48, 52)">开发实现</span></h4><h5 data-lake-id="MDJVj" id="MDJVj"><span data-lake-id="u09e47abc" id="u09e47abc" style="color: rgb(47, 48, 52)">1) 给注册中心 </span><code data-lake-id="ud59d753d" id="ud59d753d"><span data-lake-id="u644a074a" id="u644a074a" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">Registry</span></code><span data-lake-id="ub82096b6" id="ub82096b6" style="color: rgb(47, 48, 52)">接口补充心跳检测方法</span></h5><p data-lake-id="udc4bb6b9" id="udc4bb6b9"><span data-lake-id="u5f74e112" id="u5f74e112" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%2F**%5Cn%20%20%20%20%20*%20%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F21%2021%3A03%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20heartBeat()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OZsvG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ucd1c6c66" id="ucd1c6c66"><br></p><h5 data-lake-id="tp1FE" id="tp1FE"><span data-lake-id="u269aefca" id="u269aefca" style="color: rgb(47, 48, 52)">2) 维护续期节点集合。</span></h5><p data-lake-id="ue490ef8d" id="ue490ef8d" style="text-align: left"><span data-lake-id="ud13539df" id="ud13539df" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">定义一个本机注册的节点 key 集合，用于维护续期：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn*%20%E6%9C%AC%E6%9C%BA%E6%B3%A8%E5%86%8C%E7%9A%84%E8%8A%82%E7%82%B9%E9%9B%86%E5%90%88%EF%BC%88%E7%94%A8%E4%BA%8E%E7%BB%B4%E6%8A%A4%E7%BB%AD%E6%9C%9F%EF%BC%89%5Cn*%2F%5Cnprivate%20final%20Set%3CString%3E%20localRegisterNodeKeySet%20%3D%20new%20HashSet%3C%3E()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VHJa0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u86c7d57f" id="u86c7d57f"><br></p><p data-lake-id="u03fbc386" id="u03fbc386"><span data-lake-id="u6ea6ccd1" id="u6ea6ccd1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在服务注册时，需要将节点添加到本地集合中，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20void%20register(ServiceMetaInfo%20serviceMetaInfo)%20throws%20Exception%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AALease%E5%AE%A2%E6%88%B7%E7%AB%AF%5Cn%20%20%20%20Lease%20leaseClient%20%3D%20client.getLeaseClient()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA30%E7%A7%92%E7%9A%84%E7%A7%9F%E7%BA%A6%5Cn%20%20%20%20Long%20leaseId%20%3D%20leaseClient.grant(30).get().getID()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%A6%81%E5%AD%98%E5%82%A8%E7%9A%84%E9%94%AE%E5%80%BC%E5%AF%B9%5Cn%20%20%20%20String%20registerKey%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceMetaInfo.getServiceNodeKey()%3B%5Cn%20%20%20%20ByteSequence%20key%20%3D%20ByteSequence.from(registerKey%2C%20StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20ByteSequence%20value%20%3D%20ByteSequence.from(JSONUtil.toJsonStr(serviceMetaInfo)%2C%20StandardCharsets.UTF_8)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%B0%86%E9%94%AE%E5%80%BC%E5%AF%B9%E4%B8%8E%E7%A7%9F%E7%BA%A6%E5%85%B3%E8%81%94%E8%B5%B7%E6%9D%A5%EF%BC%8C%E5%B9%B6%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%5Cn%20%20%20%20PutOption%20putOption%20%3D%20PutOption.builder()%5Cn%20%20%20%20.withLeaseId(leaseId)%5Cn%20%20%20%20.build()%3B%5Cn%20%20%20%20kvClient.put(key%2C%20value%2C%20putOption).get()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%5Cn%20%20%20%20localRegisterNodeKeySet.add(registerKey)%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AN0pc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uceb0113f" id="uceb0113f"><span data-lake-id="ucbf0f327" id="ucbf0f327" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ufcf6289f" id="ufcf6289f"><span data-lake-id="ua809a8a4" id="ua809a8a4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">同理，在服务注销时，也要从本地集合中移除对应节点：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20void%20unRegister(ServiceMetaInfo%20serviceMetaInfo)%20%7B%5CnString%20registerKey%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceMetaInfo.getServiceNodeKey()%3B%5CnkvClient.delete(%5Cn%20%20%20%20ByteSequence.from(%5Cn%20%20%20%20%20%20%20%20registerKey%5Cn%20%20%20%20%20%20%20%20%2C%20StandardCharsets.UTF_8)%5Cn)%3B%5Cn%5Cn%2F%2F%20%E6%B3%A8%E9%94%80%E6%97%B6%E8%A6%81%E5%B0%86%E8%8A%82%E7%82%B9%E4%BB%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%5CnlocalRegisterNodeKeySet.remove(registerKey)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zxysM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8d74125c" id="u8d74125c"><span data-lake-id="u8ea6e4b2" id="u8ea6e4b2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="aSqbt" id="aSqbt"><span data-lake-id="ucf8971a2" id="ucf8971a2" style="color: rgb(47, 48, 52)">3）在 </span><code data-lake-id="u339a9d23" id="u339a9d23"><span data-lake-id="u957d4737" id="u957d4737" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">EtcdRegistry</span><span data-lake-id="u53b776d3" id="u53b776d3" style="color: rgb(47, 48, 52)">​</span></code><span data-lake-id="uef04f1a1" id="uef04f1a1" style="color: rgb(47, 48, 52)">中实现 heartBeat 方法。</span></h5><p data-lake-id="ua8d26e8d" id="ua8d26e8d" style="text-align: left"><span data-lake-id="ue6aa450c" id="ue6aa450c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以使用 Hutool 工具类的 CronUtil 实现定时任务，对所有集合中的节点执行 </span><strong><span data-lake-id="u4f904310" id="u4f904310" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">重新注册</span></strong><span data-lake-id="ud9442ca8" id="ud9442ca8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 操作，这是一个小 trick，就相当于续签了。</span></p><p data-lake-id="u7254e30e" id="u7254e30e" style="text-align: left"><span data-lake-id="ue4f39fff" id="ue4f39fff" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uaa85d07b" id="uaa85d07b" style="text-align: left"><span data-lake-id="u30cf461f" id="u30cf461f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">心跳检测方法的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20void%20heartBeat()%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%AF%8F10%E7%A7%92%E7%BB%AD%E7%AD%BE%E4%B8%80%E6%AC%A1%5Cn%20%20%20%20CronUtil.schedule(%5C%22*%2F10%20*%20*%20*%20*%20*%5C%22%2C%20new%20Task()%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20public%20void%20execute()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%81%8D%E5%8E%86%E6%9C%AC%E8%8A%82%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89Key%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(String%20key%20%3A%20localRegisterNodeKeySet)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20List%3CKeyValue%3E%20keyValues%20%3D%20kvClient%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get(ByteSequence.from(key%2C%20StandardCharsets.UTF_8))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getKvs()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E8%AF%A5%E8%8A%82%E7%82%B9%E5%B7%B2%E8%BF%87%E6%9C%9F%EF%BC%88%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AF%E8%8A%82%E7%82%B9%E6%89%8D%E8%83%BD%E6%B3%A8%E5%86%8C%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(CollUtil.isEmpty(keyValues))%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8A%82%E7%82%B9%E6%9C%AA%E8%BF%87%E6%9C%9F%EF%BC%88%E7%BB%AD%E7%AD%BE%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20KeyValue%20keyValue%20%3D%20keyValues.get(0)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20value%20%3D%20keyValue.getValue().toString(StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%80%BC%E5%8C%85%E8%A3%85%E5%88%B0%E5%85%83%E4%BF%A1%E6%81%AF%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20JSONUtil.toBean(value%2C%20ServiceMetaInfo.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20register(serviceMetaInfo)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(key%20%2B%20%5C%22%E7%BB%AD%E7%AD%BE%E5%A4%B1%E8%B4%A5%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%94%AF%E6%8C%81%E7%A7%92%E7%BA%A7%E5%88%AB%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20CronUtil.setMatchSecond(true)%3B%5Cn%20%20%20%20CronUtil.start()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sq70s%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1c4d4d30" id="u1c4d4d30"><span data-lake-id="u7ad5a7cf" id="u7ad5a7cf" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">采用这种实现方案的好处是，即时 Etcd 注册中心的数据出现了丢失，通过心跳检测机制也会重新注册节点信息。</span></p><p data-lake-id="ua33fd9f3" id="ua33fd9f3"><span data-lake-id="u993a2f3c" id="u993a2f3c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="hospH" id="hospH"><span data-lake-id="u89b3e4eb" id="u89b3e4eb" style="color: rgb(47, 48, 52)">4）开启 heartBeat。</span></h5><p data-lake-id="u1b2af5f4" id="u1b2af5f4" style="text-align: left"><span data-lake-id="ud151788f" id="ud151788f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在注册中心初始化的 init 方法中，调用 heartBeat 方法即可。</span></p><p data-lake-id="ua3602d2b" id="ua3602d2b" style="text-align: left"><span data-lake-id="u19d8eb0d" id="u19d8eb0d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20void%20init(RegistryConfig%20registryConfig)%20%7B%5Cn%20%20%20%20client%20%3D%20Client.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.endpoints(registryConfig.getAddress())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.connectTimeout(Duration.ofMillis(registryConfig.getTimeout()))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20kvClient%20%3D%20client.getKVClient()%3B%5Cn%20%20%20%20heartBeat()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uaC9z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uaac0a8ba" id="uaac0a8ba"><span data-lake-id="u728beb42" id="u728beb42" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="SEeaH" id="SEeaH" style="text-align: left"><span data-lake-id="u3afa129b" id="u3afa129b" style="color: rgb(47, 48, 52)">测试</span></h4><p data-lake-id="u1f14b253" id="u1f14b253"><span data-lake-id="ud23a6d90" id="ud23a6d90" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">使用可视化工具观察节点底部的过期时间，当 TTL 到 20 左右的时候，又会重置为 30，说明心跳检测和续期机制正常执行。</span></p><p data-lake-id="u73070350" id="u73070350"><span data-lake-id="uffcf139c" id="uffcf139c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="nf2SV" id="nf2SV" style="text-align: left"><span data-lake-id="u5ca8ab79" id="u5ca8ab79" style="color: rgb(47, 48, 52)">服务节点下线机制</span></h3><p data-lake-id="ufca6aee2" id="ufca6aee2"><br></p><p data-lake-id="ue57e4c63" id="ue57e4c63" style="text-align: left"><span data-lake-id="u94f0579c" id="u94f0579c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">当服务提供者节点宕机时，应该从注册中心移除掉已注册的节点，否则会影响消费端调用。所以我们需要设计一套服务节点下线机制。</span></p><p data-lake-id="ueddf625e" id="ueddf625e" style="text-align: left"><span data-lake-id="u7be4740a" id="u7be4740a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="pe2lZ" id="pe2lZ" style="text-align: left"><span data-lake-id="u4399de73" id="u4399de73" style="color: rgb(47, 48, 52)">方案设计</span></h4><p data-lake-id="ue1286167" id="ue1286167"><br></p><p data-lake-id="u4a693bbd" id="u4a693bbd" style="text-align: left"><span data-lake-id="u61237e9f" id="u61237e9f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">服务节点下线又分为：</span></p><ol list="u51fd53df"><li fid="ud035dd15" data-lake-id="u18809a4c" id="u18809a4c" style="text-align: left"><span data-lake-id="ue63fb80d" id="ue63fb80d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">主动下线：服务提供者项目正常退出时，主动从注册中心移除注册信息。</span></li><li fid="ud035dd15" data-lake-id="u57d16ee8" id="u57d16ee8" style="text-align: left"><span data-lake-id="u5dc46005" id="u5dc46005" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">被动下线：服务提供者项目异常推出时，利用 Etcd 的 key 过期机制自动移除。</span></li></ol><p data-lake-id="ubcf16564" id="ubcf16564" style="text-align: left"><span data-lake-id="uaf71f8f6" id="uaf71f8f6" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u1a9a568a" id="u1a9a568a" style="text-align: left"><span data-lake-id="u2b115cac" id="u2b115cac" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u8c78aebd" id="u8c78aebd" style="text-align: left"><span data-lake-id="u753b6baf" id="u753b6baf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">被动下线已经可以利用 Etcd 的机制实现了，现在主要开发主动下线。</span></p><p data-lake-id="u88a51a83" id="u88a51a83" style="text-align: left"><span data-lake-id="ub497d27b" id="ub497d27b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uc1a81c8e" id="uc1a81c8e" style="text-align: left"><span data-lake-id="u3757ab75" id="u3757ab75" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">问题是，怎么在 Java 项目正常退出时，执行某个操作呢？</span></p><p data-lake-id="uea32c02d" id="uea32c02d" style="text-align: left"><span data-lake-id="u49b5611d" id="u49b5611d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u45875f02" id="u45875f02" style="text-align: left"><span data-lake-id="u0e8ae379" id="u0e8ae379" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其实，非常简单，</span><strong><span data-lake-id="ufeec5e16" id="ufeec5e16" class="lake-fontsize-12" style="color: rgb(244, 170, 6),rgb(229, 70, 49)">利用 JVM 的 ShutdownHook </span></strong><span data-lake-id="u88f99874" id="u88f99874" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">就能实现。</span></p><p data-lake-id="u7408a88a" id="u7408a88a" style="text-align: left"><span data-lake-id="u4f7156b5" id="u4f7156b5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><blockquote data-lake-id="u0a38fbc1" id="u0a38fbc1" class="lake-alert lake-alert-color2"><p data-lake-id="uc61434f7" id="uc61434f7" style="text-align: left"><span data-lake-id="u47157eb8" id="u47157eb8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">JVM 的 ShutdownHook 是 Java 虚拟机提供的一种机制，允许开发者在 JVM 即将关闭之前执行一些清理工作或其他必要的操作，例如关闭数据库连接、释放资源、保存临时数据等。</span></p></blockquote><p data-lake-id="udebcbf1c" id="udebcbf1c" style="text-align: left"><span data-lake-id="u36c97658" id="u36c97658" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u182054f4" id="u182054f4" style="text-align: left"><span data-lake-id="u6e6348aa" id="u6e6348aa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">Spring Boot 也提供了类似的优雅停机能力。</span></p><p data-lake-id="u07ae1b81" id="u07ae1b81"><span data-lake-id="ufffa429e" id="ufffa429e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="SeEzE" id="SeEzE" style="text-align: left"><span data-lake-id="u7a56a2ec" id="u7a56a2ec" style="color: rgb(47, 48, 52)">开发实现</span></h4><p data-lake-id="u771892e7" id="u771892e7"><br></p><h5 data-lake-id="XvQsN" id="XvQsN"><span data-lake-id="u1c995e8a" id="u1c995e8a" style="color: rgb(47, 48, 52)">1）完善 Etcd 注册中心的 </span><span data-lake-id="u08553312" id="u08553312" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">destroy</span><span data-lake-id="ud56d3d00" id="ud56d3d00" style="color: rgb(47, 48, 52)"> 方法，补充下线节点的逻辑。</span></h5><p data-lake-id="u810e339d" id="u810e339d" style="text-align: left"><span data-lake-id="uebde5d75" id="uebde5d75" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20void%20destroy()%20%7B%5Cn%20%20%20%20System.out.println(%5C%22%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E4%B8%8B%E7%BA%BF%5C%22)%3B%5Cn%20%20%20%20%2F%2F%20%E4%B8%8B%E7%BA%BF%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%2F%2F%20%E9%81%8D%E5%8E%86%E6%9C%AC%E8%8A%82%E7%82%B9%E6%89%80%E6%9C%89%E7%9A%84%20key%5Cn%20%20%20%20for%20(String%20key%20%3A%20localRegisterNodeKeySet)%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20kvClient.delete(ByteSequence.from(key%2C%20StandardCharsets.UTF_8)).get()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(key%20%2B%20%5C%22%E8%8A%82%E7%82%B9%E4%B8%8B%E7%BA%BF%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90%5Cn%20%20%20%20if%20(kvClient%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20kvClient.close()%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(client%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20client.close()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aCQ8j%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ud2f57ee7" id="ud2f57ee7"><span data-lake-id="u806ece70" id="u806ece70" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u76257cce" id="u76257cce"><span data-lake-id="uca153896" id="uca153896" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="GleQr" id="GleQr"><span data-lake-id="ubc1cd9ae" id="ubc1cd9ae" style="color: rgb(47, 48, 52)">2）注册 Shutdown Hook</span></h5><p data-lake-id="u92097150" id="u92097150" style="text-align: left"><span data-lake-id="u7c73fc77" id="u7c73fc77" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 </span><span data-lake-id="ude9450c9" id="ude9450c9" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">RpcApplication</span><span data-lake-id="ua73903b8" id="ua73903b8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 的 init 方法中，注册 Shutdown Hook，当程序正常退出时会执行注册中心的 destroy 方法。</span></p><p data-lake-id="u769df4dc" id="u769df4dc" style="text-align: left"><span data-lake-id="uac7c10ab" id="uac7c10ab" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BC%A0%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%5Cn%20*%20%5Cn%20*%20%40param%20newRpcConfig%3A%20%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%20*%20%40return%20void%3A%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F15%2018%3A32%5Cn%20*%2F%5Cnpublic%20static%20void%20init(RpcConfig%20newRpcConfig)%20%7B%5Cn%20%20%20%20rpcConfig%20%3D%20newRpcConfig%3B%5Cn%20%20%20%20log.info(%5C%22rpc%20init%2Cconfig%20%3D%20%7B%7D%5C%22%2C%20newRpcConfig.toString())%3B%5Cn%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20registry.init(registryConfig)%3B%5Cn%20%20%20%20log.info(%5C%22registry%20init%2Cconfig%20%3D%20%7B%7D%5C%22%2CregistryConfig)%3B%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E5%B9%B6%E6%B3%A8%E5%86%8CShutdown%20Hook%EF%BC%8CJVM%E9%80%80%E5%87%BA%E6%97%B6%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%9D%A5%E6%89%A7%E8%A1%8C%E9%94%80%E6%AF%81%E7%9A%84%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20Runtime.getRuntime().addShutdownHook(new%20Thread(registry%3A%3Adestroy))%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%7B%22from%22%3A531%2C%22to%22%3A662%2C%22background%22%3A%22%23585A5A%22%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ebPAE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u13c80d8c" id="u13c80d8c"><span data-lake-id="u9e6bb97d" id="u9e6bb97d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="kfXGy" id="kfXGy" style="text-align: left"><span data-lake-id="ue7b3e3a7" id="ue7b3e3a7" style="color: rgb(47, 48, 52)">测试</span></h4><p data-lake-id="ucb47185d" id="ucb47185d"><br></p><p data-lake-id="u12e383ab" id="u12e383ab" style="text-align: left"><span data-lake-id="u2a5b48e2" id="u2a5b48e2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">测试方法很简单：</span></p><ol list="uc20c0a4e"><li fid="udb63db1f" data-lake-id="u7a0e4d71" id="u7a0e4d71" style="text-align: left"><span data-lake-id="u67ee73e8" id="u67ee73e8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">启动服务提供者，然后观察服务是否成功被注册</span></li><li fid="udb63db1f" data-lake-id="uc64028da" id="uc64028da" style="text-align: left"><span data-lake-id="u6b37e39c" id="u6b37e39c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">正常停止服务提供者，然后观察服务信息是否被删除</span></li></ol><p data-lake-id="u39a52c22" id="u39a52c22"><span data-lake-id="uaf8e1b7e" id="uaf8e1b7e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="SDcsX" id="SDcsX" style="text-align: left"><span data-lake-id="u71707f12" id="u71707f12" style="color: rgb(47, 48, 52)">消费端服务缓存</span></h3><p data-lake-id="uc7216e0b" id="uc7216e0b" style="text-align: left"><span data-lake-id="uf4b5b9a9" id="uf4b5b9a9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">正常情况下，服务节点信息列表的更新频率是不高的，所以在服务消费者从注册中心获取到服务节点信息列表后，完全可以 </span><strong><span data-lake-id="u50e90105" id="u50e90105" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">缓存在本地</span></strong><span data-lake-id="u8f9f2597" id="u8f9f2597" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，下次就不用再请求注册中心获取了，能够提高性能。</span></p><h4 data-lake-id="YC631" id="YC631" style="text-align: left"><span data-lake-id="u173908be" id="u173908be" style="color: rgb(47, 48, 52)">1、增加本地缓存</span></h4><p data-lake-id="u067a1079" id="u067a1079" style="text-align: left"><span data-lake-id="u16315763" id="u16315763" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">本地缓存的实现很简单，用一个列表来存储服务信息即可，提供操作列表的基本方法，包括：写缓存、读缓存、清空缓存。</span></p><p data-lake-id="u2a7ee545" id="u2a7ee545" style="text-align: left"><span data-lake-id="ud73eae9e" id="ud73eae9e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在 </span><span data-lake-id="u41852d9a" id="u41852d9a" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">registry</span><span data-lake-id="uff760998" id="uff760998" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 包下新增缓存类 </span><span data-lake-id="uf2d482fb" id="uf2d482fb" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">RegistryServiceCache</span><span data-lake-id="ub1c03d57" id="ub1c03d57" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%EF%BC%88%E6%B6%88%E8%B4%B9%E7%AB%AF%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F3%5Cn%20*%2F%5Cnpublic%20class%20RegistryServiceCache%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20List%3CServiceMetaInfo%3E%20serviceCache%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%86%99%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20newServiceCache%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F3%2015%3A12%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20writeCache(List%3CServiceMetaInfo%3E%20newServiceCache)%20%7B%5Cn%20%20%20%20%20%20%20%20this.serviceCache%20%3D%20newServiceCache%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%AF%BB%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20java.util.List%3Ccom.yybf.chenrpc.model.ServiceMetaInfo%3E%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F3%2015%3A13%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20List%3CServiceMetaInfo%3E%20readCache()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.serviceCache%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B8%85%E7%A9%BA%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20void%20clearCache()%7B%5Cn%20%20%20%20%20%20%20%20this.serviceCache%20%3D%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NLQk3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uab5eeaf5" id="uab5eeaf5"><span data-lake-id="u755176b0" id="u755176b0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="bkx7w" id="bkx7w" style="text-align: left"><span data-lake-id="u309a696f" id="u309a696f" style="color: rgb(47, 48, 52)">2、使用本地缓存</span></h4><h5 data-lake-id="v5w4g" id="v5w4g"><span data-lake-id="uec295c19" id="uec295c19" style="color: rgb(47, 48, 52)">1）修改 </span><span data-lake-id="ueadc4ad0" id="ueadc4ad0" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">EtcdRegisty</span><span data-lake-id="u2b814a5e" id="u2b814a5e" style="color: rgb(47, 48, 52)"> 的代码，使用本地缓存对象：</span></h5><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E7%BC%93%E5%AD%98%5Cn%20*%2F%5Cnprivate%20final%20RegistryServiceCache%20registryServiceCache%20%3D%20new%20RegistryServiceCache()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ujCVC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u53268c24" id="u53268c24"><span data-lake-id="u99963ec3" id="u99963ec3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h5 data-lake-id="pIidS" id="pIidS"><span data-lake-id="u5edd8318" id="u5edd8318" style="color: rgb(47, 48, 52)">2）修改服务发现逻辑</span></h5><p data-lake-id="u9aeb66c4" id="u9aeb66c4" style="text-align: left"><span data-lake-id="u706f52db" id="u706f52db" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">优先从缓存获取服务；如果没有缓存，再从注册中心获取，并且设置到缓存中。</span></p><p data-lake-id="u8e1826af" id="u8e1826af" style="text-align: left"><span data-lake-id="u1505cef2" id="u1505cef2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20List%3CServiceMetaInfo%3E%20serviceDiscovery(String%20serviceKey)%20%7B%5Cn%20%20%20%20%2F%2F%20%E4%BC%98%E5%85%88%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20List%3CServiceMetaInfo%3E%20cachedServiceMetaInfoList%20%3D%20registryServiceCache.readCache()%3B%5Cn%20%20%20%20if(cachedServiceMetaInfoList%20!%3D%20null%20)%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%20--%20%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20cachedServiceMetaInfoList%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E5%89%8D%E7%BC%80%EF%BC%8C%E4%BB%8E%20Etcd%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%EF%BC%9A%5Cn%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%BB%93%E5%B0%BE%E8%A6%81%E5%8A%A0%20%E2%80%9C%20%2F%20%E2%80%9D%5Cn%20%20%20%20String%20searchPrefix%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceKey%20%2B%20%5C%22%2F%5C%22%3B%5Cn%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%9F%A5%E8%AF%A2%5Cn%20%20%20%20%20%20%20%20GetOption%20getOption%20%3D%20GetOption.builder().isPrefix(true).build()%3B%5Cn%20%20%20%20%20%20%20%20List%3CKeyValue%3E%20keyValues%20%3D%20kvClient.get(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ByteSequence.from(searchPrefix%2C%20StandardCharsets.UTF_8)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2C%20getOption)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getKvs()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20keyValues.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(keyValue%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20value%20%3D%20keyValue.getValue().toString(StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20JSONUtil.toBean(value%2C%20ServiceMetaInfo.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.toList())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E8%A3%85%E9%85%8D%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20registryServiceCache.writeCache(serviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20return%20serviceMetaInfoList%3B%5Cn%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%5C%22%2C%20e)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22adqYL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9f0e3042" id="u9f0e3042"><span data-lake-id="u563e92d0" id="u563e92d0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="Ogcox" id="Ogcox" style="text-align: left"><span data-lake-id="u8bbe6b69" id="u8bbe6b69" style="color: rgb(47, 48, 52)">3、服务缓存更新 - 监听机制</span></h4><p data-lake-id="u6dda2415" id="u6dda2415" style="text-align: left"><span data-lake-id="u7d679b80" id="u7d679b80" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">当服务注册信息发生变更（比如节点下线）时，需要即时更新消费端缓存。</span></p><p data-lake-id="u10c61979" id="u10c61979" style="text-align: left"><span data-lake-id="u180a90ee" id="u180a90ee" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ue03eca8a" id="ue03eca8a" style="text-align: left"><span data-lake-id="uc2e9fe81" id="uc2e9fe81" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">问题是，怎么知道服务注册信息什么时候发生变更呢？</span></p><p data-lake-id="ud100bd24" id="ud100bd24" style="text-align: left"><span data-lake-id="u69d2f4c9" id="u69d2f4c9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u07b97a88" id="u07b97a88" style="text-align: left"><span data-lake-id="u785f8b0d" id="u785f8b0d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">这就需要使用 Etcd 的 watch 监听机制，当监听的某个 key 发生修改或删除时，就会触发事件来通知监听者。</span></p><p data-lake-id="u0a1fb9b1" id="u0a1fb9b1" style="text-align: left"><span data-lake-id="u42b027a1" id="u42b027a1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">如图：</span></p><p data-lake-id="u100f08c0" id="u100f08c0"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1712312188135-f0c8896b-358d-4590-9a8d-3c0458555770.jpeg%22%2C%22taskId%22%3A%22ub11376f7-2645-46d0-8e1c-e531e6f05ef%22%2C%22clientId%22%3A%22ue8386a4d-f972-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22Fs3QPgWHjQm2g-JYveiGcB6fEBeO.jpg%22%2C%22size%22%3A27714%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1224%2C%22originHeight%22%3A497%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ETCD%202.%E4%B8%8B%E7%BA%BF%201.%E7%9B%91%E5%90%AC%203.%E9%80%9A%E7%9F%A5%20.4.%E5%A4%84%E7%90%86%20%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%20%E5%A4%84%E7%90%86%E5%99%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A398%2C%22y%22%3A65%2C%22width%22%3A66%2C%22height%22%3A26%2C%22text%22%3A%22ETCD%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A143%2C%22width%22%3A95%2C%22height%22%3A33%2C%22text%22%3A%222.%E4%B8%8B%E7%BA%BF%22%7D%2C%7B%22x%22%3A719%2C%22y%22%3A149%2C%22width%22%3A89%2C%22height%22%3A29%2C%22text%22%3A%221.%E7%9B%91%E5%90%AC%22%7D%2C%7B%22x%22%3A390%2C%22y%22%3A211%2C%22width%22%3A96%2C%22height%22%3A31%2C%22text%22%3A%223.%E9%80%9A%E7%9F%A5%22%7D%2C%7B%22x%22%3A910%2C%22y%22%3A367%2C%22width%22%3A103%2C%22height%22%3A31%2C%22text%22%3A%22.4.%E5%A4%84%E7%90%86%22%7D%2C%7B%22x%22%3A681%2C%22y%22%3A368%2C%22width%22%3A153%2C%22height%22%3A33%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%22%7D%2C%7B%22x%22%3A44%2C%22y%22%3A369%2C%22width%22%3A150%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%22%7D%2C%7B%22x%22%3A1099%2C%22y%22%3A369%2C%22width%22%3A91%2C%22height%22%3A32%2C%22text%22%3A%22%E5%A4%84%E7%90%86%E5%99%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u0e9d6826%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7f5d9498" id="u7f5d9498"><br></p><p data-lake-id="u1aa88d3f" id="u1aa88d3f" style="text-align: left"><span data-lake-id="uf4869c68" id="uf4869c68" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">什么时候去创建 watch 监听器呢？</span></p><p data-lake-id="u45f28d83" id="u45f28d83" style="text-align: left"><span data-lake-id="u0c60a293" id="u0c60a293" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u649c67ec" id="u649c67ec" style="text-align: left"><span data-lake-id="u4f9f6b13" id="u4f9f6b13" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">首先要明确 watch 监听是服务消费者还是服务提供者执行的。由于目标是更新缓存，缓存是在服务消费端维护和使用的，所以也应该是</span><span data-lake-id="u53b5304c" id="u53b5304c" class="lake-fontsize-12" style="color: rgb(244, 170, 6),rgb(229, 70, 49)">服务消费端去 watch。</span></p><p data-lake-id="u8d598143" id="u8d598143" style="text-align: left"><span data-lake-id="udfddc4af" id="udfddc4af" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u5d7036c5" id="u5d7036c5" style="text-align: left"><span data-lake-id="u7c80a48f" id="u7c80a48f" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">也就是说，只有服务消费者执行的方法中，可以创建 watch 监听器，那么比较合适的位置就是服务发现方法（serviceDiscovery）。可以对本次获取到的所有服务节点 key 进行监听。</span></p><p data-lake-id="u2d171dcd" id="u2d171dcd" style="text-align: left"><span data-lake-id="u87c7509c" id="u87c7509c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u6ff1049e" id="u6ff1049e" style="text-align: left"><span data-lake-id="u2389ab8a" id="u2389ab8a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">还需要防止重复监听同一个 key，可以通过定义一个已监听 key 的集合来实现。</span></p><p data-lake-id="u28dbb3f1" id="u28dbb3f1" style="text-align: left"><span data-lake-id="uc830a38b" id="uc830a38b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u62129404" id="u62129404" style="text-align: left"><span data-lake-id="u637bbda8" id="u637bbda8" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">下面开发编码。</span></p><h5 data-lake-id="lR728" id="lR728"><span data-lake-id="ub3165d0d" id="ub3165d0d" style="color: rgb(47, 48, 52)">1）在接口添加方法</span></h5><p data-lake-id="ubc72ac7a" id="ubc72ac7a"><span data-lake-id="uacb8f35a" id="uacb8f35a" style="color: rgb(47, 48, 52)">Registry 注册中心接口补充监听 key 的方法</span></p><p data-lake-id="u05cbfd2a" id="u05cbfd2a"><span data-lake-id="u9d67f6cf" id="u9d67f6cf" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%8F%98%E6%8D%A2%E8%BF%9B%E8%A1%8C%E7%9B%91%E5%90%AC%EF%BC%88%E6%B6%88%E8%B4%B9%E7%AB%AF%EF%BC%89%5Cn%20*%5Cn%20*%20%40param%20serviceNodeKey%3A%5Cn%20*%20%40return%20void%3A%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F3%2015%3A47%5Cn%20*%2F%5Cnvoid%20watch(String%20serviceNodeKey)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tc3lS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u02053013" id="u02053013"><br></p><h5 data-lake-id="D6lUE" id="D6lUE"><span data-lake-id="u64b89463" id="u64b89463" style="color: rgb(47, 48, 52)">2）新增监听集合</span></h5><p data-lake-id="ufdd177f0" id="ufdd177f0"><span data-lake-id="u828d16dd" id="u828d16dd" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">EtcdRegistry</span><span data-lake-id="u2d69386b" id="u2d69386b" style="color: rgb(47, 48, 52)"> 类中，新增监听 key 的集合。</span></p><p data-lake-id="u1fd12c4f" id="u1fd12c4f" style="text-align: left"><span data-lake-id="ubbf5cf4a" id="ubbf5cf4a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以使用 </span><span data-lake-id="u5b552732" id="u5b552732" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">ConcurrentHashSet</span><span data-lake-id="u52648ac4" id="u52648ac4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 防止并发冲突，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%AD%A3%E5%9C%A8%E7%9B%91%E5%90%AC%E7%9A%84%20key%20%E9%9B%86%E5%90%88%5Cn%20*%2F%5Cnprivate%20final%20Set%3CString%3E%20watchingKeySet%20%3D%20new%20ConcurrentHashSet%3C%3E()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aVUS2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue2fd35ae" id="ue2fd35ae"><br></p><h5 data-lake-id="PtGje" id="PtGje"><span data-lake-id="u8058cfa5" id="u8058cfa5" style="color: rgb(47, 48, 52)">3）实现监听方法</span></h5><p data-lake-id="ue91aa9cb" id="ue91aa9cb"><span data-lake-id="u14d9ffdc" id="u14d9ffdc" style="color: rgb(47, 48, 52)">在 </span><span data-lake-id="u33164cfc" id="u33164cfc" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">EtcdRegistry</span><span data-lake-id="ue0a69fa1" id="ue0a69fa1" style="color: rgb(47, 48, 52)"> 类中实现监听 key 的方法。</span></p><p data-lake-id="u0d370fdc" id="u0d370fdc" style="text-align: left"><span data-lake-id="u8922e37e" id="u8922e37e" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">通过调用 Etcd 的 </span><code data-lake-id="u77336774" id="u77336774"><strong><span data-lake-id="ua93689c4" id="ua93689c4" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">WatchClient</span></strong></code><span data-lake-id="ua21c3a6c" id="ua21c3a6c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实现监听，如果出现了</span><code data-lake-id="u0f8ea67b" id="u0f8ea67b"><strong><span data-lake-id="ucc4fdb00" id="ucc4fdb00" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span></strong><strong><span data-lake-id="u1ac0820f" id="u1ac0820f" class="lake-fontsize-11" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">DELETE</span></strong></code><span data-lake-id="u229b3672" id="u229b3672" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> key 删除事件，则清理服务注册缓存。</span></p><p data-lake-id="u847d36dd" id="u847d36dd" style="text-align: left"><span data-lake-id="ub14c01a1" id="ub14c01a1" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u5c2cb847" id="u5c2cb847" style="text-align: left"><strong><span data-lake-id="u6a4b4a69" id="u6a4b4a69" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">注意，即使 key 在注册中心被删除后再重新设置，之前的监听依旧生效。所以只监听首次加入到监听集合的 key，防止重复。</span></strong></p><p data-lake-id="uefe6788b" id="uefe6788b" style="text-align: left"><strong><span data-lake-id="uef12205b" id="uef12205b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span></strong><br></p><p data-lake-id="u4f7bd6da" id="u4f7bd6da" style="text-align: left"><span data-lake-id="u7e4aa082" id="u7e4aa082" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20void%20watch(String%20serviceNodeKey)%20%7B%5Cn%20%20%20%20Watch%20watchClient%20%3D%20client.getWatchClient()%3B%5Cn%20%20%20%20%2F%2F%20%E4%B9%8B%E5%89%8D%E6%9C%AA%E8%A2%AB%E7%9B%91%E5%90%AC%EF%BC%8C%E5%BC%80%E5%90%AF%E7%9B%91%E5%90%AC%5Cn%20%20%20%20boolean%20newWatch%20%3D%20watchingKey.add(serviceNodeKey)%3B%5Cn%20%20%20%20if(newWatch)%7B%5Cn%20%20%20%20%20%20%20%20watchClient.watch(ByteSequence.from(serviceNodeKey%2CStandardCharsets.UTF_8)%2Cresponse-%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for(WatchEvent%20event%20%3A%20response.getEvents())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20switch(event.getEventType())%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20key%E5%88%A0%E9%99%A4%E6%97%B6%E8%A7%A6%E5%8F%91%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20case%20DELETE%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B8%85%E7%90%86%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20registryServiceCache.clearCache()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20case%20PUT%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20default%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22v7jy4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8ebb6674" id="u8ebb6674"><br></p><h5 data-lake-id="t5Lbp" id="t5Lbp"><span data-lake-id="u60c1e117" id="u60c1e117" style="color: rgb(47, 48, 52)">4）调用方法,开始监听</span></h5><p data-lake-id="u64608e92" id="u64608e92"><span data-lake-id="u482a6d92" id="u482a6d92" style="color: rgb(47, 48, 52)">在消费端获取服务时调用 watch 方法，对获取到的服务节点 key 进行监听。</span></p><p data-lake-id="ub3cefd93" id="ub3cefd93"><span data-lake-id="u2f203188" id="u2f203188" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="uac40d0a3" id="uac40d0a3" style="text-align: left"><span data-lake-id="u526637cd" id="u526637cd" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改服务发现方法的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Override%5Cnpublic%20List%3CServiceMetaInfo%3E%20serviceDiscovery(String%20serviceKey)%20%7B%5Cn%20%20%20%20%2F%2F%20%E4%BC%98%E5%85%88%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20List%3CServiceMetaInfo%3E%20cachedServiceMetaInfoList%20%3D%20registryServiceCache.readCache()%3B%5Cn%20%20%20%20if(cachedServiceMetaInfoList%20!%3D%20null%20)%7B%5Cn%20%20%20%20%20%20%20%20log.info(%5C%22%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%20--%20%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20cachedServiceMetaInfoList%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%E4%BD%9C%E4%B8%BA%E5%89%8D%E7%BC%80%EF%BC%8C%E4%BB%8E%20Etcd%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%EF%BC%9A%5Cn%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%BB%93%E5%B0%BE%E8%A6%81%E5%8A%A0%20%E2%80%9C%20%2F%20%E2%80%9D%5Cn%20%20%20%20String%20searchPrefix%20%3D%20ETCD_ROOT_PATH%20%2B%20serviceKey%20%2B%20%5C%22%2F%5C%22%3B%5Cn%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%89%8D%E7%BC%80%E6%9F%A5%E8%AF%A2%5Cn%20%20%20%20%20%20%20%20GetOption%20getOption%20%3D%20GetOption.builder().isPrefix(true).build()%3B%5Cn%20%20%20%20%20%20%20%20List%3CKeyValue%3E%20keyValues%20%3D%20kvClient.get(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ByteSequence.from(searchPrefix%2C%20StandardCharsets.UTF_8)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2C%20getOption)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getKvs()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20keyValues.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(keyValue%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96key%EF%BC%8C%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E7%9B%91%E5%90%AC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20key%20%3D%20keyValue.getKey().toString(StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20watch(key)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20value%20%3D%20keyValue.getValue().toString(StandardCharsets.UTF_8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20JSONUtil.toBean(value%2C%20ServiceMetaInfo.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.toList())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E8%A3%85%E9%85%8D%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20registryServiceCache.writeCache(serviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20return%20serviceMetaInfoList%3B%5Cn%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%5C%22%2C%20e)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%7B%22from%22%3A235%2C%22to%22%3A258%2C%22background%22%3A%22%23585A5A%22%7D%2C%7B%22from%22%3A891%2C%22to%22%3A1024%2C%22background%22%3A%22%23D8DAD9%22%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22otnVL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u64efd008" id="u64efd008"><br></p><h5 data-lake-id="x7uIp" id="x7uIp"><span data-lake-id="uc8729c62" id="uc8729c62" style="color: rgb(47, 48, 52)">5）测试</span></h5><p data-lake-id="u9f6415f0" id="u9f6415f0"><br></p><blockquote data-lake-id="ua69a4374" id="ua69a4374"><p data-lake-id="ube4929d6" id="ube4929d6"><strong><span data-lake-id="uc9f6243f" id="uc9f6243f">注意:不知道是什么原因(可能是由于</span></strong><span data-lake-id="uc6228af5" id="uc6228af5" style="color: rgb(38, 38, 38)">Vert.x是</span><strong><span data-lake-id="u7349e71a" id="u7349e71a" style="color: rgb(38, 38, 38)">异步的)导致在debug的时候,经常遇到某一个变量在收集数据,然后进行报错,导致无法debug(因为debug和正常运行的结果不同)</span></strong></p></blockquote><p data-lake-id="u7a8b2998" id="u7a8b2998" style="text-align: left"><span data-lake-id="u5ffd2d9b" id="u5ffd2d9b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ud8098ec8" id="ud8098ec8" style="text-align: left"><span data-lake-id="u831054a0" id="u831054a0" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以使用如下步骤，通过 debug 进行测试：</span></p><ol list="u268a9304"><li fid="udea092ac" data-lake-id="u7100a348" id="u7100a348" style="text-align: left"><span data-lake-id="ua6ac6dd2" id="ua6ac6dd2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">先启动服务提供者</span></li><li fid="udea092ac" data-lake-id="ua792e068" id="ua792e068" style="text-align: left"><span data-lake-id="u0ddd6308" id="u0ddd6308" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">修改服务消费者项目，连续调用服务 3 次，通过 debug 可以发现，第一次查注册中心、第二次查询缓存。</span></li><li fid="udea092ac" data-lake-id="u2042cb95" id="u2042cb95" style="text-align: left"><span data-lake-id="u88bc4aaa" id="u88bc4aaa" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">在第三次要调用服务时，下线服务提供者，可以在注册中心看到节点的注册 key 已被删除。</span></li><li fid="udea092ac" data-lake-id="u81b854d4" id="u81b854d4" style="text-align: left"><span data-lake-id="u9b2feac3" id="u9b2feac3" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">继续向下执行，发现第三次调用服务时，又重新从注册中心查询，说明缓存已经被更新。</span></li></ol><p data-lake-id="u34d7e8b2" id="u34d7e8b2"><br></p><p data-lake-id="ue062ef4f" id="ue062ef4f"><span data-lake-id="uc92be625" id="uc92be625" class="lake-fontsize-12">也可以进行多次启动客户端调用provider提供的服务,然后在上面打上log,根据控制台的输出可以看出,第一次是通过查询注册中心,而后就是直接经过的本地缓存而不是发送网络请求.</span></p><p data-lake-id="u129a77df" id="u129a77df"><br></p><p data-lake-id="uecf6449e" id="uecf6449e" style="text-align: left"><span data-lake-id="u36909c3a" id="u36909c3a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">至此，消费端服务缓存功能已经完成。</span></p><p data-lake-id="uea9f86e1" id="uea9f86e1" style="text-align: left"><span data-lake-id="u6eb91073" id="u6eb91073" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><blockquote data-lake-id="ufa95b43e" id="ufa95b43e"><p data-lake-id="ub7f2eea0" id="ub7f2eea0" style="text-align: left"><span data-lake-id="u1f08e20d" id="u1f08e20d" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">todo: 感觉这里当注册中心有节点删除之后,客户端就直接将所有的服务节点的缓存都给删除有点粒度太大了,但是暂时也想不到更好的方法,如果要删除指定的key的本地缓存,这样就会产生更多的网络通讯,对于资源的消耗也不小</span></p></blockquote><p data-lake-id="ua7d64720" id="ua7d64720" style="text-align: left"><span data-lake-id="u160d9975" id="u160d9975" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="PHYue" id="PHYue" style="text-align: left"><span data-lake-id="u220fc490" id="u220fc490" style="color: rgb(47, 48, 52)">ZooKeeper 注册中心实现</span></h3><blockquote data-lake-id="u9965a981" id="u9965a981"><p data-lake-id="u0834cad8" id="u0834cad8"><span data-lake-id="ub99824ed" id="ub99824ed" class="lake-fontsize-12">这里是直接全部跟着教程写的,里面的语法和规范太多了,没看官方文档,自己一点也不会QAQ</span></p></blockquote><p data-lake-id="u5c7289c2" id="u5c7289c2"><br></p><p data-lake-id="u30d528ec" id="u30d528ec" style="text-align: left"><span data-lake-id="uec55690c" id="uec55690c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">其实和 Etcd 注册中心的实现方式极其相似，步骤如下：</span></p><ol list="u9f951508"><li fid="ubc55e1ec" data-lake-id="ub0d29663" id="ub0d29663" style="text-align: left"><span data-lake-id="u5fb19aa7" id="u5fb19aa7" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">安装 ZooKeeper</span></li><li fid="ubc55e1ec" data-lake-id="ue123e3b2" id="ue123e3b2" style="text-align: left"><span data-lake-id="u38c5964c" id="u38c5964c" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">引入客户端依赖</span></li><li fid="ubc55e1ec" data-lake-id="uae1ec5f1" id="uae1ec5f1" style="text-align: left"><span data-lake-id="u81a432da" id="u81a432da" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">实现接口</span></li><li fid="ubc55e1ec" data-lake-id="ue25dc427" id="ue25dc427" style="text-align: left"><span data-lake-id="u14e20bb2" id="u14e20bb2" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">SPI 补充 ZooKeeper 注册中心</span></li></ol><p data-lake-id="u6df906a2" id="u6df906a2" style="text-align: left"><span data-lake-id="u62ad412a" id="u62ad412a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h4 data-lake-id="CL74P" id="CL74P"><span data-lake-id="u76a5900e" id="u76a5900e" style="color: rgb(47, 48, 52)">1）本地下载并启动 ZooKeeper，此处的版本使用 </span><span data-lake-id="u7a45a915" id="u7a45a915" style="color: rgb(47, 48, 52); background-color: rgb(240, 240, 240)">3.8.3</span><span data-lake-id="uce13ae54" id="uce13ae54" style="color: rgb(47, 48, 52)">。</span></h4><p data-lake-id="u53262730" id="u53262730" style="text-align: left"><span data-lake-id="ubc04dfb4" id="ubc04dfb4" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="u3eab36af" id="u3eab36af" style="text-align: left"><span data-lake-id="ue397eccf" id="ue397eccf" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">下载链接：</span><a href="about:blank" target="_blank" data-lake-id="u35170e44" id="u35170e44"><span data-lake-id="uc3c11040" id="uc3c11040" class="lake-fontsize-12">https://dlcdn.apache.org/zookeeper/zookeeper-3.8.3/apache-zookeeper-3.8.3-bin.tar.gz</span></a></p><p data-lake-id="u5c62bba0" id="u5c62bba0" style="text-align: left"><span data-lake-id="u6e248b41" id="u6e248b41" class="lake-fontsize-12">​</span><br></p><h4 data-lake-id="nIc0M" id="nIc0M"><span data-lake-id="u83b6042d" id="u83b6042d" style="color: rgb(47, 48, 52)">2）引入客户端依赖。</span></h4><p data-lake-id="u0cbed6f1" id="u0cbed6f1" style="text-align: left"><span data-lake-id="u749ca7de" id="u749ca7de" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><p data-lake-id="ucf8fab39" id="ucf8fab39" style="text-align: left"><span data-lake-id="ua292275b" id="ua292275b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">一般我们会使用 Apache Curator 来操作 ZooKeeper，</span></p><p data-lake-id="u0edf94d5" id="u0edf94d5" style="text-align: left"><span data-lake-id="u49212266" id="u49212266" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">可以参考官方文档：</span><a href="about:blank" target="_blank" data-lake-id="u3abc90d4" id="u3abc90d4"><span data-lake-id="ue1c64e0f" id="ue1c64e0f" class="lake-fontsize-12">https://curator.apache.org/docs/getting-started</span></a><span data-lake-id="u7d52be95" id="u7d52be95" class="lake-fontsize-12" style="color: rgb(47, 48, 52)"> 。</span></p><p data-lake-id="u68c398be" id="u68c398be" style="text-align: left"><br></p><p data-lake-id="u06874f26" id="u06874f26" style="text-align: left"><span data-lake-id="u5b2aad53" id="u5b2aad53" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">引入的依赖代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22yaml%22%2C%22code%22%3A%22%3C!--%20zookeeper%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Eorg.apache.curator%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Ecurator-x-discovery%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E5.6.0%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22x4muK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2409607c" id="u2409607c"><br></p><h4 data-lake-id="nQGYE" id="nQGYE"><span data-lake-id="ued856b79" id="ued856b79" style="color: rgb(47, 48, 52)">3）ZooKeeper 注册中心实现：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.registry%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20cn.hutool.core.collection.ConcurrentHashSet%3B%5Cnimport%20cn.hutool.cron.CronUtil%3B%5Cnimport%20cn.hutool.cron.task.Task%3B%5Cnimport%20cn.hutool.json.JSONUtil%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20io.etcd.jetcd.ByteSequence%3B%5Cnimport%20io.etcd.jetcd.KeyValue%3B%5Cnimport%20io.etcd.jetcd.Watch%3B%5Cnimport%20io.etcd.jetcd.options.GetOption%3B%5Cnimport%20io.etcd.jetcd.watch.WatchEvent%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.apache.curator.framework.CuratorFramework%3B%5Cnimport%20org.apache.curator.framework.CuratorFrameworkFactory%3B%5Cnimport%20org.apache.curator.framework.recipes.cache.CuratorCache%3B%5Cnimport%20org.apache.curator.framework.recipes.cache.CuratorCacheListener%3B%5Cnimport%20org.apache.curator.retry.ExponentialBackoffRetry%3B%5Cnimport%20org.apache.curator.x.discovery.ServiceDiscovery%3B%5Cnimport%20org.apache.curator.x.discovery.ServiceDiscoveryBuilder%3B%5Cnimport%20org.apache.curator.x.discovery.ServiceInstance%3B%5Cnimport%20org.apache.curator.x.discovery.details.JsonInstanceSerializer%3B%5Cn%5Cnimport%20java.nio.charset.StandardCharsets%3B%5Cnimport%20java.util.Collection%3B%5Cnimport%20java.util.HashSet%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Set%3B%5Cnimport%20java.util.stream.Collectors%3B%5Cn%5Cn%2F**%5Cn%20*%20Etcd%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F20%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20ZooKeeperRegistry%20implements%20Registry%20%7B%5Cn%5Cn%20%20%20%20private%20CuratorFramework%20client%3B%5Cn%5Cn%20%20%20%20private%20ServiceDiscovery%3CServiceMetaInfo%3E%20serviceDiscovery%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E8%8A%82%E7%82%B9%20--%20%20Etcd%20%E9%94%AE%E5%AD%98%E5%82%A8%E7%9A%84%E6%A0%B9%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20final%20String%20ZK_ROOT_PATH%20%3D%20%5C%22%2Frpc%2Fzk%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%AC%E6%9C%BA%E6%B3%A8%E5%86%8C%E7%9A%84%E8%8A%82%E7%82%B9%E9%9B%86%E5%90%88%EF%BC%88%E7%94%A8%E4%BA%8E%E7%BB%B4%E6%8A%A4%E7%BB%AD%E6%9C%9F%EF%BC%89%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20final%20Set%3CString%3E%20localRegisterNodeKeySet%20%3D%20new%20HashSet%3C%3E()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%9C%8D%E5%8A%A1%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20final%20RegistryServiceCache%20registryServiceCache%20%3D%20new%20RegistryServiceCache()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%AD%A3%E5%9C%A8%E7%9B%91%E5%90%AC%E7%9A%84Key%EF%BC%88%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E7%9B%91%E5%90%AC%E5%90%8C%E4%B8%80%E4%B8%AAkey%EF%BC%89%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20final%20Set%3CString%3E%20watchingKey%20%3D%20new%20ConcurrentHashSet%3C%3E()%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20init(RegistryConfig%20registryConfig)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BAclient%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20client%20%3D%20CuratorFrameworkFactory%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.connectString(registryConfig.getAddress())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.retryPolicy(new%20ExponentialBackoffRetry(Math.toIntExact(registryConfig.getTimeout())%2C%203))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BAserviceDiscovery%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20serviceDiscovery%20%3D%20ServiceDiscoveryBuilder.builder(ServiceMetaInfo.class)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.client(client)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.basePath(ZK_ROOT_PATH)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serializer(new%20JsonInstanceSerializer%3C%3E(ServiceMetaInfo.class))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8client%E5%92%8CserviceDiscovery%5Cn%20%20%20%20%20%20%20%20%20%20%20%20client.start()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceDiscovery.start()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20register(ServiceMetaInfo%20serviceMetaInfo)%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E5%88%B0zk%E9%87%8C%5Cn%20%20%20%20%20%20%20%20serviceDiscovery.registerService(bulidServiceInstance(serviceMetaInfo))%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%5Cn%20%20%20%20%20%20%20%20String%20registerKey%20%3D%20ZK_ROOT_PATH%20%2B%20%5C%22%2F%5C%22%20%2B%20serviceMetaInfo.getServiceNodeKey()%3B%5Cn%20%20%20%20%20%20%20%20localRegisterNodeKeySet.add(registerKey)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%85%83%E4%BF%A1%E6%81%AF%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20serviceMetaInfo%3A%5Cn%20%20%20%20%20*%20%40return%20org.apache.curator.x.discovery.ServiceInstance%3Ccom.yybf.chenrpc.model.ServiceMetaInfo%3E%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F3%2019%3A00%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20ServiceInstance%3CServiceMetaInfo%3E%20bulidServiceInstance(ServiceMetaInfo%20serviceMetaInfo)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20serviceAddress%20%3D%20serviceMetaInfo.getServiceAddress()%20%2B%20%5C%22%3A%5C%22%20%2B%20serviceMetaInfo.getServicePort()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20ServiceInstance%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.%3CServiceMetaInfo%3Ebuilder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.id(serviceAddress)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.name(serviceMetaInfo.getServiceKey())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.address(serviceAddress)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.payload(serviceMetaInfo)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20unRegister(ServiceMetaInfo%20serviceMetaInfo)%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceDiscovery.unregisterService(bulidServiceInstance(serviceMetaInfo))%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E9%94%80%E6%97%B6%E8%A6%81%E5%B0%86%E8%8A%82%E7%82%B9%E4%BB%8E%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E4%B8%AD%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20String%20registerKey%20%3D%20ZK_ROOT_PATH%20%2B%20%5C%22%2F%5C%22%20%2B%20serviceMetaInfo.getServiceNodeKey()%3B%5Cn%20%20%20%20%20%20%20%20localRegisterNodeKeySet.remove(registerKey)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20List%3CServiceMetaInfo%3E%20serviceDiscovery(String%20serviceKey)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BC%98%E5%85%88%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20cachedServiceMetaInfoList%20%3D%20registryServiceCache.readCache()%3B%5Cn%20%20%20%20%20%20%20%20if%20(cachedServiceMetaInfoList%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E4%BB%8E%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%20--%20%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20cachedServiceMetaInfoList%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Collection%3CServiceInstance%3CServiceMetaInfo%3E%3E%20serviceInstanceList%20%3D%20serviceDiscovery.queryForInstances(serviceKey)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20serviceInstanceList.stream()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.map(ServiceInstance%3A%3AgetPayload)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.collect(Collectors.toList())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E8%A3%85%E9%85%8D%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%20%20%20%20registryServiceCache.writeCache(serviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20serviceMetaInfoList%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%5C%22%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20destroy()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E4%B8%8B%E7%BA%BF%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20Zookeeper%E5%A5%BD%E5%83%8F%E7%94%A8%E7%9A%84%E6%98%AF%E4%B8%B4%E6%97%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E4%B8%8D%E7%94%A8%E7%89%B9%E6%84%8F%E4%B8%8B%E7%BA%BF%EF%BC%8C%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%8A%82%E7%82%B9%E8%87%AA%E5%8A%A8%E5%B0%B1%E4%BC%9A%E8%A2%AB%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8B%E7%BA%BF%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%81%8D%E5%8E%86%E6%9C%AC%E8%8A%82%E7%82%B9%E6%89%80%E6%9C%89%E7%9A%84key%5Cn%20%20%20%20%20%20%20%20for%20(String%20key%20%3A%20localRegisterNodeKeySet)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20client.delete().guaranteed().forPath(key)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(key%20%2B%20%5C%22%E8%8A%82%E7%82%B9%E4%B8%8B%E7%BA%BF%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90%5Cn%20%20%20%20%20%20%20%20if%20(client%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20client.close()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20heartBeat()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6%EF%BC%8C%E5%BB%BA%E7%AB%8B%E4%BA%86%E4%B8%B4%E6%97%B6%E8%8A%82%E7%82%B9%EF%BC%8C%E5%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%85%E9%9A%9C%E6%97%B6%EF%BC%8C%E4%B8%B4%E6%97%B6%E8%8A%82%E7%82%B9%E5%88%99%E4%BC%9A%E7%9B%B4%E6%8E%A5%E4%B8%A2%E5%A4%B1%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20todo%20%E7%9C%9F%E7%9A%84%E7%9C%8B%E4%B8%8D%E6%87%82QAQ%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20watch(String%20serviceNodeKey)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20watchKey%20%3D%20ZK_ROOT_PATH%20%2B%20%5C%22%2F%5C%22%20%2B%20serviceNodeKey%3B%5Cn%20%20%20%20%20%20%20%20boolean%20newWatch%20%3D%20watchingKey.add(watchKey)%3B%5Cn%20%20%20%20%20%20%20%20if(newWatch)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20CuratorCache%20curatorCache%20%3D%20CuratorCache.build(client%2CwatchKey)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20curatorCache.start()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20curatorCache.listenable().addListener(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20CuratorCacheListener%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.forDeletes(childData%20-%3E%20registryServiceCache.clearCache())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.forChanges(((oldNode%2Cnode)%20-%3E%20registryServiceCache.clearCache()))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TTu5v%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1bdf5664" id="u1bdf5664"><br></p><h4 data-lake-id="r6od0" id="r6od0"><span data-lake-id="u7e15ef9f" id="u7e15ef9f" style="color: rgb(47, 48, 52)">4）SPI 增加对 ZooKeeper 的支持：</span></h4><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22etcd%3Dcom.yupi.yurpc.registry.EtcdRegistry%5Cnzookeeper%3Dcom.yupi.yurpc.registry.ZooKeeperRegistry%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UWAp2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uab53198e" id="uab53198e"><br></p><p data-lake-id="u6ed34e3d" id="u6ed34e3d"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712313382781-978c66c8-445d-4c59-b7c8-c27ac7ea110e.png%22%2C%22taskId%22%3A%22u359c15e0-97c9-4ee5-81f0-86075e22bcb%22%2C%22clientId%22%3A%22ue8386a4d-f972-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1831%2C%22height%22%3A272%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A240371%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1831%2C%22originHeight%22%3A272%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E9%A1%B9%E7%9B%AE%20COMYYBF.CHENRPC.REGISTRY.REGISTRY%20%E7%A7%BB%E9%99%A4%E5%85%B3%E8%81%94%20%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%20%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%20RESOURCES%20META-INF%20ETCD-COM.YYBF.CHENRPC.REGISTRY.ETCDREGISTRY%201%20RPC%20ZOOKEEPER-COM.YYBF.CHENRPC.REGISTRY.ZOOKEEPERREGISTRY%20CUSTOM%20SYSTEM%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20COMYYBF.CHENRPC.SERIALIZER.SERIALIZER%20SERVICES%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A33%2C%22y%22%3A13%2C%22width%22%3A29%2C%22height%22%3A16%2C%22text%22%3A%22%E9%A1%B9%E7%9B%AE%22%7D%2C%7B%22x%22%3A588%2C%22y%22%3A12%2C%22width%22%3A261%2C%22height%22%3A19%2C%22text%22%3A%22COMYYBF.CHENRPC.REGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A1638%2C%22y%22%3A45%2C%22width%22%3A64%2C%22height%22%3A18%2C%22text%22%3A%22%E7%A7%BB%E9%99%A4%E5%85%B3%E8%81%94%22%7D%2C%7B%22x%22%3A565%2C%22y%22%3A46%2C%22width%22%3A216%2C%22height%22%3A20%2C%22text%22%3A%22%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%22%7D%2C%7B%22x%22%3A1723%2C%22y%22%3A46%2C%22width%22%3A93%2C%22height%22%3A17%2C%22text%22%3A%22%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A47%2C%22width%22%3A72%2C%22height%22%3A13%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A143%2C%22y%22%3A69%2C%22width%22%3A89%2C%22height%22%3A17%2C%22text%22%3A%22META-INF%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A78%2C%22width%22%3A437%2C%22height%22%3A20%2C%22text%22%3A%22ETCD-COM.YYBF.CHENRPC.REGISTRY.ETCDREGISTRY%22%7D%2C%7B%22x%22%3A557%2C%22y%22%3A79%2C%22width%22%3A16%2C%22height%22%3A22%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A159%2C%22y%22%3A94%2C%22width%22%3A49%2C%22height%22%3A18%2C%22text%22%3A%22RPC%22%7D%2C%7B%22x%22%3A624%2C%22y%22%3A105%2C%22width%22%3A536%2C%22height%22%3A24%2C%22text%22%3A%22ZOOKEEPER-COM.YYBF.CHENRPC.REGISTRY.ZOOKEEPERREGISTRY%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A118%2C%22width%22%3A83%2C%22height%22%3A21%2C%22text%22%3A%22CUSTOM%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A147%2C%22width%22%3A65%2C%22height%22%3A15%2C%22text%22%3A%22SYSTEM%22%7D%2C%7B%22x%22%3A222%2C%22y%22%3A170%2C%22width%22%3A260%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.REGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A222%2C%22y%22%3A196%2C%22width%22%3A274%2C%22height%22%3A18%2C%22text%22%3A%22COMYYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A176%2C%22y%22%3A220%2C%22width%22%3A68%2C%22height%22%3A16%2C%22text%22%3A%22SERVICES%22%7D%2C%7B%22x%22%3A203%2C%22y%22%3A245%2C%22width%22%3A273%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2348515c%22%2C%22id%22%3A%22u5ad6c1b4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ub4213782" id="ub4213782"><br></p><h4 data-lake-id="Pn7TR" id="Pn7TR"><span data-lake-id="u8dcca45c" id="u8dcca45c" style="color: rgb(47, 48, 52)">5）最后，可以更改服务提供者和消费者的注册中心配置来测试。</span></h4><p data-lake-id="u22df1bf4" id="u22df1bf4" style="text-align: left"><span data-lake-id="ubc0c6332" id="ubc0c6332" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">更改的配置如下：(这里项目并没有在提供者和消费者的示例里面进行显式的配置,而是使用的默认配置,默认配置是在rpc-core的</span><code data-lake-id="ubcf74c92" id="ubcf74c92"><span data-lake-id="u7a7ee759" id="u7a7ee759" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">RegistryConfig</span></code><span data-lake-id="ud792fdfc" id="ud792fdfc" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">里面)</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22rpc.registryConfig.registry%3Dzookeeper%5Cnrpc.registryConfig.address%3Dlocalhost%3A2181%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UYOxV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ucef6845a" id="ucef6845a"><br></p><h2 data-lake-id="c0uiB" id="c0uiB" style="text-align: left"><span data-lake-id="udac22431" id="udac22431" style="color: rgb(47, 48, 52)">三、扩展点</span></h2><h3 data-lake-id="XONoc" id="XONoc"><span data-lake-id="uc34f77bb" id="uc34f77bb" style="color: rgb(47, 48, 52)">1）完善服务注册信息。</span></h3><p data-lake-id="u0f8f708d" id="u0f8f708d" style="text-align: left"><span data-lake-id="u3238e522" id="u3238e522" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：比如增加节点注册时间。</span></p><p data-lake-id="u1512b140" id="u1512b140" style="text-align: left"><span data-lake-id="uf8a9ff62" id="uf8a9ff62" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="He54q" id="He54q"><span data-lake-id="ub47d305e" id="ub47d305e" style="color: rgb(47, 48, 52)">2）实现更多注册中心。（较难）</span></h3><p data-lake-id="uc7899c2e" id="uc7899c2e" style="text-align: left"><span data-lake-id="uf88376db" id="uf88376db" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：使用 Redis 实现注册中心。</span></p><p data-lake-id="ue7fcf07c" id="ue7fcf07c" style="text-align: left"><span data-lake-id="u79b26dac" id="u79b26dac" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="giMTQ" id="giMTQ"><span data-lake-id="u3c955327" id="u3c955327" style="color: rgb(47, 48, 52)">3）保证注册中心的高可用。</span></h3><p data-lake-id="u08e70a01" id="u08e70a01" style="text-align: left"><span data-lake-id="u8cd2525b" id="u8cd2525b" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：了解 Etcd 的集群机制。</span></p><p data-lake-id="u7efd85b3" id="u7efd85b3" style="text-align: left"><span data-lake-id="u6917fd00" id="u6917fd00" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="DCRw2" id="DCRw2"><span data-lake-id="u000694e5" id="u000694e5" style="color: rgb(47, 48, 52)">4）服务注册信息失效的兜底策略。（较难）</span></h3><p data-lake-id="u58bb44f8" id="u58bb44f8" style="text-align: left"><span data-lake-id="u54df7cf9" id="u54df7cf9" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：如果消费端调用节点时发现节点失效，也可以考虑是否需要从注册中心更新服务注册信息、或者强制更新本地缓存。</span></p><p data-lake-id="ubc02a63f" id="ubc02a63f" style="text-align: left"><span data-lake-id="ub6d61e2a" id="ub6d61e2a" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">​</span><br></p><h3 data-lake-id="uaz7t" id="uaz7t"><span data-lake-id="u1fbc3d54" id="u1fbc3d54" style="color: rgb(47, 48, 52)">5）注册中心 key 监听时，采用观察者模式实现处理。</span></h3><p data-lake-id="u8380378f" id="u8380378f" style="text-align: left"><span data-lake-id="u036c19f5" id="u036c19f5" class="lake-fontsize-12" style="color: rgb(47, 48, 52)">参考思路：可以定义一个 Listener 接口，根据 watch key 的变更类型去调用 Listener 的不同方法。</span></p><p data-lake-id="u05d6551b" id="u05d6551b"><br></p><h1 data-lake-id="JtFf2" id="JtFf2"><span data-lake-id="u4f6b6c64" id="u4f6b6c64">七.自定义协议</span></h1><h2 data-lake-id="V3jvz" id="V3jvz"><span data-lake-id="u0a6d0c42" id="u0a6d0c42" style="color: rgba(0, 0, 0, 0.85)">一、需求分析</span></h2><card type="block" name="hr" value="data:%7B%22id%22%3A%22PgXYi%22%7D"></card><p data-lake-id="ufed3c104" id="ufed3c104"><span data-lake-id="u948aa2a6" id="u948aa2a6" style="color: rgb(31, 35, 40)">目前的 RPC 框架，使用 Vert.x 的 HttpServer 作为服务提供者的服务器，代码实现比较简单，其底层网络传输使用的是 HTTP 协议。</span></p><p data-lake-id="u946f4027" id="u946f4027"><span data-lake-id="udd6d07ea" id="udd6d07ea" style="color: rgb(31, 35, 40)">有人会把HTTP 和 RPC 理解为同一类技术，但 HTTP 只是 RPC 框架网络传输的一种可选方式罢了。</span></p><p data-lake-id="u6ef64d37" id="u6ef64d37"><span data-lake-id="u7a6df330" id="u7a6df330" style="color: rgb(31, 35, 40)">问题来了，使用 HTTP 协议会有什么问题么？或者说，有没有更好的选择？</span></p><p data-lake-id="udf0d7b06" id="udf0d7b06"><span data-lake-id="u27a0906d" id="u27a0906d" style="color: rgb(31, 35, 40)">一般情况下，RPC 框架会比较注重性能，而 HTTP 协议中的头部信息、请求响应格式较 “重”，会影响网络传输性能。</span></p><p data-lake-id="u14ce67f8" id="u14ce67f8"><span data-lake-id="uf3c8ba36" id="uf3c8ba36" style="color: rgb(31, 35, 40)">举个例子，利用浏览器网络控制台随便查看一个请求，能看到大量的请求和响应标头：</span></p><p data-lake-id="uf2dc38b2" id="uf2dc38b2"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712584546981-0fc12a79-cb25-4169-8d35-cfe3f9c1f9f1.png%22%2C%22taskId%22%3A%22u2f87b49e-77c4-42f7-b884-6663ad5531d%22%2C%22clientId%22%3A%22u756478e2-d7a2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709778441859-54dba72b-9eb0-48fa-a246-55aeb26ff894.png%22%2C%22size%22%3A199282%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1454%2C%22originHeight%22%3A1182%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%90%AF%E5%8A%A8%E5%99%A8%20%E6%A0%87%E5%A4%B4%20%E9%A2%84%E8%A7%88%20%E6%97%B6%E9%97%B4%20%E5%93%8D%E5%BA%94%20COOKIE%20%E5%B8%B8%E8%A7%84%20%E8%AF%B7%E6%B1%82%E7%BD%91%E5%9D%80%3A%20HTTPS%3A%2F%2FWWW.CODEFATHER.CN%2F%25BC%2596%25E7%25A8%258B%25E5%25E5%25B%20C%25E8%2588%25AA%2F%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%3A%20GET%20%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81%3A%20200%20OK%20%E8%BF%9C%E7%A8%8B%E5%9C%B0%E5%9D%80%3A%20124.223.215.170%3A443%20%E5%BC%95%E8%8D%90%E6%9D%A5%E6%BA%90%E7%BD%91%E5%9D%80%E6%94%BF%E7%AD%96%3A%20STRICT-ORIGIN-WHEN-CROSS-ORIGIN%20%E5%93%8D%E5%BA%94%E6%A0%87%E5%A4%B4%20CONTENT-ENCODING%3A%20GZIP%20CONTENT-TYPE%3A%20TEXT%2FHTML%20THU%2C07%20MAR%202024%2002%3A26%3A59%20GMT%20DATE%3A%20W%2F65D57B34-17D4C%5C%22%20ETAG%3A%20WED%2C21%20FEB%202024%2004%3A25%3A24%20GMT%20LAST-MODIFIED%3A%20SERVER%3A%20NGINX%20STRICT-TRANSPORT-SECURITY%3A%20MAX-AGE31536000%20VARY%3A%20ACCEPT-ENCODING%20%E8%AF%B7%E6%B1%82%E6%A0%87%E5%A4%B4%20WWW.CODEFATHER.CN%20%3AAUTHORITY%3A%20GET%20%3AMETHOD%3A%20%2F%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25A%2F%20%3APATH%3A%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A428%2C%22y%22%3A14%2C%22width%22%3A90%2C%22height%22%3A34%2C%22text%22%3A%22%E5%90%AF%E5%8A%A8%E5%99%A8%22%7D%2C%7B%22x%22%3A93%2C%22y%22%3A14%2C%22width%22%3A67%2C%22height%22%3A35%2C%22text%22%3A%22%E6%A0%87%E5%A4%B4%22%7D%2C%7B%22x%22%3A206%2C%22y%22%3A14%2C%22width%22%3A63%2C%22height%22%3A33%2C%22text%22%3A%22%E9%A2%84%E8%A7%88%22%7D%2C%7B%22x%22%3A566%2C%22y%22%3A15%2C%22width%22%3A63%2C%22height%22%3A32%2C%22text%22%3A%22%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A316%2C%22y%22%3A15%2C%22width%22%3A64%2C%22height%22%3A32%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A676%2C%22y%22%3A18%2C%22width%22%3A97%2C%22height%22%3A27%2C%22text%22%3A%22COOKIE%22%7D%2C%7B%22x%22%3A33%2C%22y%22%3A83%2C%22width%22%3A60%2C%22height%22%3A30%2C%22text%22%3A%22%E5%B8%B8%E8%A7%84%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A145%2C%22width%22%3A128%2C%22height%22%3A32%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E7%BD%91%E5%9D%80%3A%22%7D%2C%7B%22x%22%3A478%2C%22y%22%3A147%2C%22width%22%3A953%2C%22height%22%3A35%2C%22text%22%3A%22HTTPS%3A%2F%2FWWW.CODEFATHER.CN%2F%25BC%2596%25E7%25A8%258B%25E5%25E5%25B%22%7D%2C%7B%22x%22%3A498%2C%22y%22%3A198%2C%22width%22%3A216%2C%22height%22%3A27%2C%22text%22%3A%22C%25E8%2588%25AA%2F%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A247%2C%22width%22%3A128%2C%22height%22%3A30%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%3A%22%7D%2C%7B%22x%22%3A484%2C%22y%22%3A251%2C%22width%22%3A57%2C%22height%22%3A24%2C%22text%22%3A%22GET%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A295%2C%22width%22%3A124%2C%22height%22%3A31%2C%22text%22%3A%22%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81%3A%22%7D%2C%7B%22x%22%3A520%2C%22y%22%3A298%2C%22width%22%3A105%2C%22height%22%3A28%2C%22text%22%3A%22200%20OK%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A348%2C%22width%22%3A128%2C%22height%22%3A29%2C%22text%22%3A%22%E8%BF%9C%E7%A8%8B%E5%9C%B0%E5%9D%80%3A%22%7D%2C%7B%22x%22%3A484%2C%22y%22%3A348%2C%22width%22%3A284%2C%22height%22%3A29%2C%22text%22%3A%22124.223.215.170%3A443%22%7D%2C%7B%22x%22%3A22%2C%22y%22%3A397%2C%22width%22%3A246%2C%22height%22%3A30%2C%22text%22%3A%22%E5%BC%95%E8%8D%90%E6%9D%A5%E6%BA%90%E7%BD%91%E5%9D%80%E6%94%BF%E7%AD%96%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A399%2C%22width%22%3A413%2C%22height%22%3A32%2C%22text%22%3A%22STRICT-ORIGIN-WHEN-CROSS-ORIGIN%22%7D%2C%7B%22x%22%3A32%2C%22y%22%3A479%2C%22width%22%3A121%2C%22height%22%3A31%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E6%A0%87%E5%A4%B4%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A545%2C%22width%22%3A257%2C%22height%22%3A34%2C%22text%22%3A%22CONTENT-ENCODING%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A549%2C%22width%22%3A58%2C%22height%22%3A29%2C%22text%22%3A%22GZIP%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A596%2C%22width%22%3A191%2C%22height%22%3A28%2C%22text%22%3A%22CONTENT-TYPE%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A595%2C%22width%22%3A123%2C%22height%22%3A28%2C%22text%22%3A%22TEXT%2FHTML%22%7D%2C%7B%22x%22%3A481%2C%22y%22%3A644%2C%22width%22%3A439%2C%22height%22%3A29%2C%22text%22%3A%22THU%2C07%20MAR%202024%2002%3A26%3A59%20GMT%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A647%2C%22width%22%3A72%2C%22height%22%3A26%2C%22text%22%3A%22DATE%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A695%2C%22width%22%3A297%2C%22height%22%3A28%2C%22text%22%3A%22W%2F65D57B34-17D4C%5C%22%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A695%2C%22width%22%3A71%2C%22height%22%3A30%2C%22text%22%3A%22ETAG%3A%22%7D%2C%7B%22x%22%3A482%2C%22y%22%3A744%2C%22width%22%3A447%2C%22height%22%3A29%2C%22text%22%3A%22WED%2C21%20FEB%202024%2004%3A25%3A24%20GMT%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A747%2C%22width%22%3A198%2C%22height%22%3A27%2C%22text%22%3A%22LAST-MODIFIED%3A%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A797%2C%22width%22%3A96%2C%22height%22%3A25%2C%22text%22%3A%22SERVER%3A%22%7D%2C%7B%22x%22%3A481%2C%22y%22%3A799%2C%22width%22%3A77%2C%22height%22%3A29%2C%22text%22%3A%22NGINX%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A841%2C%22width%22%3A344%2C%22height%22%3A36%2C%22text%22%3A%22STRICT-TRANSPORT-SECURITY%3A%22%7D%2C%7B%22x%22%3A479%2C%22y%22%3A847%2C%22width%22%3A275%2C%22height%22%3A29%2C%22text%22%3A%22MAX-AGE31536000%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A895%2C%22width%22%3A71%2C%22height%22%3A31%2C%22text%22%3A%22VARY%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A897%2C%22width%22%3A238%2C%22height%22%3A31%2C%22text%22%3A%22ACCEPT-ENCODING%22%7D%2C%7B%22x%22%3A34%2C%22y%22%3A976%2C%22width%22%3A120%2C%22height%22%3A32%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E6%A0%87%E5%A4%B4%22%7D%2C%7B%22x%22%3A482%2C%22y%22%3A1043%2C%22width%22%3A260%2C%22height%22%3A25%2C%22text%22%3A%22WWW.CODEFATHER.CN%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A1042%2C%22width%22%3A138%2C%22height%22%3A31%2C%22text%22%3A%22%3AAUTHORITY%3A%22%7D%2C%7B%22x%22%3A484%2C%22y%22%3A1092%2C%22width%22%3A56%2C%22height%22%3A26%2C%22text%22%3A%22GET%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A1092%2C%22width%22%3A123%2C%22height%22%3A27%2C%22text%22%3A%22%3AMETHOD%3A%22%7D%2C%7B%22x%22%3A480%2C%22y%22%3A1139%2C%22width%22%3A829%2C%22height%22%3A31%2C%22text%22%3A%22%2F%25E7%25BC%2596%25E7%25A8%258B%25E5%25AF%25BC%25E8%2588%25A%2F%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A1145%2C%22width%22%3A77%2C%22height%22%3A25%2C%22text%22%3A%22%3APATH%3A%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23323232%22%2C%22id%22%3A%22u589a3a73%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u886f3296" id="u886f3296"><span data-lake-id="ud9a9f30f" id="ud9a9f30f" style="color: rgb(31, 35, 40)">所以需要自己自定义一套 RPC 协议，比如利用 TCP 等传输层协议、自己定义请求响应结构，来实现性能更高、更灵活、更安全的 RPC 框架。</span></p><h2 data-lake-id="p09l9" id="p09l9"><span data-lake-id="u4e80cd1e" id="u4e80cd1e" style="color: rgba(0, 0, 0, 0.85)">二、设计方案</span></h2><card type="block" name="hr" value="data:%7B%22id%22%3A%22t0Wl4%22%7D"></card><p data-lake-id="ub4105a2d" id="ub4105a2d"><span data-lake-id="u1e52c156" id="u1e52c156" style="color: rgb(31, 35, 40)">自定义 RPC 协议可以分为 2 大核心部分：</span></p><ul list="uce0c7852"><li fid="u4e13af3f" data-lake-id="ud138ddb2" id="ud138ddb2"><span data-lake-id="u85c0fcb6" id="u85c0fcb6" style="color: rgb(31, 35, 40)">自定义网络传输</span></li><li fid="u4e13af3f" data-lake-id="u6edef210" id="u6edef210"><span data-lake-id="ua8249b27" id="ua8249b27" style="color: rgb(31, 35, 40)">自定义消息结构</span></li></ul><h3 data-lake-id="luwUZ" id="luwUZ"><span data-lake-id="u24944b46" id="u24944b46" style="color: rgba(0, 0, 0, 0.85)">1、网络传输设计</span></h3><p data-lake-id="u48495d5d" id="u48495d5d"><span data-lake-id="u5b487d44" id="u5b487d44" style="color: rgb(31, 35, 40)">网络传输设计的目标是：选择一个能够高性能通信的网络协议和传输方式。</span></p><p data-lake-id="u8fa16232" id="u8fa16232"><span data-lake-id="u1d52e298" id="u1d52e298" style="color: rgb(31, 35, 40)">需求分析中已经提到了，HTTP 协议的头信息是比较大的，会影响传输性能。但其实除了这点外，HTTP 本身属于无状态协议，这意味着每个 HTTP 请求都是独立的，每次请求 / 响应都要重新建立和关闭连接，也会影响性能。</span></p><p data-lake-id="u75ed53af" id="u75ed53af"><span data-lake-id="uf6dfe7e7" id="uf6dfe7e7" style="color: rgb(31, 35, 40)">考虑到这点，在 HTTP/1.1 中引入了持久连接（Keep-Alive），允许在单个 TCP 连接上发送多个 HTTP 请求和响应，避免了每次请求都要重新建立和关闭连接的开销。</span></p><p data-lake-id="u0c5b7078" id="u0c5b7078"><span data-lake-id="ucdd3c048" id="ucdd3c048" style="color: rgb(31, 35, 40)">虽然如此，HTTP 本身是应用层协议，我们现在设计的 RPC 协议也是应用层协议，性能肯定是不如底层（传输层）的 TCP 协议要高的。所以想要追求更高的性能，还是选择使用 TCP 协议完成网络传输，有更多的自主设计空间。</span></p><h3 data-lake-id="lcPqy" id="lcPqy"><span data-lake-id="u3e86bd26" id="u3e86bd26" style="color: rgba(0, 0, 0, 0.85)">2、消息结构设计</span></h3><p data-lake-id="u1c0096a9" id="u1c0096a9"><span data-lake-id="u88188faf" id="u88188faf" style="color: rgb(31, 35, 40)">消息结构设计的目标是：用 </span><strong><span data-lake-id="ub538179a" id="ub538179a" style="color: rgb(31, 35, 40)">最少的</span></strong><span data-lake-id="u9b4ce3cb" id="u9b4ce3cb" style="color: rgb(31, 35, 40)"> 空间传递 </span><strong><span data-lake-id="u57227ce4" id="u57227ce4" style="color: rgb(31, 35, 40)">需要的</span></strong><span data-lake-id="u21549686" id="u21549686" style="color: rgb(31, 35, 40)"> 信息。</span></p><p data-lake-id="ubca1f96e" id="ubca1f96e"><span data-lake-id="uc59e0581" id="uc59e0581" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="tUDNX" id="tUDNX"><span data-lake-id="u751e394f" id="u751e394f" style="color: rgb(31, 35, 40)">1）如何使用最少的空间</span></h4><p data-lake-id="u3fdcc738" id="u3fdcc738"><span data-lake-id="u8d104f59" id="u8d104f59" style="color: rgb(31, 35, 40)">大家之前接触到的数据类型可能都是整型、长整型、浮点数类型等等，这些类型其实都比较 “重”，占用的字节数较多。比如整型要占用 4 个字节、32 个 bit 位。</span></p><p data-lake-id="uf71ba720" id="uf71ba720"><span data-lake-id="u0429b71e" id="u0429b71e" style="color: rgb(31, 35, 40)">我们在自定义消息结构时，想要节省空间，就要尽可能使用更轻量的类型，比如 </span><strong><span data-lake-id="u2dd6a54a" id="u2dd6a54a" style="color: rgb(31, 35, 40)">byte 字节类型</span></strong><span data-lake-id="u0bc3b4b1" id="u0bc3b4b1" style="color: rgb(31, 35, 40)">，只占用 1 个字节、8 个 bit 位。</span></p><p data-lake-id="uca601cac" id="uca601cac"><span data-lake-id="u654ae89a" id="u654ae89a" style="color: rgb(31, 35, 40)">需要注意的是，Java 中实现 bit 位运算拼接相对比较麻烦，所以权衡开发成本，我们设计消息结构时，尽量给每个数据凑到整个字节。</span></p><h4 data-lake-id="fImcz" id="fImcz"><span data-lake-id="ucb7f03ef" id="ucb7f03ef" style="color: rgb(31, 35, 40)">2）消息内需要哪些信息</span></h4><p data-lake-id="u7d9c628f" id="u7d9c628f"><span data-lake-id="ufc6757ce" id="ufc6757ce" style="color: rgb(31, 35, 40)">从之前的 HTTP 请求方式中，找到一些线索</span></p><p data-lake-id="u35dc869c" id="u35dc869c"><span data-lake-id="u72faa5bf" id="u72faa5bf" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u60980212" id="u60980212"><span data-lake-id="u2071f396" id="u2071f396" style="color: rgb(31, 35, 40)">分析 HTTP 请求结构，我们能够得到 RPC 消息所需的信息：</span></p><ul list="ub21a749d"><li fid="u8a5ea66e" data-lake-id="u65ea5be0" id="u65ea5be0"><span data-lake-id="u578f8e76" id="u578f8e76" style="color: rgb(31, 35, 40)">魔数：作用是安全校验，防止服务器处理了非框架发来的乱七八糟的消息（类似 HTTPS 的安全证书）</span></li><li fid="u8a5ea66e" data-lake-id="u8339d8e7" id="u8339d8e7"><span data-lake-id="u30972eb0" id="u30972eb0" style="color: rgb(31, 35, 40)">版本号：保证请求和响应的一致性（类似 HTTP 协议有 1.0/2.0 等版本）</span></li><li fid="u8a5ea66e" data-lake-id="u4d883bcc" id="u4d883bcc"><span data-lake-id="ue0344a25" id="ue0344a25" style="color: rgb(31, 35, 40)">序列化方式：来告诉服务端和客户端如何解析数据（类似 HTTP 的 Content-Type 内容类型）</span></li><li fid="u8a5ea66e" data-lake-id="u88ab283f" id="u88ab283f"><span data-lake-id="u48476ed5" id="u48476ed5" style="color: rgb(31, 35, 40)">类型：标识是请求还是响应？或者是心跳检测等其他用途。（类似 HTTP 有请求头和响应头）</span></li><li fid="u8a5ea66e" data-lake-id="u5cfc535c" id="u5cfc535c"><span data-lake-id="ud42f8c6d" id="ud42f8c6d" style="color: rgb(31, 35, 40)">状态：如果是响应，记录响应的结果（类似 HTTP 的 200 状态代码）</span></li></ul><p data-lake-id="u936ca6d0" id="u936ca6d0"><span data-lake-id="u9a691310" id="u9a691310" style="color: rgb(31, 35, 40)">此外，还需要有请求 id，唯一标识某个请求，因为 TCP 是双向通信的，需要有个唯一标识来追踪每个请求。</span></p><p data-lake-id="ub24b9817" id="ub24b9817"><span data-lake-id="u6c6662e4" id="u6c6662e4" style="color: rgb(31, 35, 40)">最后，也是最重要的，要发送 body 内容数据。我们暂时称它为</span><span data-lake-id="u9b29a2d0" id="u9b29a2d0" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u07b9014e" id="u07b9014e" style="color: rgb(31, 35, 40)">请求体</span></strong><span data-lake-id="u64aa5053" id="u64aa5053" style="color: rgb(31, 35, 40)">，类似于我们之前 HTTP 请求中发送的 RpcRequest。</span></p><p data-lake-id="u6c058e12" id="u6c058e12"><span data-lake-id="ub21791e6" id="ub21791e6" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u07705e91" id="u07705e91"><span data-lake-id="u1113b63e" id="u1113b63e" style="color: rgb(31, 35, 40)">如果是 HTTP 这种协议，有专门的 key / value 结构，很容易找到完整的 body 数据。但基于 TCP 协议，想要获取到完整的 body 内容数据，就需要一些 “小心思” 了，因为 TCP 协议本身会存在半包和粘包问题，每次传输的数据可能是不完整的，具体的后面会讲。</span></p><p data-lake-id="u270ba2fb" id="u270ba2fb"><span data-lake-id="u41a97fd6" id="u41a97fd6" style="color: rgb(31, 35, 40)">所以我们需要在消息头中新增一个字段 </span><strong><span data-lake-id="u1d6c054a" id="u1d6c054a" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">请求体数据长度</span></strong><span data-lake-id="u84af6c35" id="u84af6c35" style="color: rgb(31, 35, 40)">，保证能够完整地获取 body 内容信息。</span></p><p data-lake-id="u9a55c1e5" id="u9a55c1e5"><span data-lake-id="u07937894" id="u07937894" style="color: rgb(31, 35, 40)">基于以上的思考，我们可以得到最终的消息结构设计，如下图：</span></p><p data-lake-id="ud999a674" id="ud999a674"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712584721875-c14cc6e1-75ad-4bbe-bdaf-04ff51dd94cd.png%22%2C%22taskId%22%3A%22u505443c8-97f0-43cd-a224-a50c3ecaf57%22%2C%22clientId%22%3A%22u756478e2-d7a2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image-20240309123613046.png%22%2C%22size%22%3A54842%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1230%2C%22originHeight%22%3A776%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E9%AD%94%E6%95%B0%20%E7%B1%BB%E5%9E%8B%20%E7%89%88%E6%9C%AC%20%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%20%E7%8A%B6%E6%80%81%208%20BIT%208%20BIT%208%20BIT%208%20BIT%208%20BIT%20%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E8%AF%B7%E6%B1%82ID%2064%20BIT%20%E8%AF%B7%E6%B1%82%E4%BD%93%E6%95%B0%E6%8D%AE%E9%95%BF%E5%BA%A6%2032%20BIT%20%E8%AF%B7%E6%B1%82%E4%BD%93(%E5%86%85%E5%AE%B9)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A200%2C%22y%22%3A77%2C%22width%22%3A54%2C%22height%22%3A26%2C%22text%22%3A%22%E9%AD%94%E6%95%B0%22%7D%2C%7B%22x%22%3A741%2C%22y%22%3A77%2C%22width%22%3A50%2C%22height%22%3A26%2C%22text%22%3A%22%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A383%2C%22y%22%3A77%2C%22width%22%3A52%2C%22height%22%3A25%2C%22text%22%3A%22%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A524%2C%22y%22%3A77%2C%22width%22%3A125%2C%22height%22%3A25%2C%22text%22%3A%22%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F%22%7D%2C%7B%22x%22%3A920%2C%22y%22%3A77%2C%22width%22%3A53%2C%22height%22%3A27%2C%22text%22%3A%22%E7%8A%B6%E6%80%81%22%7D%2C%7B%22x%22%3A739%2C%22y%22%3A121%2C%22width%22%3A56%2C%22height%22%3A24%2C%22text%22%3A%228%20BIT%22%7D%2C%7B%22x%22%3A918%2C%22y%22%3A121%2C%22width%22%3A56%2C%22height%22%3A23%2C%22text%22%3A%228%20BIT%22%7D%2C%7B%22x%22%3A379%2C%22y%22%3A123%2C%22width%22%3A54%2C%22height%22%3A22%2C%22text%22%3A%228%20BIT%22%7D%2C%7B%22x%22%3A559%2C%22y%22%3A123%2C%22width%22%3A55%2C%22height%22%3A21%2C%22text%22%3A%228%20BIT%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A124%2C%22width%22%3A55%2C%22height%22%3A21%2C%22text%22%3A%228%20BIT%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A233%2C%22width%22%3A28%2C%22height%22%3A117%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%B4%22%7D%2C%7B%22x%22%3A613%2C%22y%22%3A256%2C%22width%22%3A78%2C%22height%22%3A25%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82ID%22%7D%2C%7B%22x%22%3A619%2C%22y%22%3A303%2C%22width%22%3A68%2C%22height%22%3A21%2C%22text%22%3A%2264%20BIT%22%7D%2C%7B%22x%22%3A406%2C%22y%22%3A435%2C%22width%22%3A182%2C%22height%22%3A29%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E4%BD%93%E6%95%B0%E6%8D%AE%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A462%2C%22y%22%3A483%2C%22width%22%3A69%2C%22height%22%3A22%2C%22text%22%3A%2232%20BIT%22%7D%2C%7B%22x%22%3A563%2C%22y%22%3A639%2C%22width%22%3A162%2C%22height%22%3A27%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E4%BD%93(%E5%86%85%E5%AE%B9)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fdfdfd%22%2C%22id%22%3A%22u342a323d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u9617cf0f" id="u9617cf0f"><span data-lake-id="ub1d1ce36" id="ub1d1ce36" style="color: rgb(31, 35, 40)">实际上，这些数据应该是紧凑的，请求头信息总长 17 个字节。也就是说，上述消息结构，本质上就是拼接在一起的一个字节数组。通过约定好的格式，来从数组中按序读取一个个对应的数值。后续实现时，需要有 </span><strong><span data-lake-id="u5c46c5b8" id="u5c46c5b8" style="color: rgb(31, 35, 40)">消息编码器</span></strong><span data-lake-id="ua080111c" id="ua080111c" style="color: rgb(31, 35, 40)"> 和 </span><strong><span data-lake-id="uc2e3061c" id="uc2e3061c" style="color: rgb(31, 35, 40)">消息解码器</span></strong><span data-lake-id="ud440fa74" id="ud440fa74" style="color: rgb(31, 35, 40)">，编码器先 new 一个空的 Buffer 缓冲区，然后按照顺序向缓冲区依次写入这些数据；解码器在读取时也按照顺序依次读取，就能还原出编码前的数据。</span></p><p data-lake-id="u81f9dbe6" id="u81f9dbe6"><span data-lake-id="u6c9db47a" id="u6c9db47a" style="color: rgb(31, 35, 40)">通过这种约定的方式，我们就不用记录头信息了。比如 magic 魔数，不用存储 “magic” 这个字符串，而是读取第一个字节（前 8 bit）就能获取到。</span></p><p data-lake-id="u19763919" id="u19763919"><span data-lake-id="u7aca2f73" id="u7aca2f73" style="color: rgb(31, 35, 40)">如果你学过 Redis 底层，会发现很多数据结构都是这种设计。</span></p><p data-lake-id="u1fb7315c" id="u1fb7315c"><span data-lake-id="uecab1b09" id="uecab1b09" style="color: rgb(31, 35, 40)">可以学习一下优秀开源框架的协议设计，这样不会说毫无头绪。</span></p><p data-lake-id="ubd30acb2" id="ubd30acb2"><span data-lake-id="ue5835f94" id="ue5835f94" style="color: rgb(31, 35, 40)">比如这里就参考了 Dubbo 的协议设计，如下图：</span></p><p data-lake-id="u113dd7f0" id="u113dd7f0"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712584771892-2992b8f8-0037-4a59-989a-2db08bb96004.png%22%2C%22taskId%22%3A%22u3f509af1-f00a-4e9a-97bd-0595020a274%22%2C%22clientId%22%3A%22u756478e2-d7a2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709177220258-ee77a5ed-b68a-4def-9e43-6738164ffba5.png%22%2C%22size%22%3A74833%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A620%2C%22originHeight%22%3A227%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DUBBO%20PROTOCOL%203%202%200%20OFF%20SETS%20OCTET%201%203%2016171819202122222526272827282930%20910111213%202%201%204%205%200%206%207%208%2014%2015%20OCTET%20BIT%20RA%20SERIALIZATION%20MAGIC%20HIGH%20STATUS%20MAGIC%20LOW%20O%20ID%2032%20RPC%20REQUEST%20ID%2064%20DATA%20LENGTH%2096%2016%20VARIABLE%20LENGTH%20PART%2CIN%20TURN%2CIS%3A%20128%20IDUBBO%20VERGION%2C%20SERVICE%20NANE%2C%20SERVICE%20VERSION%2C%20NETHOD%20NAME%2C%20PARANETER%20TYPOS%2C%20ARGUMENTA%2C%20ATTACHMEATE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A269%2C%22y%22%3A2%2C%22width%22%3A72%2C%22height%22%3A12%2C%22text%22%3A%22DUBBO%20PROTOCOL%22%7D%2C%7B%22x%22%3A526%2C%22y%22%3A17%2C%22width%22%3A11%2C%22height%22%3A12%2C%22text%22%3A%223%22%7D%2C%7B%22x%22%3A394%2C%22y%22%3A18%2C%22width%22%3A10%2C%22height%22%3A11%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A18%2C%22width%22%3A9%2C%22height%22%3A10%2C%22text%22%3A%220%22%7D%2C%7B%22x%22%3A12%2C%22y%22%3A18%2C%22width%22%3A62%2C%22height%22%3A11%2C%22text%22%3A%22OFF%20SETS%20OCTET%22%7D%2C%7B%22x%22%3A263%2C%22y%22%3A19%2C%22width%22%3A11%2C%22height%22%3A10%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A129%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A12%2C%22text%22%3A%223%22%7D%2C%7B%22x%22%3A336%2C%22y%22%3A34%2C%22width%22%3A259%2C%22height%22%3A12%2C%22text%22%3A%2216171819202122222526272827282930%22%7D%2C%7B%22x%22%3A226%2C%22y%22%3A33%2C%22width%22%3A73%2C%22height%22%3A13%2C%22text%22%3A%22910111213%22%7D%2C%7B%22x%22%3A114%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A11%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A12%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A145%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A11%2C%22text%22%3A%224%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A11%2C%22text%22%3A%225%22%7D%2C%7B%22x%22%3A81%2C%22y%22%3A34%2C%22width%22%3A9%2C%22height%22%3A11%2C%22text%22%3A%220%22%7D%2C%7B%22x%22%3A178%2C%22y%22%3A34%2C%22width%22%3A24%2C%22height%22%3A11%2C%22text%22%3A%226%207%22%7D%2C%7B%22x%22%3A210%2C%22y%22%3A34%2C%22width%22%3A10%2C%22height%22%3A11%2C%22text%22%3A%228%22%7D%2C%7B%22x%22%3A304%2C%22y%22%3A35%2C%22width%22%3A26%2C%22height%22%3A9%2C%22text%22%3A%2214%2015%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A35%2C%22width%22%3A29%2C%22height%22%3A10%2C%22text%22%3A%22OCTET%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A36%2C%22width%22%3A18%2C%22height%22%3A9%2C%22text%22%3A%22BIT%22%7D%2C%7B%22x%22%3A338%2C%22y%22%3A50%2C%22width%22%3A8%2C%22height%22%3A18%2C%22text%22%3A%22RA%22%7D%2C%7B%22x%22%3A387%2C%22y%22%3A76%2C%22width%22%3A72%2C%22height%22%3A9%2C%22text%22%3A%22SERIALIZATION%22%7D%2C%7B%22x%22%3A114%2C%22y%22%3A79%2C%22width%22%3A53%2C%22height%22%3A13%2C%22text%22%3A%22MAGIC%20HIGH%22%7D%2C%7B%22x%22%3A518%2C%22y%22%3A80%2C%22width%22%3A29%2C%22height%22%3A9%2C%22text%22%3A%22STATUS%22%7D%2C%7B%22x%22%3A243%2C%22y%22%3A80%2C%22width%22%3A52%2C%22height%22%3A11%2C%22text%22%3A%22MAGIC%20LOW%22%7D%2C%7B%22x%22%3A57%2C%22y%22%3A80%2C%22width%22%3A8%2C%22height%22%3A14%2C%22text%22%3A%22O%22%7D%2C%7B%22x%22%3A414%2C%22y%22%3A87%2C%22width%22%3A17%2C%22height%22%3A7%2C%22text%22%3A%22ID%22%7D%2C%7B%22x%22%3A56%2C%22y%22%3A127%2C%22width%22%3A13%2C%22height%22%3A8%2C%22text%22%3A%2232%22%7D%2C%7B%22x%22%3A300%2C%22y%22%3A133%2C%22width%22%3A75%2C%22height%22%3A11%2C%22text%22%3A%22RPC%20REQUEST%20ID%22%7D%2C%7B%22x%22%3A56%2C%22y%22%3A143%2C%22width%22%3A13%2C%22height%22%3A9%2C%22text%22%3A%2264%22%7D%2C%7B%22x%22%3A309%2C%22y%22%3A158%2C%22width%22%3A57%2C%22height%22%3A10%2C%22text%22%3A%22DATA%20LENGTH%22%7D%2C%7B%22x%22%3A55%2C%22y%22%3A158%2C%22width%22%3A14%2C%22height%22%3A9%2C%22text%22%3A%2296%22%7D%2C%7B%22x%22%3A24%2C%22y%22%3A174%2C%22width%22%3A12%2C%22height%22%3A9%2C%22text%22%3A%2216%22%7D%2C%7B%22x%22%3A242%2C%22y%22%3A175%2C%22width%22%3A187%2C%22height%22%3A10%2C%22text%22%3A%22VARIABLE%20LENGTH%20PART%2CIN%20TURN%2CIS%3A%22%7D%2C%7B%22x%22%3A53%2C%22y%22%3A176%2C%22width%22%3A17%2C%22height%22%3A9%2C%22text%22%3A%22128%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A185%2C%22width%22%3A519%2C%22height%22%3A12%2C%22text%22%3A%22IDUBBO%20VERGION%2C%20SERVICE%20NANE%2C%20SERVICE%20VERSION%2C%20NETHOD%20NAME%2C%20PARANETER%20TYPOS%2C%20ARGUMENTA%2C%20ATTACHMEATE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22u778a6516%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uc986c182" id="uc986c182"><span data-lake-id="uc418f37f" id="uc418f37f" style="color: rgb(31, 35, 40)">明确了设计后，来开发实现，就比较简单了。</span></p><h2 data-lake-id="i0jB7" id="i0jB7"><span data-lake-id="ub3cea1a5" id="ub3cea1a5" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><h3 data-lake-id="cNEab" id="cNEab"><span data-lake-id="u2c333a2e" id="u2c333a2e" style="color: rgba(0, 0, 0, 0.85)">1、消息结构</span></h3><p data-lake-id="ub99ab97d" id="ub99ab97d"><span data-lake-id="u9af5326f" id="u9af5326f" style="color: rgb(31, 35, 40)">新建 </span><code data-lake-id="uae7afc90" id="uae7afc90"><span data-lake-id="u71fd14cb" id="u71fd14cb" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">protocol</span></code><span data-lake-id="u56e88a1c" id="u56e88a1c" style="color: rgb(31, 35, 40)"> 包，将所有和自定义协议有关的代码都放到该包下。</span></p><h4 data-lake-id="j9s0L" id="j9s0L"><span data-lake-id="uff3e0ec7" id="uff3e0ec7" style="color: rgb(31, 35, 40)">1）新建协议消息类 </span><code data-lake-id="u306d4988" id="u306d4988"><span data-lake-id="ue9794602" id="ue9794602" style="color: rgb(31, 35, 40)">ProtocolMessage</span></code><span data-lake-id="uf92631ad" id="uf92631ad" style="color: rgb(31, 35, 40)">。</span></h4><p data-lake-id="u1bbbc576" id="u1bbbc576"><span data-lake-id="u670fb0ae" id="u670fb0ae" style="color: rgb(31, 35, 40)">将消息头单独封装为一个内部类，消息体可以使用泛型类型，完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20lombok.AllArgsConstructor%3B%5Cnimport%20lombok.Data%3B%5Cnimport%20lombok.NoArgsConstructor%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%BB%93%E6%9E%84%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cn%40Data%5Cn%40AllArgsConstructor%5Cn%40NoArgsConstructor%5Cnpublic%20class%20ProtocolMessage%3CT%3E%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B6%88%E6%81%AF%E5%A4%B4%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Header%20header%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%AF%B7%E6%B1%82%E4%BD%93%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20T%20body%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E5%A4%B4%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Data%5Cn%20%20%20%20public%20static%20class%20Header%20%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%AD%94%E6%95%B0%EF%BC%8C%E7%94%A8%E6%9D%A5%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E6%80%A7%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20byte%20magic%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20byte%20version%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20byte%20serializer%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%EF%BC%88%E8%AF%B7%E6%B1%82%2F%E5%93%8D%E5%BA%94%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20byte%20type%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20byte%20status%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%AF%B7%E6%B1%82id%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20long%20requestId%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E6%B6%88%E6%81%AF%E4%BD%93%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20private%20int%20bodyLength%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wvTZp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="pEkG8" id="pEkG8"><span data-lake-id="u7b045bed" id="u7b045bed" style="color: rgb(31, 35, 40)">2）新建协议常量类 </span><code data-lake-id="u2c2ebfa6" id="u2c2ebfa6"><span data-lake-id="u25429ad0" id="u25429ad0" style="color: rgb(31, 35, 40)">ProtocolConstant</span></code><span data-lake-id="uaf136618" id="uaf136618" style="color: rgb(31, 35, 40)">。</span></h4><p data-lake-id="u1ac6ff99" id="u1ac6ff99"><span data-lake-id="ua8a18597" id="ua8a18597" style="color: rgb(31, 35, 40)">记录了和自定义协议有关的关键信息，比如消息头长度、魔数、版本号。</span></p><p data-lake-id="u11499caf" id="u11499caf"><span data-lake-id="u866b4581" id="u866b4581" style="color: rgb(31, 35, 40)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cn%2F**%5Cn%20*%20%E4%B8%8E%E5%8D%8F%E8%AE%AE%E6%9C%89%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cnpublic%20interface%20ProtocolConstant%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%B6%88%E6%81%AF%E5%A4%B4%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20int%20MESSAGE_HEADER_LENGTH%20%3D%2017%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8D%8F%E8%AE%AE%E9%AD%94%E6%95%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20byte%20PROTOCOL_MAGIC%20%3D%200x1%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20byte%20PROTOCOL_VERSION%20%3D%200x1%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dMggJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="vJjeh" id="vJjeh"><span data-lake-id="u9acde15a" id="u9acde15a" style="color: rgb(31, 35, 40)">3）新建枚举类</span></h4><p data-lake-id="ub2ac3bc2" id="ub2ac3bc2"><span data-lake-id="u63115764" id="u63115764" style="color: rgb(31, 35, 40)">比如：</span></p><h5 data-lake-id="EHfTJ" id="EHfTJ"><span data-lake-id="uadde6917" id="uadde6917" style="color: rgb(31, 35, 40)">协议状态枚举</span></h5><p data-lake-id="u05d9959c" id="u05d9959c"><span data-lake-id="ubb43056d" id="ubb43056d" style="color: rgb(31, 35, 40)">暂时只定义成功、请求失败、响应失败三种枚举值：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageStatusEnum%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20lombok.Getter%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81%E6%9E%9A%E4%B8%BE%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cn%40Getter%5Cnpublic%20enum%20ProtocolMessageStatusEnum%20%7B%5Cn%5Cn%20%20%20%20OK(%5C%22ok%5C%22%2C%2020)%2C%20%2F%2F%20%E6%88%90%E5%8A%9F%5Cn%20%20%20%20BAD_REQUEST(%5C%22badRequest%5C%22%2C%2040)%2C%20%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B1%E8%B4%A5%5Cn%20%20%20%20BAD_RESPONSE(%5C%22badResponse%5C%22%2C%2050)%3B%20%2F%2F%20%E5%93%8D%E5%BA%94%E5%A4%B1%E8%B4%A5%5Cn%5Cn%20%20%20%20private%20final%20String%20text%3B%5Cn%5Cn%20%20%20%20private%20final%20int%20value%3B%5Cn%5Cn%20%20%20%20ProtocolMessageStatusEnum(String%20text%2C%20int%20value)%20%7B%5Cn%20%20%20%20%20%20%20%20this.text%20%3D%20text%3B%5Cn%20%20%20%20%20%20%20%20this.value%20%3D%20value%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AEvalue%E8%8E%B7%E5%8F%96%E6%9E%9A%E4%B8%BE%E5%80%BC%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20value%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.protocol.ProtocolMessageStatusEnum%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F5%2022%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ProtocolMessageStatusEnum%20getEnumByValue(int%20value)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(ProtocolMessageStatusEnum%20anEnum%20%3A%20ProtocolMessageStatusEnum.values())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(anEnum.value%20%3D%3D%20value)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20anEnum%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageStatusEnum%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22n0NHh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h5 data-lake-id="mt0lO" id="mt0lO"><span data-lake-id="ucf3c74e6" id="ucf3c74e6" style="color: rgb(31, 35, 40)">协议消息类型枚举</span></h5><p data-lake-id="u99dc0f89" id="u99dc0f89"><span data-lake-id="u00c1ec79" id="u00c1ec79" style="color: rgb(31, 35, 40)">包括请求、响应、心跳、其他。代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageTypeEnum%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20lombok.Getter%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9E%9A%E4%B8%BE%5Cn%20*%20%E5%8C%85%E6%8B%AC%E8%AF%B7%E6%B1%82%E3%80%81%E5%93%8D%E5%BA%94%E3%80%81%E5%BF%83%E8%B7%B3%E3%80%81%E5%85%B6%E4%BB%96%E3%80%82%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cn%40Getter%5Cnpublic%20enum%20ProtocolMessageTypeEnum%20%7B%5Cn%5Cn%20%20%20%20REQUEST(0)%2C%5Cn%20%20%20%20RESPONSE(1)%2C%5Cn%20%20%20%20HEART_BEAT(2)%2C%5Cn%20%20%20%20OTHERS(3)%3B%5Cn%5Cn%5Cn%20%20%20%20private%20final%20int%20key%3B%5Cn%5Cn%20%20%20%20ProtocolMessageTypeEnum(int%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20this.key%20%3D%20key%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AEvalue%E8%8E%B7%E5%8F%96%E6%9E%9A%E4%B8%BE%E5%80%BC%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.protocol.ProtocolMessageTypeEnum%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F5%2022%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ProtocolMessageTypeEnum%20getEnumByKey(int%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(ProtocolMessageTypeEnum%20anEnum%20%3A%20ProtocolMessageTypeEnum.values())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(anEnum.key%20%3D%3D%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20anEnum%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageTypeEnum%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kAgqT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h5 data-lake-id="sCMcD" id="sCMcD"><span data-lake-id="u804634a3" id="u804634a3" style="color: rgb(31, 35, 40)">协议消息的序列化器枚举</span></h5><p data-lake-id="uef025bd5" id="uef025bd5"><span data-lake-id="ufc057519" id="ufc057519" style="color: rgb(31, 35, 40)">跟 RPC 框架已支持的序列化器对应。代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageSerializerEnum%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20lombok.Getter%3B%5Cn%5Cnimport%20java.util.Arrays%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.stream.Collectors%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E6%9E%9A%E4%B8%BE%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cn%40Getter%5Cnpublic%20enum%20ProtocolMessageSerializerEnum%20%7B%5Cn%5Cn%20%20%20%20JDK(0%2C%20%5C%22jdk%5C%22)%2C%5Cn%20%20%20%20JSON(1%2C%20%5C%22json%5C%22)%2C%5Cn%20%20%20%20KRYO(2%2C%20%5C%22kryo%5C%22)%2C%5Cn%20%20%20%20HESSIAN(3%2C%20%5C%22hessian%5C%22)%3B%5Cn%5Cn%20%20%20%20private%20final%20int%20key%3B%5Cn%5Cn%20%20%20%20private%20final%20String%20value%3B%5Cn%5Cn%20%20%20%20ProtocolMessageSerializerEnum(int%20key%2C%20String%20value)%20%7B%5Cn%20%20%20%20%20%20%20%20this.key%20%3D%20key%3B%5Cn%20%20%20%20%20%20%20%20this.value%20%3D%20value%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%BB%8EEnum%E8%87%AA%E5%B8%A6%E7%9A%84values%EF%BC%88%EF%BC%89%E6%96%B9%E6%B3%95%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%88%E8%BF%99%E9%87%8C%E6%98%AF%E8%A6%81%E8%8E%B7%E5%8F%96%E5%88%B0value%EF%BC%89%5Cn%20%20%20%20%20*%20%E5%9B%A0%E4%B8%BAEnum%E8%87%AA%E5%B8%A6%E7%9A%84values%EF%BC%88%EF%BC%89%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AA%E8%83%BD%E8%8E%B7%E5%8F%96%E5%88%B0enum%E6%95%B0%E7%BB%84%EF%BC%8C%E8%8E%B7%E5%8F%96%E9%87%8C%E9%9D%A2%E7%9A%84%E5%85%83%E7%B4%A0%E5%B9%B6%E4%B8%8D%E6%96%B9%E4%BE%BF%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20java.util.List%3Cjava.lang.String%3E%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F5%2022%3A59%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20List%3CString%3E%20getValues()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20Arrays.stream(values()).map(item%20-%3E%20item.value).collect(Collectors.toList())%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AEkey%E8%8E%B7%E5%8F%96%E6%9E%9A%E4%B8%BE%E5%80%BC%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.protocol.ProtocolMessageStatusEnum%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F5%2022%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ProtocolMessageSerializerEnum%20getEnumByKey(int%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(ProtocolMessageSerializerEnum%20anEnum%20%3A%20ProtocolMessageSerializerEnum.values())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(anEnum.key%20%3D%3D%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20anEnum%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A0%B9%E6%8D%AEvalue%E8%8E%B7%E5%8F%96%E6%9E%9A%E4%B8%BE%E5%80%BC%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20value%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.protocol.ProtocolMessageStatusEnum%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F5%2022%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ProtocolMessageSerializerEnum%20getEnumByValue(String%20value)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(ProtocolMessageSerializerEnum%20anEnum%20%3A%20ProtocolMessageSerializerEnum.values())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(anEnum.value.equals(value))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20anEnum%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageSerializerEnum%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LuFNK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="LHa4i" id="LHa4i"><span data-lake-id="u46fd51d1" id="u46fd51d1" style="color: rgba(0, 0, 0, 0.85)">2、网络传输</span></h3><p data-lake-id="u0cbb644f" id="u0cbb644f"><span data-lake-id="ua15ff628" id="ua15ff628" style="color: rgb(31, 35, 40)">我们的 RPC 框架使用了高性能的 Vert.x 作为网络传输服务器，之前用的是 HttpServer。同样，Vert.x 也支持 TCP 服务器，相比于 Netty 或者自己写 Socket 代码，更加简单易用。</span></p><p data-lake-id="u92255c39" id="u92255c39"><span data-lake-id="uc6f252eb" id="uc6f252eb" style="color: rgb(31, 35, 40)">首先新建 </span><code data-lake-id="ua4ec9592" id="ua4ec9592"><strong><span data-lake-id="u6c2443c1" id="u6c2443c1" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">server.tcp</span></strong></code><span data-lake-id="udc418449" id="udc418449" style="color: rgb(31, 35, 40)"> 包，将所有 TCP 服务相关的代码放到该包中。</span></p><h4 data-lake-id="WYNdS" id="WYNdS"><span data-lake-id="u6aa5592d" id="u6aa5592d" style="color: rgb(31, 35, 40)">1）TCP 服务器实现</span></h4><p data-lake-id="ud9fd7807" id="ud9fd7807"><span data-lake-id="ua745f7b4" id="ua745f7b4" style="color: rgb(31, 35, 40)">新建 </span><code data-lake-id="ufa494870" id="ufa494870"><span data-lake-id="u5fda63b5" id="u5fda63b5" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxTcpServer</span><span data-lake-id="ue2c057bc" id="ue2c057bc" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="u4a1c59c5" id="u4a1c59c5" style="color: rgb(31, 35, 40)">类，跟之前写的 </span><code data-lake-id="u5aad3a08" id="u5aad3a08"><span data-lake-id="u870a11e6" id="u870a11e6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxHttpServer</span><span data-lake-id="u639ae7b2" id="u639ae7b2" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="u405ff887" id="u405ff887" style="color: rgb(31, 35, 40)">类似，先创建 Vert.x 的服务器实例，然后定义处理请求的方法，比如回复 “Hello, client!”，最后启动服务器。</span></p><p data-lake-id="u7fcdae54" id="u7fcdae54"><span data-lake-id="ucc5281a1" id="ucc5281a1" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yupi.yurpc.server.tcp%3B%5Cn%5Cnimport%20com.yupi.yurpc.server.HttpServer%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetServer%3B%5Cn%5Cnpublic%20class%20VertxTcpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20private%20byte%5B%5D%20handleRequest(byte%5B%5D%20requestData)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%9C%A8%E8%BF%99%E9%87%8C%E7%BC%96%E5%86%99%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%8C%E6%A0%B9%E6%8D%AE%20requestData%20%E6%9E%84%E9%80%A0%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%BF%94%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A4%BA%E4%BE%8B%EF%BC%8C%E5%AE%9E%E9%99%85%E9%80%BB%E8%BE%91%E9%9C%80%E8%A6%81%E6%A0%B9%E6%8D%AE%E5%85%B7%E4%BD%93%E7%9A%84%E4%B8%9A%E5%8A%A1%E9%9C%80%E6%B1%82%E6%9D%A5%E5%AE%9E%E7%8E%B0%5Cn%20%20%20%20%20%20%20%20return%20%5C%22Hello%2C%20client!%5C%22.getBytes()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20Vert.x%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20NetServer%20server%20%3D%20vertx.createNetServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20server.connectHandler(socket%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20requestData%20%3D%20buffer.getBytes()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%9C%A8%E8%BF%99%E9%87%8C%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%8C%E6%AF%94%E5%A6%82%E8%A7%A3%E6%9E%90%E8%AF%B7%E6%B1%82%E3%80%81%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%93%8D%E5%BA%94%E7%AD%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20byte%5B%5D%20responseData%20%3D%20handleRequest(requestData)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(Buffer.buffer(responseData))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22TCP%20server%20started%20on%20port%20%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.err.println(%5C%22Failed%20to%20start%20TCP%20server%3A%20%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpServer().doStart(8888)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UHDae%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6a5605f5" id="u6a5605f5"><strong><span data-lake-id="uc9c90465" id="uc9c90465" style="color: rgb(31, 35, 40)">上述代码中的 </span></strong><code data-lake-id="u0f79567c" id="u0f79567c"><strong><span data-lake-id="u70573b9c" id="u70573b9c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">socket.write</span></strong></code><strong><span data-lake-id="uabf911dd" id="uabf911dd" style="color: rgb(31, 35, 40)"> 方法，就是在向连接到服务器的客户端发送数据。注意发送的数据格式为 Buffer，这是 Vert.x 为我们提供的字节数组缓冲区实现。</span></strong></p><h4 data-lake-id="S9sO3" id="S9sO3"><span data-lake-id="u28c542ba" id="u28c542ba" style="color: rgb(31, 35, 40)">2）TCP 客户端实现</span></h4><p data-lake-id="ufd35a6bc" id="ufd35a6bc"><span data-lake-id="u2c0046e0" id="u2c0046e0" style="color: rgb(31, 35, 40)">新建</span><span data-lake-id="u631793ad" id="u631793ad" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="ua89fc643" id="ua89fc643" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxTcpClient</span><span data-lake-id="u3825ba4e" id="u3825ba4e" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u504feb73" id="u504feb73" style="color: rgb(31, 35, 40)">类，先创建 Vert.x 的客户端实例，然后定义处理请求的方法，比如回复 “Hello, server!”，并建立连接。</span></p><p data-lake-id="u40e93ea3" id="u40e93ea3"><span data-lake-id="u8285cff7" id="u8285cff7" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yupi.yurpc.server.tcp%3B%5Cn%5Cnimport%20io.vertx.core.Vertx%3B%5Cn%5Cnpublic%20class%20VertxTcpClient%20%7B%5Cn%5Cn%20%20%20%20public%20void%20start()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20Vert.x%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20vertx.createNetClient().connect(8888%2C%20%5C%22localhost%5C%22%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Connected%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20io.vertx.core.net.NetSocket%20socket%20%3D%20result.result()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(%5C%22Hello%2C%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8E%A5%E6%94%B6%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Received%20response%20from%20server%3A%20%5C%22%20%2B%20buffer.toString())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.err.println(%5C%22Failed%20to%20connect%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpClient().start()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22rYUWm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="FR1fo" id="FR1fo"><span data-lake-id="uace54b01" id="uace54b01" style="color: rgb(31, 35, 40)">3）测试</span></h4><p data-lake-id="u7cd843b1" id="u7cd843b1"><span data-lake-id="u9e6351c9" id="u9e6351c9" style="color: rgb(31, 35, 40)">可以先进行简单的测试，先启动服务器，再启动客户端，能够在控制台看到它们互相打招呼的输出。</span></p><h3 data-lake-id="NfeFo" id="NfeFo"><span data-lake-id="u8775aa25" id="u8775aa25" style="color: rgba(0, 0, 0, 0.85)">3、编码 / 解码器</span></h3><p data-lake-id="ue5187b95" id="ue5187b95"><span data-lake-id="u3518adea" id="u3518adea" style="color: rgb(31, 35, 40)">在上一步中，我们也注意到了，Vert.x 的 TCP 服务器收发的消息是 </span><strong><span data-lake-id="uf431b28f" id="uf431b28f" style="color: rgb(31, 35, 40)">Buffer 类型</span></strong><span data-lake-id="ud17e5065" id="ud17e5065" style="color: rgb(31, 35, 40)">，不能直接写入一个对象。因此，我们需要编码器和解码器，</span><span data-lake-id="uf3e28b41" id="uf3e28b41" style="color: rgb(42, 188, 191),rgb(56, 54, 221)">将 Java 的消息对象和 Buffer 进行相互转换。</span></p><p data-lake-id="u21ea44b6" id="u21ea44b6"><span data-lake-id="ub6b9df57" id="ub6b9df57" style="color: rgb(31, 35, 40)">用一张图，通过演示整个请求和响应的过程，使大家了解编码器和解码器的作用。</span></p><p data-lake-id="ue0905afa" id="ue0905afa"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1712585903979-811f3827-5e0e-4fe7-a0b4-8d0ced89eea6.jpeg%22%2C%22taskId%22%3A%22u4271a698-8fd5-44ee-8f8d-e1b49d082a1%22%2C%22clientId%22%3A%22u756478e2-d7a2-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709784922948-675319cd-a603-4777-b33c-ebcd918dd79b.jpg%22%2C%22size%22%3A81161%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1949%2C%22originHeight%22%3A971%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%221%2C%E8%AF%B7%E6%B1%82%202%2C%E8%AF%B7%E6%B1%82%20PROTOCOLMESSAGE%3CRPCREQUEST%3E%20BUFFER%20%E7%BC%96%E7%A0%81%E5%99%A8%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%20%E5%AE%A2%E6%88%B7%E7%AB%AF%205%2C%E5%93%8D%E5%BA%94%204%2C%E5%93%8D%E5%BA%94%20BUFFER%20PROTOCOLMESSAGE%3CRPCRESPONSE%3E%20%E7%BC%96%E7%A0%81%E5%99%A8%20%E8%A7%A3%E7%A0%81%E5%99%A8%20%E8%A7%A3%E7%A0%81%E5%99%A8%206%2C%E8%A7%A3%E7%A0%81PROTOCOLMESSAGE%3CRPCRESPONSE%3E%205%2C%E8%A7%A3%E7%A0%81%20PROTOCOLMESSAGE%3CRPCREQUEST%3E%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%20%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86%E5%99%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A619%2C%22y%22%3A13%2C%22width%22%3A108%2C%22height%22%3A32%2C%22text%22%3A%221%2C%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A1222%2C%22y%22%3A14%2C%22width%22%3A112%2C%22height%22%3A34%2C%22text%22%3A%222%2C%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A66%2C%22width%22%3A453%2C%22height%22%3A33%2C%22text%22%3A%22PROTOCOLMESSAGE%3CRPCREQUEST%3E%22%7D%2C%7B%22x%22%3A1233%2C%22y%22%3A68%2C%22width%22%3A90%2C%22height%22%3A27%2C%22text%22%3A%22BUFFER%22%7D%2C%7B%22x%22%3A930%2C%22y%22%3A105%2C%22width%22%3A94%2C%22height%22%3A32%2C%22text%22%3A%22%E7%BC%96%E7%A0%81%E5%99%A8%22%7D%2C%7B%22x%22%3A1594%2C%22y%22%3A248%2C%22width%22%3A96%2C%22height%22%3A33%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%22%7D%2C%7B%22x%22%3A260%2C%22y%22%3A248%2C%22width%22%3A93%2C%22height%22%3A32%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%22%7D%2C%7B%22x%22%3A612%2C%22y%22%3A277%2C%22width%22%3A115%2C%22height%22%3A33%2C%22text%22%3A%225%2C%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A1244%2C%22y%22%3A278%2C%22width%22%3A114%2C%22height%22%3A35%2C%22text%22%3A%224%2C%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A623%2C%22y%22%3A333%2C%22width%22%3A91%2C%22height%22%3A29%2C%22text%22%3A%22BUFFER%22%7D%2C%7B%22x%22%3A1062%2C%22y%22%3A334%2C%22width%22%3A482%2C%22height%22%3A33%2C%22text%22%3A%22PROTOCOLMESSAGE%3CRPCRESPONSE%3E%22%7D%2C%7B%22x%22%3A930%2C%22y%22%3A370%2C%22width%22%3A96%2C%22height%22%3A33%2C%22text%22%3A%22%E7%BC%96%E7%A0%81%E5%99%A8%22%7D%2C%7B%22x%22%3A1594%2C%22y%22%3A637%2C%22width%22%3A95%2C%22height%22%3A33%2C%22text%22%3A%22%E8%A7%A3%E7%A0%81%E5%99%A8%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A638%2C%22width%22%3A94%2C%22height%22%3A32%2C%22text%22%3A%22%E8%A7%A3%E7%A0%81%E5%99%A8%22%7D%2C%7B%22x%22%3A12%2C%22y%22%3A750%2C%22width%22%3A600%2C%22height%22%3A38%2C%22text%22%3A%226%2C%E8%A7%A3%E7%A0%81PROTOCOLMESSAGE%3CRPCRESPONSE%3E%22%7D%2C%7B%22x%22%3A1376%2C%22y%22%3A757%2C%22width%22%3A542%2C%22height%22%3A31%2C%22text%22%3A%225%2C%E8%A7%A3%E7%A0%81%20PROTOCOLMESSAGE%3CRPCREQUEST%3E%22%7D%2C%7B%22x%22%3A1564%2C%22y%22%3A888%2C%22width%22%3A156%2C%22height%22%3A32%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%22%7D%2C%7B%22x%22%3A229%2C%22y%22%3A888%2C%22width%22%3A154%2C%22height%22%3A33%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86%E5%99%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f8f8%22%2C%22id%22%3A%22u50be4ede%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u34a90934" id="u34a90934"><span data-lake-id="u7a39820e" id="u7a39820e" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u9566f29c" id="u9566f29c"><span data-lake-id="u57c2d100" id="u57c2d100" style="color: rgb(31, 35, 40)">之前 HTTP 请求和响应时，直接从请求 body 处理器中获取到 body 字节数组，再通过序列化（反序列化）得到 RpcRequest 或 RpcResponse 对象。使用 TCP 服务器后，只不过改为从 Buffer 中获取字节数组，然后编解码为 RpcRequest 或 RpcResponse 对象。其他的后续处理流程都是可复用的。</span></p><p data-lake-id="u185b8721" id="u185b8721"><span data-lake-id="u46a3214c" id="u46a3214c" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="YQ6tC" id="YQ6tC"><span data-lake-id="uad9de172" id="uad9de172" style="color: rgb(31, 35, 40)">1）实现消息编码器。</span></h4><p data-lake-id="u9fd1237b" id="u9fd1237b"><span data-lake-id="u2be1ce24" id="u2be1ce24" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="u98d404c2" id="u98d404c2"><span data-lake-id="u518af7ba" id="u518af7ba" style="color: rgb(31, 35, 40)">protocol</span></code><span data-lake-id="uff35938f" id="uff35938f" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="ud05fa8c4" id="ud05fa8c4"><span data-lake-id="u504f1645" id="u504f1645" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ProtocolMessageEncoder</span></code><span data-lake-id="u2a2c00b4" id="u2a2c00b4" style="color: rgb(31, 35, 40)">，核心流程是依次向 Buffer 缓冲区写入消息对象里的字段。</span></p><p data-lake-id="u794df750" id="u794df750"><span data-lake-id="u315f90ce" id="u315f90ce" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">消息编码器不仅实现了将消息类型</span><code data-lake-id="uf3e7a81e" id="uf3e7a81e"><span data-lake-id="u258b3d8d" id="u258b3d8d" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">ProtocolMessage</span></code><span data-lake-id="u5dbc8339" id="u5dbc8339" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">给编码为</span><code data-lake-id="uc17ceb05" id="uc17ceb05"><span data-lake-id="u222e0edd" id="u222e0edd" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">Buffer</span></code><span data-lake-id="u8b06f2f2" id="u8b06f2f2" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">类型的功能，并且还实现了将消息体中的内容给序列化，然后自动填充消息体长度的功能（因为消息体需要先序列化再将其装载进buffer，所以不能预先填写消息体长度）</span></p><p data-lake-id="u595664c9" id="u595664c9"><span data-lake-id="u3c0b0882" id="u3c0b0882" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageEncoder%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%B6%88%E6%81%AF%E7%BC%96%E7%A0%81%E5%99%A8%5Cn%20*%20%E7%94%A8%E4%BA%8E%E5%90%91Buffer%E7%BC%93%E5%86%B2%E5%8C%BA%E5%86%99%E4%BA%8E%E6%B6%88%E6%81%AF%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%97%E6%AE%B5%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F6%5Cn%20*%2F%5Cnpublic%20class%20ProtocolMessageEncoder%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%BC%96%E7%A0%81%5Cn%20%20%20%20%20*%20%E5%B0%86%E5%8F%91%E9%80%81%E7%9A%84Java%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A0%81%E4%B8%BABuffer%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F6%2011%3A48%5Cn%20%20%20%20%20*%20%40param%20protocolMessage%3A%5Cn%20%20%20%20%20*%20%40return%20io.vertx.core.buffer.Buffer%3A%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20Buffer%20encode(ProtocolMessage%3C%3F%3E%20protocolMessage)%20throws%20Exception%7B%5Cn%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22Encoding...%20message%20%3A%5C%22%20%2B%20protocolMessage)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%20%E6%B6%88%E6%81%AF%E6%9C%AC%E8%BA%AB%20%E6%88%96%E8%80%85%20%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E6%81%AF%E5%A4%B4%20%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20%20%20%20%20if(protocolMessage%20%3D%3D%20null%20%7C%7C%20protocolMessage.getHeader()%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20protocolMessage.getHeader()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BE%9D%E6%AC%A1%E5%90%91Buffer%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%AD%E5%86%99%E5%85%A5%E5%AD%97%E8%8A%82%5Cn%20%20%20%20%20%20%20%20Buffer%20buffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendByte(header.getMagic())%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendByte(header.getVersion())%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendByte(header.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendByte(header.getType())%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendByte(header.getStatus())%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendLong(header.getRequestId())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%EF%BC%88%E8%BF%99%E9%87%8C%E6%98%AF%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%EF%BC%89%5Cn%20%20%20%20%20%20%20%20ProtocolMessageSerializerEnum%20serializerEnum%20%3D%20ProtocolMessageSerializerEnum.getEnumByKey(header.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20if(serializerEnum%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%8C%87%E5%AE%9A%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%81%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%B0%83%E7%94%A8%E5%B7%A5%E5%8E%82%E7%B1%BB%E5%88%9B%E5%BB%BA%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%AE%9E%E4%BE%8B%EF%BC%8C%E5%B9%B6%E5%BA%8F%E5%88%97%E5%8C%96%E5%AF%B9%E8%B1%A1%E4%B8%BA%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%5Cn%20%20%20%20%20%20%20%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(serializerEnum.getValue())%3B%5Cn%20%20%20%20%20%20%20%20byte%5B%5D%20bodyBytes%20%3D%20serializer.serializer(protocolMessage.getBody())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%99%E5%85%A5body%E9%95%BF%E5%BA%A6%E5%92%8C%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20buffer.appendInt(bodyBytes.length)%3B%5Cn%20%20%20%20%20%20%20%20buffer.appendBytes(bodyBytes)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20return%20buffer%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageEncoder%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ohXCp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6f6dc952" id="u6f6dc952"><br></p><h4 data-lake-id="EiwFv" id="EiwFv"><span data-lake-id="ua50dc60b" id="ua50dc60b" style="color: rgb(31, 35, 40)">2）实现消息解码器</span></h4><p data-lake-id="u8fec2af4" id="u8fec2af4"><span data-lake-id="u93db3303" id="u93db3303" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="u29daaaf9" id="u29daaaf9"><span data-lake-id="u07acc97a" id="u07acc97a" style="color: rgb(31, 35, 40)">protocol</span></code><span data-lake-id="u524ce436" id="u524ce436" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="u30baa575" id="u30baa575"><span data-lake-id="u40aa2e9d" id="u40aa2e9d" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ProtocolMessageDecoder</span></code><span data-lake-id="ue49d20f4" id="ue49d20f4" style="color: rgb(31, 35, 40)">，核心流程是依次从 Buffer 缓冲区的指定位置读取字段，构造出完整的消息对象。</span></p><p data-lake-id="u39104758" id="u39104758"><span data-lake-id="u1594e2ea" id="u1594e2ea" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">消息解码器不仅实现了从发送过来的buffer中按照约定的规格进行读取消息头，从而获取例如魔数、序列化器、消息类型等有关消息的具体信息，并且还按照消息的类型在将消息体反序列化之后直接进行相对应的下一步处理（注意，这里同时也对于粘包问题的进行了处理）。</span></p><p data-lake-id="u4435cd3b" id="u4435cd3b"><span data-lake-id="u23fc1f05" id="u23fc1f05" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageDecoder%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E8%A7%A3%E7%A0%81%E5%99%A8%5Cn%20*%20%E5%B0%86%E5%8F%91%E9%80%81%E6%9D%A5%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E7%BB%99%E8%A7%A3%E7%A0%81%E6%88%90%E5%AF%B9%E5%BA%94%E7%9A%84%E6%B6%88%E6%81%AF%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F6%5Cn%20*%2F%5Cnpublic%20class%20ProtocolMessageDecoder%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%A7%A3%E7%A0%81%EF%BC%8C%E5%B0%86%E6%A0%B9%E6%8D%AE%E5%8D%8F%E8%AE%AE%E5%8F%91%E9%80%81%E6%9D%A5%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%E7%BB%99%E8%A7%A3%E7%A0%81%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20buffer%3A%20%E5%8F%91%E9%80%81%E6%9D%A5%E7%9A%84%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B6%88%E6%81%AF%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.protocol.ProtocolMessage%3C%3F%3E%3A%20%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E5%8C%85%E8%A3%85%E7%B1%BB%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F6%2013%3A45%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20ProtocolMessage%3C%3F%3E%20decode(Buffer%20buffer)%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%86%E5%88%AB%E4%BB%8E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E8%AF%BB%E5%8F%96Buffer%5Cn%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20new%20ProtocolMessage.Header()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E9%AD%94%E6%95%B0%E6%9D%A5%E6%A0%A1%E9%AA%8C%E6%B6%88%E6%81%AF%E5%AE%8C%E6%95%B4%E6%80%A7%5Cn%20%20%20%20%20%20%20%20byte%20magic%20%3D%20buffer.getByte(0)%3B%5Cn%20%20%20%20%20%20%20%20if%20(magic%20!%3D%20ProtocolConstant.PROTOCOL_MAGIC)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%B6%88%E6%81%AFmagic%E9%9D%9E%E6%B3%95%EF%BC%81%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20header.setMagic(magic)%3B%5Cn%20%20%20%20%20%20%20%20header.setVersion(buffer.getByte(1))%3B%5Cn%20%20%20%20%20%20%20%20header.setSerializer(buffer.getByte(2))%3B%5Cn%20%20%20%20%20%20%20%20header.setType(buffer.getByte(3))%3B%5Cn%20%20%20%20%20%20%20%20header.setStatus(buffer.getByte(4))%3B%5Cn%20%20%20%20%20%20%20%20header.setRequestId(buffer.getLong(5))%3B%5Cn%20%20%20%20%20%20%20%20header.setBodyLength(buffer.getInt(13))%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%AA%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%2F%2F%2017%20%E6%8C%87%E7%9A%84%E6%98%AF%E6%B6%88%E6%81%AF%E5%A4%B4%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BA17%E4%B8%AA%E5%AD%97%E8%8A%82%5Cn%20%20%20%20%20%20%20%20byte%5B%5D%20bodyBytes%20%3D%20buffer.getBytes(17%2C%2017%20%2B%20header.getBodyLength())%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%5Cn%20%20%20%20%20%20%20%20ProtocolMessageSerializerEnum%20serializerEnum%20%3D%20ProtocolMessageSerializerEnum.getEnumByKey(header.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20if%20(serializerEnum%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%BA%8F%E5%88%97%E5%8C%96%E6%B6%88%E6%81%AF%E7%9A%84%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%81%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(serializerEnum.getValue())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20ProtocolMessageTypeEnum%20messageTypeEnum%20%3D%20ProtocolMessageTypeEnum.getEnumByKey(header.getType())%3B%5Cn%20%20%20%20%20%20%20%20if%20(messageTypeEnum%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%BA%8F%E5%88%97%E5%8C%96%E6%B6%88%E6%81%AF%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%81%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20switch%20(messageTypeEnum)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20REQUEST%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RpcRequest%20request%20%3D%20serializer.deserializer(bodyBytes%2C%20RpcRequest.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20ProtocolMessage%3C%3E(header%2C%20request)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20RESPONSE%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20response%20%3D%20serializer.deserializer(bodyBytes%2C%20RpcResponse.class)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20new%20ProtocolMessage%3C%3E(header%2C%20response)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20HEART_BEAT%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20OTHERS%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20default%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E4%B8%8D%E6%94%AF%E6%8C%81%E8%AF%A5%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%EF%BC%81%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageDecoder%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VTk1f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue7bbbf1f" id="ue7bbbf1f"><span data-lake-id="udc83ac15" id="udc83ac15" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="zCidi" id="zCidi"><span data-lake-id="ud9594ee1" id="ud9594ee1" style="color: rgb(31, 35, 40)">3）测试</span></h4><p data-lake-id="uef6912dd" id="uef6912dd"><span data-lake-id="u8e192971" id="u8e192971" style="color: rgb(31, 35, 40)">编写单元测试类，先编码再解码，以测试编码器和解码器的正确性。</span></p><p data-lake-id="u174b7a0b" id="u174b7a0b"><span data-lake-id="u55482935" id="u55482935" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProtocolMessageTest%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.protocol%3B%5Cn%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20org.junit.Assert%3B%5Cnimport%20org.junit.Test%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%B1%BB%EF%BC%8C%E6%B5%8B%E8%AF%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F6%5Cn%20*%2F%5Cnpublic%20class%20ProtocolMessageTest%20%7B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20testEncodeAndDecode()%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcRequest%3E%20protocolMessage%20%3D%20new%20ProtocolMessage%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20new%20ProtocolMessage.Header()%3B%5Cn%20%20%20%20%20%20%20%20header.setMagic(ProtocolConstant.PROTOCOL_MAGIC)%3B%5Cn%20%20%20%20%20%20%20%20header.setVersion(ProtocolConstant.PROTOCOL_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20header.setSerializer((byte)%20ProtocolMessageSerializerEnum.KRYO.getKey())%3B%5Cn%20%20%20%20%20%20%20%20header.setType((byte)%20ProtocolMessageTypeEnum.REQUEST.getKey())%3B%5Cn%20%20%20%20%20%20%20%20header.setStatus((byte)%20ProtocolMessageStatusEnum.OK.getValue())%3B%5Cn%20%20%20%20%20%20%20%20header.setRequestId(IdUtil.getSnowflakeNextId())%3B%5Cn%20%20%20%20%20%20%20%20header.setBodyLength(0)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B6%88%E6%81%AF%E4%BD%93%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20new%20RpcRequest()%3B%5Cn%20%20%20%20%20%20%20%20rpcRequest.setServiceName(%5C%22testService%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rpcRequest.setMethodName(%5C%22testMethod%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20rpcRequest.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20rpcRequest.setParameterTypes(new%20Class%5B%5D%7BString.class%7D)%3B%5Cn%20%20%20%20%20%20%20%20rpcRequest.setArgs(new%20Object%5B%5D%7B%5C%22aaa%5C%22%2C%20%5C%22bbb%5C%22%2C%20%5C%22ccc%5C%22%2C%20%5C%22zhc%5C%22%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20protocolMessage.setHeader(header)%3B%5Cn%20%20%20%20%20%20%20%20protocolMessage.setBody(rpcRequest)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20Buffer%20encodeBuffer%20%3D%20ProtocolMessageEncoder.encode(protocolMessage)%3B%5Cn%20%20%20%20%20%20%20%20ProtocolMessage%3C%3F%3E%20message%20%3D%20ProtocolMessageDecoder.decode(encodeBuffer)%3B%5Cn%20%20%20%20%20%20%20%20Assert.assertNotNull(message)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(message)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProtocolMessageTest%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GICEd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uabc98451" id="uabc98451"><span data-lake-id="ud4fbc0d2" id="ud4fbc0d2" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="Wktr9" id="Wktr9"><span data-lake-id="u4844a5b6" id="u4844a5b6" style="color: rgba(0, 0, 0, 0.85)">4、请求处理器（服务提供者）</span></h3><p data-lake-id="uc5286c7a" id="uc5286c7a"><br></p><p data-lake-id="u8d802be4" id="u8d802be4"><span data-lake-id="u7375c250" id="u7375c250" style="color: rgb(31, 35, 40)">可以使用 netty 的 pipeline 组合多个 handler（比如编码 =&gt; 解码 =&gt; 请求 / 响应处理）</span></p><p data-lake-id="u6172c306" id="u6172c306"><strong><span data-lake-id="ufd45cd49" id="ufd45cd49" style="color: rgb(31, 35, 40)">请求处理器的作用是接受请求，然后通过反射调用服务实现类。</span></strong></p><p data-lake-id="u7f7908fc" id="u7f7908fc"><span data-lake-id="ufb278524" id="ufb278524" style="color: rgb(31, 35, 40)">类似之前的 HttpServerHandler，我们需要开发一个 TcpServerHandler，用于处理请求。和 HttpServerHandler 的区别只是在获取请求、写入响应的方式上，需要调用上面开发好的编码器和解码器。</span></p><p data-lake-id="u947949b1" id="u947949b1"><strong><span data-lake-id="u555123bf" id="u555123bf" style="color: rgb(31, 35, 40)">通过实现 Vert.x 提供的 </span></strong><strong><span data-lake-id="u6bae0871" id="u6bae0871" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">Handler&lt;NetSocket&gt;</span></strong><strong><span data-lake-id="u56a43235" id="u56a43235" style="color: rgb(31, 35, 40)"> 接口，可以定义 TCP 请求处理器。</span></strong></p><p data-lake-id="uc177a326" id="uc177a326"><strong><span data-lake-id="ud97a584d" id="ud97a584d" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">这个请求处理器就相当于是当服务提供者接收到消费者（客户端）发送来的请求之后，将请求交给请求处理器进行处理，处理器处理完成之后，就会将结果再发送给消费者</span></strong></p><p data-lake-id="ue687dc51" id="ue687dc51"><span data-lake-id="u8b7c6866" id="u8b7c6866" style="color: rgb(31, 35, 40)">完整代码如下，大多数代码都是从之前写好的 HttpServerHandler 复制来的：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22TcpServerHandler%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.protocol.ProtocolMessage%3B%5Cnimport%20com.yybf.chenrpc.protocol.ProtocolMessageDecoder%3B%5Cnimport%20com.yybf.chenrpc.protocol.ProtocolMessageEncoder%3B%5Cnimport%20com.yybf.chenrpc.protocol.ProtocolMessageTypeEnum%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20io.vertx.core.Handler%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.lang.reflect.Method%3B%5Cn%5Cn%2F**%5Cn%20*%20TCP%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F12%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20TcpServerHandler%20implements%20Handler%3CNetSocket%3E%20%7B%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(NetSocket%20netSocket)%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22inter%20TcpServerHandler%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%20%EF%BC%88%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20netSocket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8E%A5%E5%8F%97%E8%AF%B7%E6%B1%82%E5%B9%B6%E8%A7%A3%E7%A0%81%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcRequest%3E%20protocolMessage%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20protocolMessage%20%3D%20(ProtocolMessage%3CRpcRequest%3E)%20ProtocolMessageDecoder.decode(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E8%A7%A3%E7%A0%81%E9%94%99%E8%AF%AF%EF%BC%81%20exception%EF%BC%9A%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20protocolMessage.getBody()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20new%20RpcResponse()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E9%9C%80%E8%A6%81%E8%B0%83%E7%94%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%B1%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%AD%A5%E9%AA%A4%EF%BC%9A%E5%85%88%E9%80%9A%E8%BF%87%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%90%8D%E6%9D%A5%E4%BB%8E%E6%9C%AC%E5%9C%B0%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BB%96%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%EF%BC%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%84%B6%E5%90%8E%E5%88%A9%E7%94%A8%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%90%8D%E5%92%8C%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E6%9D%A5%E6%89%BE%E5%88%B0%E9%9C%80%E8%A6%81%E5%85%B7%E4%BD%93%E6%89%A7%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%80%E5%90%8E%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E5%B0%86%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%92%8C%E5%85%B7%E4%BD%93%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5%E6%96%B9%E6%B3%95%E4%B8%AD%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Class%3C%3F%3E%20implClass%20%3D%20LocalRegistry.get(rpcRequest.getServiceName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Method%20method%20%3D%20implClass.getMethod(rpcRequest.getMethodName()%2C%20rpcRequest.getParameterTypes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Object%20result%20%3D%20method.invoke(implClass.newInstance()%2C%20rpcRequest.getArgs())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%81%E8%A3%85%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setData(result)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setDataType(method.getReturnType())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setMessage(%5C%22OK%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22TCPServerHandler%20--%3E%20rpcResponse%3A%5C%22%20%2B%20rpcResponse)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setMessage(e.getMessage())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse.setException(e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E5%93%8D%E5%BA%94%EF%BC%8C%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20protocolMessage.getHeader()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20header.setType((byte)%20ProtocolMessageTypeEnum.RESPONSE.getKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcResponse%3E%20rpcResponseProtocolMessage%20%3D%20new%20ProtocolMessage%3C%3E(header%2C%20rpcResponse)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20encode%20%3D%20ProtocolMessageEncoder.encode(rpcResponseProtocolMessage)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20netSocket.write(encode)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF%EF%BC%81%20exception%EF%BC%9A%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22TcpServerHandler%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sxmAS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u4654e1c5" id="u4654e1c5"><span data-lake-id="ub864c5f8" id="ub864c5f8" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="CUdZY" id="CUdZY"><span data-lake-id="u8fba2cc8" id="u8fba2cc8" style="color: rgba(0, 0, 0, 0.85)">5、请求发送（服务消费者）</span></h3><p data-lake-id="ue96f27af" id="ue96f27af"><span data-lake-id="u36cb41c5" id="u36cb41c5" style="color: rgb(31, 35, 40)">调整了服务消费者发送请求的代码，改 HTTP 请求为 TCP 请求。</span></p><p data-lake-id="uf98f4eef" id="uf98f4eef"><span data-lake-id="u70e2da91" id="u70e2da91" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpClient%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%20%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89tcp%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%9E%84%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%20%2B%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(rpcConfig.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ServiceProxy%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20serializer.toString())%3B%5Cn%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E6%9D%A5%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8EserviceMetaInfo%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8EEtcd%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E6%9A%82%E6%97%B6%E5%85%88%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AAmateInfo%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20serviceMetaInfoList.get(0)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81TCP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81Tcp%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20NetClient%20netClient%20%3D%20vertx.createNetClient()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E5%BC%82%E6%AD%A5%E5%BC%8F%E7%9A%84vertx%E9%80%9A%E8%BF%87%E9%98%BB%E5%A1%9E%E5%8F%98%E4%B8%BA%E5%90%8C%E6%AD%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20CompletableFuture%3CRpcResponse%3E%20responseFuture%20%3D%20new%20CompletableFuture%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20netClient.connect(selectServiceMetaInfo.getServicePort()%2C%20selectServiceMetaInfo.getServiceHost()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Connected%20to%20TCP%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20NetSocket%20socket%20%3D%20result.result()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CObject%3E%20protocolMessage%20%3D%20new%20ProtocolMessage%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20new%20ProtocolMessage.Header()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setMagic(ProtocolConstant.PROTOCOL_MAGIC)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setVersion(ProtocolConstant.PROTOCOL_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setSerializer((byte)%20ProtocolMessageSerializerEnum.getEnumByValue(rpcConfig.getSerializer()).getKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setType((byte)%20ProtocolMessageTypeEnum.REQUEST.getKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E5%85%A8%E5%B1%80%E8%AF%B7%E6%B1%82ID%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setRequestId(IdUtil.getSnowflakeNextId())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20protocolMessage.setHeader(header)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20protocolMessage.setBody(rpcRequest)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E7%A0%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20encode%20%3D%20ProtocolMessageEncoder.encode(protocolMessage)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(encode)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%BC%96%E7%A0%81%E5%A4%B1%E8%B4%A5%EF%BC%81%20exception%20%EF%BC%9A%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8E%A5%E6%94%B6%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcResponse%3E%20decode%20%3D%20(ProtocolMessage%3CRpcResponse%3E)%20ProtocolMessageDecoder.decode(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20responseFuture.complete(decode.getBody())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E8%A7%A3%E7%A0%81%E5%A4%B1%E8%B4%A5%EF%BC%81%20exception%20%EF%BC%9A%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Failed%20to%20connect%20to%20TCP%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20responseFuture.get()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B3%E9%97%AD%E9%93%BE%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20netClient.close()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hunLn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ud0922c45" id="ud0922c45"><span data-lake-id="u1e88bdae" id="u1e88bdae" style="color: rgb(31, 35, 40)">这里的代码可能看着比较复杂，但只需要关注上述代码中注释了 “发送 TCP 请求” 的部分即可。由于 Vert.x 提供的请求处理器是异步、反应式的，我们为了更方便地获取结果，可以使用 </span><code data-lake-id="u377db8b5" id="u377db8b5"><span data-lake-id="ucd0f18ff" id="ucd0f18ff" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">CompletableFuture</span><span data-lake-id="u7d685a1f" id="u7d685a1f" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="u47d7f6e3" id="u47d7f6e3" style="color: rgb(31, 35, 40)">转异步为同步，参考代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22CompletableFuture%3CRpcResponse%3E%20responseFuture%20%3D%20new%20CompletableFuture%3C%3E()%3B%5CnnetClient.connect(xxx%2C%5Cn%20%20%20%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%AE%8C%E6%88%90%E4%BA%86%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20responseFuture.complete(rpcResponseProtocolMessage.getBody())%3B%5Cn%20%20%20%20%7D)%3B%5Cn)%3B%5Cn%2F%2F%20%E9%98%BB%E5%A1%9E%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%93%8D%E5%BA%94%E5%AE%8C%E6%88%90%EF%BC%8C%E6%89%8D%E4%BC%9A%E7%BB%A7%E7%BB%AD%E5%90%91%E4%B8%8B%E6%89%A7%E8%A1%8C%5CnRpcResponse%20rpcResponse%20%3D%20responseFuture.get()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22JVp04%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u63140890" id="u63140890"><span data-lake-id="ub302ffd8" id="ub302ffd8" style="color: rgb(31, 35, 40)">下面还会对上面的代码进行优化</span></p><h2 data-lake-id="ka5gO" id="ka5gO"><span data-lake-id="uedd2dec0" id="uedd2dec0" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><p data-lake-id="u78e08440" id="u78e08440"><span data-lake-id="u565d94b8" id="u565d94b8" style="color: rgb(31, 35, 40)">编写好上述代码后，就可以先测试请求响应流程是否跑通了。</span></p><p data-lake-id="uf12f449e" id="uf12f449e"><span data-lake-id="u63476ea9" id="u63476ea9" style="color: rgb(31, 35, 40)">修改服务提供者 </span><code data-lake-id="u74794ffb" id="u74794ffb"><span data-lake-id="uafb58816" id="uafb58816" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ProviderExample</span><span data-lake-id="u87d33f4e" id="u87d33f4e" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="u850a4b47" id="u850a4b47" style="color: rgb(31, 35, 40)">代码，改为启动 TCP 服务器。完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ProviderExample%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.provider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.server.HttpServer%3B%5Cnimport%20com.yybf.chenrpc.server.VertxHttpServer%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpClient%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpServer%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cn%2F**%5Cn%20*%20%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%5Cn%20*%20%E7%AE%80%E6%98%93%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%A4%BA%E4%BE%8B%5Cn%20*%20%E6%B5%8B%E8%AF%95%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8A%A0%E8%BD%BD%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F7%5Cn%20*%2F%5Cnpublic%20class%20ProviderExample%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20RPC%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20%20%20%20RpcApplication.init()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20UserService.class.getName()%3B%5Cn%20%20%20%20%20%20%20%20LocalRegistry.register(serviceName%2CUserServiceImpl.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E5%88%B0%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(rpcConfig.getServerHost())%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(rpcConfig.getServerPort())%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20VertxTcpServer%20vertxTcpServer%20%3D%20new%20VertxTcpServer()%3B%5Cn%20%20%20%20%20%20%20%20vertxTcpServer.doStart(RpcApplication.getRpcConfig().getServerPort())%3B%5Cn%5Cn%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ProviderExample%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VAMGe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue3d52c77" id="ue3d52c77"><span data-lake-id="u908c093b" id="u908c093b" style="color: rgb(31, 35, 40)">然后启动消费者示例项目，应该能够正常完成调用。如果不能，那可能就是出现了接下来要解决的问题 —— 粘包半包问题。</span></p><h2 data-lake-id="Gtymr" id="Gtymr"><span data-lake-id="ud19564c7" id="ud19564c7" style="color: rgba(0, 0, 0, 0.85)">五、粘包半包问题解决</span></h2><h3 data-lake-id="UuGXO" id="UuGXO"><span data-lake-id="u43aa4fa2" id="u43aa4fa2" style="color: rgba(0, 0, 0, 0.85)">1、什么是粘包和半包？</span></h3><p data-lake-id="u87b2cbc6" id="u87b2cbc6"><span data-lake-id="ucaf2643a" id="ucaf2643a" style="color: rgb(31, 35, 40)">使用 TCP 协议网络通讯时，可能会出现半包和粘包问题。</span></p><p data-lake-id="ub902ce43" id="ub902ce43"><span data-lake-id="u07cc27bb" id="u07cc27bb" style="color: rgb(31, 35, 40)">举个例子就明白了。</span></p><p data-lake-id="u37182cd5" id="u37182cd5"><span data-lake-id="ucdbbcc70" id="ucdbbcc70" style="color: rgb(31, 35, 40)">理想情况下，假如客户端 </span><strong><span data-lake-id="ud357c8f5" id="ud357c8f5" style="color: rgb(31, 35, 40)">连续 2 次</span></strong><span data-lake-id="ub1c2810a" id="ub1c2810a" style="color: rgb(31, 35, 40)"> 要发送的消息是：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E7%AC%AC%E4%B8%80%E6%AC%A1%5CnHello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!%5Cn%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%5CnHello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tDTkF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ue4181892" id="ue4181892"><span data-lake-id="u75c00de5" id="u75c00de5" style="color: rgb(31, 35, 40)">但服务端收到的消息情况可能是：</span></p><h4 data-lake-id="JoDxS" id="JoDxS"><span data-lake-id="uca3ef175" id="uca3ef175" style="color: rgb(31, 35, 40)">1）半包</span></h4><p data-lake-id="uebde058a" id="uebde058a"><span data-lake-id="ude9b5c82" id="ude9b5c82" style="color: rgb(31, 35, 40)">每次收到的数据更少了，这种情况叫做 </span><span data-lake-id="u9088d43e" id="u9088d43e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">半包</span><span data-lake-id="u85052dec" id="u85052dec" style="color: rgb(31, 35, 40)">：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E7%AC%AC%E4%B8%80%E6%AC%A1%5CnHello%2C%20server!Hello%2C%20server!%5Cn%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%5CnHello%2C%20server!Hello%2C%20server!Hello%2C%20server!%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TydIA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="gRhtt" id="gRhtt"><span data-lake-id="ud9fa358e" id="ud9fa358e" style="color: rgb(31, 35, 40)">2）粘包</span></h4><p data-lake-id="ud1a85060" id="ud1a85060"><span data-lake-id="ud120c51a" id="ud120c51a" style="color: rgb(31, 35, 40)">每次收到的数据更多了，这种情况叫做 </span><span data-lake-id="ua43d8e87" id="ua43d8e87" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">粘包</span><span data-lake-id="u1de5e4ae" id="u1de5e4ae" style="color: rgb(31, 35, 40)">：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E7%AC%AC%E4%B8%89%E6%AC%A1%5CnHello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CJVWg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9f4b6831" id="u9f4b6831"><span data-lake-id="u8ec18f97" id="u8ec18f97" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u23db423a" id="u23db423a"><span data-lake-id="u8604d20d" id="u8604d20d" style="color: rgb(31, 35, 40)">粘包和半包都有可能出现，并且这个中情况出现并不是会同时出现的</span></p><h3 data-lake-id="UlzCa" id="UlzCa"><span data-lake-id="u94738887" id="u94738887" style="color: rgba(0, 0, 0, 0.85)">2、半包粘包问题演示</span></h3><p data-lake-id="u5f5d35d7" id="u5f5d35d7"><span data-lake-id="ubaca1729" id="ubaca1729" style="color: rgb(31, 35, 40)">为了更好地理解半包和粘包，我们可以编写代码来测试。</span></p><h4 data-lake-id="eAixS" id="eAixS"><span data-lake-id="u5d21ab3c" id="u5d21ab3c" style="color: rgb(31, 35, 40)">1）修改 TCP 客户端代码</span></h4><p data-lake-id="u22c8eba7" id="u22c8eba7"><span data-lake-id="u72d97ac0" id="u72d97ac0" style="color: rgb(31, 35, 40)">连续发送 1000 次消息：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxTcpClient%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cn%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20TCP%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cnpublic%20class%20VertxTcpClient%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%80%9A%E8%BF%87%E5%8F%91%E9%80%81%E5%A4%9A%E7%BB%84%E4%BF%A1%E6%81%AF%EF%BC%881000%E6%AC%A1%EF%BC%89%E6%9D%A5%E8%A7%A6%E5%8F%91%E7%B2%98%E5%8C%85%E5%92%8C%E5%8D%8A%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F7%2021%3A59%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20void%20testTCPClient()%20%7B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%20%20%20%20%20%20%20%20vertx.createNetClient().connect(8888%2C%20%5C%22localhost%5C%22%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Connect%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20NetSocket%20socket%20%3D%20result.result()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20buffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20testMessage%20%3D%20%5C%22This%20is%20%5C%22%20%2B%20(i%20%2B%201)%20%2B%20%5C%22%20times%3BHello%20server!Hello%20server!Hello%20server!%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendInt(0)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendInt(testMessage.length())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendBytes(testMessage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Received%20response%20from%20server%3A%20%5C%22%20%2B%20buffer.toString())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Failed%20to%20connect%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpClient().testTCPClient()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxTcpClient%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jmE0Y%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u822e3745" id="u822e3745"><span data-lake-id="u993ae3e2" id="u993ae3e2" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="Fq95f" id="Fq95f"><span data-lake-id="u5c562f2f" id="u5c562f2f" style="color: rgb(31, 35, 40)">2）修改 TCP 服务端代码</span></h4><p data-lake-id="u7570325f" id="u7570325f"><span data-lake-id="ud5bb54dd" id="ud5bb54dd" style="color: rgb(31, 35, 40)">打印出每次收到的消息：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxTcpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20com.yybf.chenrpc.server.HttpServer%3B%5Cnimport%20io.vertx.core.Handler%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetServer%3B%5Cnimport%20io.vertx.core.parsetools.RecordParser%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cnpublic%20class%20VertxTcpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAVertx%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AATCP%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20NetServer%20server%20%3D%20vertx.createNetServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20server.connectHandler(socket%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20testMessage%20%3D%20%5C%22Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20messageLength%20%3D%20testMessage.getBytes().length%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(buffer.getBytes().length%20%3C%20messageLength)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E5%8D%8A%E5%8C%85%2C%20length%20%3D%20%5C%22%20%2B%20buffer.getBytes().length)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(buffer.getBytes().length%20%3E%20messageLength)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%B2%98%E5%8C%85%2C%20length%20%3D%20%5C%22%20%2B%20buffer.getBytes().length)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20str%20%3D%20new%20String(buffer.getBytes(0%2C%20messageLength))%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(str)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(testMessage.equals(str))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22good%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22TCP%20server%20started%20on%20port%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Failed%20to%20start%20TCP%20server%3A%20%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22TCP%20server%20started%20on%20port%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Failed%20to%20start%20TCP%20server%3A%20%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%2F%2F%20%20%20%20%20%20%20%20new%20VertxTcpServer().doStart(8888)%3B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpServer().testTCPServer(8888)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxTcpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lSkr2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u29c605f2" id="u29c605f2"><span data-lake-id="u018be995" id="u018be995" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="CrAc1" id="CrAc1"><span data-lake-id="uea4528f8" id="uea4528f8" style="color: rgb(31, 35, 40)">3）运行测试</span></h4><p data-lake-id="u4827ca21" id="u4827ca21"><span data-lake-id="uc8dce4d3" id="uc8dce4d3" style="color: rgb(31, 35, 40)">查看服务端控制台，发现服务端接受消息时，出现了半包和粘包：</span></p><p data-lake-id="u07fadd4e" id="u07fadd4e"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712500969550-6fa8d737-0334-4811-85ca-0cd98e70fc3c.png%22%2C%22taskId%22%3A%22u2fcd67e5-3b41-4556-a595-186e5155c2b%22%2C%22clientId%22%3A%22u55ab4ecd-acd1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1542%2C%22height%22%3A522%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A525790%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1542%2C%22originHeight%22%3A522%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22VERTCPSERVERVER%20%E8%BF%90%E8%A1%8C%3A%20VERTXTCPCLIENT%20CC%20W%20%E4%B8%AA%20RESULT%20170%2F835%20HELLO%20SERVERLHELLO%20S%20OSERVERHELLOSERVER%20HELLG%20SEPVER!HELLO%20SERVER!%20RESULT%20GOOD%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESULT%20GOOD%20RESULT%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESULT%20GOOD%20HELLO%20SERVERLHELLO%20SERVERLHELLO%20SERVER!%20RESUIT%20GOOD%20HELLO%20SER%20LO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER%20RESUIT%20%E7%B2%98%E5%8C%85%2CLENGTH-64%20RESULT%20IHELLO%20SERVER!%20RESULT%20%3A%20RESULT%20%3A%20%E5%8D%8A%E5%8C%85%2CLENGTH%20-%2014%20RESULT%20%3A%20HELLO%20SERVERIHELLO%20SERVERTHELLO%20SERVERIHELLO%20SERVERIHELLO%20SERVERIHELLO%20SERVERVERVER%20%E7%B2%98%E5%8C%85%2CLENGTH-78%20RESULT%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESULT%20GOOD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A53%2C%22y%22%3A2%2C%22width%22%3A104%2C%22height%22%3A14%2C%22text%22%3A%22VERTCPSERVERVER%22%7D%2C%7B%22x%22%3A-1%2C%22y%22%3A2%2C%22width%22%3A30%2C%22height%22%3A15%2C%22text%22%3A%22%E8%BF%90%E8%A1%8C%3A%22%7D%2C%7B%22x%22%3A212%2C%22y%22%3A3%2C%22width%22%3A88%2C%22height%22%3A14%2C%22text%22%3A%22VERTXTCPCLIENT%22%7D%2C%7B%22x%22%3A711%2C%22y%22%3A28%2C%22width%22%3A53%2C%22height%22%3A17%2C%22text%22%3A%22CC%20W%22%7D%2C%7B%22x%22%3A875%2C%22y%22%3A29%2C%22width%22%3A21%2C%22height%22%3A16%2C%22text%22%3A%22%E4%B8%AA%22%7D%2C%7B%22x%22%3A81%2C%22y%22%3A30%2C%22width%22%3A31%2C%22height%22%3A13%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A813%2C%22y%22%3A30%2C%22width%22%3A39%2C%22height%22%3A13%2C%22text%22%3A%22170%2F835%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A81%2C%22width%22%3A156%2C%22height%22%3A13%2C%22text%22%3A%22HELLO%20SERVERLHELLO%20S%22%7D%2C%7B%22x%22%3A283%2C%22y%22%3A82%2C%22width%22%3A173%2C%22height%22%3A14%2C%22text%22%3A%22OSERVERHELLOSERVER%22%7D%2C%7B%22x%22%3A144%2C%22y%22%3A125%2C%22width%22%3A35%2C%22height%22%3A12%2C%22text%22%3A%22HELLG%22%7D%2C%7B%22x%22%3A293%2C%22y%22%3A125%2C%22width%22%3A161%2C%22height%22%3A13%2C%22text%22%3A%22SEPVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A125%2C%22width%22%3A51%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A148%2C%22width%22%3A37%2C%22height%22%3A14%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A140%2C%22y%22%3A168%2C%22width%22%3A317%2C%22height%22%3A18%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A63%2C%22y%22%3A169%2C%22width%22%3A49%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A63%2C%22y%22%3A192%2C%22width%22%3A34%2C%22height%22%3A12%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A66%2C%22y%22%3A214%2C%22width%22%3A41%2C%22height%22%3A12%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A144%2C%22y%22%3A213%2C%22width%22%3A313%2C%22height%22%3A15%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A61%2C%22y%22%3A236%2C%22width%22%3A35%2C%22height%22%3A13%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A142%2C%22y%22%3A256%2C%22width%22%3A314%2C%22height%22%3A16%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A257%2C%22width%22%3A48%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A61%2C%22y%22%3A279%2C%22width%22%3A36%2C%22height%22%3A15%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A299%2C%22width%22%3A313%2C%22height%22%3A16%2C%22text%22%3A%22HELLO%20SERVERLHELLO%20SERVERLHELLO%20SERVER!%22%7D%2C%7B%22x%22%3A63%2C%22y%22%3A302%2C%22width%22%3A49%2C%22height%22%3A14%2C%22text%22%3A%22RESUIT%22%7D%2C%7B%22x%22%3A61%2C%22y%22%3A323%2C%22width%22%3A36%2C%22height%22%3A14%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A140%2C%22y%22%3A345%2C%22width%22%3A71%2C%22height%22%3A14%2C%22text%22%3A%22HELLO%20SER%22%7D%2C%7B%22x%22%3A170%2C%22y%22%3A344%2C%22width%22%3A487%2C%22height%22%3A15%2C%22text%22%3A%22LO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER%22%7D%2C%7B%22x%22%3A63%2C%22y%22%3A346%2C%22width%22%3A48%2C%22height%22%3A12%2C%22text%22%3A%22RESUIT%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A365%2C%22width%22%3A129%2C%22height%22%3A16%2C%22text%22%3A%22%E7%B2%98%E5%8C%85%2CLENGTH-64%22%7D%2C%7B%22x%22%3A64%2C%22y%22%3A369%2C%22width%22%3A54%2C%22height%22%3A11%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A388%2C%22width%22%3A115%2C%22height%22%3A14%2C%22text%22%3A%22IHELLO%20SERVER!%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A389%2C%22width%22%3A70%2C%22height%22%3A15%2C%22text%22%3A%22RESULT%20%3A%22%7D%2C%7B%22x%22%3A60%2C%22y%22%3A408%2C%22width%22%3A218%2C%22height%22%3A18%2C%22text%22%3A%22RESULT%20%3A%20%E5%8D%8A%E5%8C%85%2CLENGTH%20-%2014%22%7D%2C%7B%22x%22%3A67%2C%22y%22%3A432%2C%22width%22%3A698%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%20%3A%20HELLO%20SERVERIHELLO%20SERVERTHELLO%20SERVERIHELLO%20SERVERIHELLO%20SERVERIHELLO%20SERVERVERVER%22%7D%2C%7B%22x%22%3A137%2C%22y%22%3A452%2C%22width%22%3A140%2C%22height%22%3A16%2C%22text%22%3A%22%E7%B2%98%E5%8C%85%2CLENGTH-78%22%7D%2C%7B%22x%22%3A63%2C%22y%22%3A455%2C%22width%22%3A52%2C%22height%22%3A13%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A475%2C%22width%22%3A322%2C%22height%22%3A15%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A476%2C%22width%22%3A53%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A499%2C%22width%22%3A34%2C%22height%22%3A13%2C%22text%22%3A%22GOOD%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E6%8E%A5%E6%94%B6%E7%9A%84%E6%80%BB%E7%BB%93%E6%9E%9C%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233e4652%22%2C%22id%22%3A%22uec56b7d0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><span data-lake-id="ua89bff9e" id="ua89bff9e" style="color: rgb(31, 35, 40)">​</span></p><p data-lake-id="u49989cfd" id="u49989cfd"><strong><span data-lake-id="u7fddc194" id="u7fddc194" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">​</span></strong><br></p><p data-lake-id="u85752a72" id="u85752a72"><strong><span data-lake-id="u0d116104" id="u0d116104" class="lake-fontsize-12" style="color: rgb(255, 111, 4),rgb(243, 48, 171)">有关粘包半包，因为粘包的时候有可能一次性粘住两个以上的TCP消息，所以最后的统计结果数应该是小于等于发送数的</span></strong></p><p data-lake-id="uc7df5f72" id="uc7df5f72"><span data-lake-id="u795e13a6" id="u795e13a6" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u8a03e103" id="u8a03e103"><span data-lake-id="ub77b3835" id="ub77b3835" style="color: rgb(31, 35, 40)">下面分别解决半包和粘包问题。</span></p><blockquote data-lake-id="udc42461a" id="udc42461a" class="lake-alert lake-alert-color2"><p data-lake-id="u7e77ab06" id="u7e77ab06"><span data-lake-id="u8e5c977d" id="u8e5c977d" style="color: rgb(31, 35, 40)">关于粘包和半包的原因：</span><strong><span data-lake-id="ua9c01915" id="ua9c01915" class="lake-fontsize-11" style="color: rgb(68, 68, 68)">因为 TCP 是面向连接的传输协议，它是以“流”的形式传输数据的，而“流”数据是没有明确的开始和结尾边界的，所以就会出现粘包问题</span></strong><span data-lake-id="uf32fa272" id="uf32fa272" class="lake-fontsize-11" style="color: rgb(68, 68, 68)">。</span></p></blockquote><h3 data-lake-id="BFSRn" id="BFSRn"><span data-lake-id="u54eccdaf" id="u54eccdaf" style="color: rgba(0, 0, 0, 0.85)">如何解决半包问题？</span></h3><p data-lake-id="u9d5e8b6d" id="u9d5e8b6d"><span data-lake-id="ub62f53b7" id="ub62f53b7">首先，半包问题就是因为这次接收到的消息长度是小于发送时的长度的长度</span></p><p data-lake-id="ubc39639f" id="ubc39639f"><span data-lake-id="ucd14405b" id="ucd14405b" style="color: rgb(31, 35, 40)">解决半包的核心思路是：在消息头中设置请求体的长度，服务端接收时，判断每次消息的长度是否符合预期，不完整就不读，留到下一次接收到消息时再读取。</span></p><p data-lake-id="u1ed53d8f" id="u1ed53d8f"><span data-lake-id="ude70ca1e" id="ude70ca1e" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22if%20(buffer%20%3D%3D%20null%20%7C%7C%20buffer.length()%20%3D%3D%200)%20%7B%5Cn%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%B6%88%E6%81%AF%20buffer%20%E4%B8%BA%E7%A9%BA%5C%22)%3B%5Cn%7D%5Cnif%20(buffer.getBytes().length%20%3C%20ProtocolConstant.MESSAGE_HEADER_LENGTH)%20%7B%5Cn%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%87%BA%E7%8E%B0%E4%BA%86%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98%5C%22)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kZlq7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u3d81a11b" id="u3d81a11b"><br></p><h3 data-lake-id="ajO5o" id="ajO5o"><span data-lake-id="u4df50a3b" id="u4df50a3b" style="color: rgba(0, 0, 0, 0.85)">如何解决粘包？</span></h3><p data-lake-id="uef871896" id="uef871896"><span data-lake-id="u79994799" id="u79994799" style="color: rgb(31, 35, 40)">解决粘包的核心思路也是类似的：每次只读取指定长度的数据，超过长度的留着下一次接收到消息时再读取。</span></p><p data-lake-id="ud6fd82de" id="ud6fd82de"><span data-lake-id="ubbc90c70" id="ubbc90c70" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%AA%E8%AF%BB%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E7%9A%84%E6%95%B0%E6%8D%AE%5Cnbyte%5B%5D%20bodyBytes%20%3D%20buffer.getBytes(17%2C%2017%20%2B%20header.getBodyLength())%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GXiXR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1f47161d" id="u1f47161d"><span data-lake-id="ubdfa9753" id="ubdfa9753" style="color: rgb(31, 35, 40)">听上去简单，但自己实现起来还是比较麻烦的，要记录每次接收到的消息位置，维护字节数组缓存。有没有更简单的方式呢？</span></p><h3 data-lake-id="y0iV1" id="y0iV1"><span data-lake-id="u2dfc7641" id="u2dfc7641" style="color: rgba(0, 0, 0, 0.85)">Vert.x 解决半包和粘包</span></h3><p data-lake-id="ua9e85efa" id="ua9e85efa"><span data-lake-id="u21daa467" id="u21daa467" style="color: rgb(31, 35, 40)">在 Vert.x 框架中，可以使用内置的 </span><code data-lake-id="udfaffc04" id="udfaffc04"><strong><span data-lake-id="u8e70412b" id="u8e70412b" class="lake-fontsize-11" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">RecordParser </span></strong></code><span data-lake-id="u709d5486" id="u709d5486" style="color: rgb(31, 35, 40)">完美解决半包粘包，它的作用是：保证下次读取到 </span><strong><span data-lake-id="u18b3b553" id="u18b3b553" style="color: rgb(31, 35, 40)">特定长度</span></strong><span data-lake-id="u97051b45" id="u97051b45" style="color: rgb(31, 35, 40)"> 的字符。</span></p><p data-lake-id="ud822d8f4" id="ud822d8f4"><span data-lake-id="u457944c8" id="u457944c8" style="color: rgb(31, 35, 40)">先不要急着直接修改业务代码，而是先学会该类库的使用，跑通测试流程，再引入到自己的业务代码中。</span></p><h4 data-lake-id="PBrqC" id="PBrqC"><span data-lake-id="u06a2ed87" id="u06a2ed87" style="color: rgba(0, 0, 0, 0.85)">基础代码</span></h4><h5 data-lake-id="bKPn9" id="bKPn9"><span data-lake-id="ud296b0de" id="ud296b0de" style="color: rgb(31, 35, 40)">1）读取固定长度的消息</span></h5><p data-lake-id="u48e74fd5" id="u48e74fd5"><span data-lake-id="ueb235e2e" id="ueb235e2e" style="color: rgb(31, 35, 40)">先小试牛刀，使用 </span><span data-lake-id="u095c7975" id="u095c7975" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RecordParser</span><span data-lake-id="uad8c55fc" id="uad8c55fc" style="color: rgb(31, 35, 40)"> 来读取固定长度的消息，示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxTcpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cnpublic%20class%20VertxTcpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20Vert.x%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20NetServer%20server%20%3D%20vertx.createNetServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%5Cn%2F%2F%20%20%20%20%20%20%20%20server.connectHandler(new%20TcpServerHandler())%3B%5Cn%20%20%20%20%20%20%20%20server.connectHandler(socket%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20testMessage%20%3D%20%5C%22Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!Hello%2C%20server!%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20messageLength%20%3D%20testMessage.getBytes().length%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0parser%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RecordParser%20parser%20%3D%20RecordParser.newFixed(messageLength)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20parser.setOutput(new%20Handler%3CBuffer%3E()%20%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20void%20handle(Buffer%20buffer)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20str%20%3D%20new%20String(buffer.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(str)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(testMessage.equals(str))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22good%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(parser)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22TCP%20server%20started%20on%20port%20%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22Failed%20to%20start%20TCP%20server%3A%20%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpServer().doStart(8888)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxTcpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iCiYo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2acd8d9e" id="u2acd8d9e"><span data-lake-id="u6af6907f" id="u6af6907f" style="color: rgb(31, 35, 40)">上述代码的核心是 </span><code data-lake-id="u9a47215e" id="u9a47215e"><span data-lake-id="ue42fa87e" id="ue42fa87e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RecordParser.newFixed(messageLength)</span></code><span data-lake-id="u50c69395" id="u50c69395" style="color: rgb(31, 35, 40)">，为 Parser 指定每次读取固定值长度的内容。</span></p><p data-lake-id="u75970f08" id="u75970f08"><span data-lake-id="uef320cfb" id="uef320cfb" style="color: rgb(31, 35, 40)">测试发现，这次的输出结果非常整齐，解决了半包和粘包</span></p><p data-lake-id="ufae33f8c" id="ufae33f8c"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712501013519-74692451-0a1d-4687-b42c-88f5f1ad2c11.png%22%2C%22taskId%22%3A%22ubcb6c037-dd89-48d2-a9cc-f3491ffa06b%22%2C%22clientId%22%3A%22u55ab4ecd-acd1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1531%2C%22height%22%3A366%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A347946%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1531%2C%22originHeight%22%3A366%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22VERTXTCPSERVER%20VERTXTCOCLIENT%20%E4%B8%AA%20%E4%B8%AA%20CC%20W%20GOOD%20999%2F1%2C000%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20%20%20%20%20%20%20%20%20%20OOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20GOOD!%20HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20POOD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A38%2C%22y%22%3A4%2C%22width%22%3A104%2C%22height%22%3A14%2C%22text%22%3A%22VERTXTCPSERVER%22%7D%2C%7B%22x%22%3A196%2C%22y%22%3A5%2C%22width%22%3A89%2C%22height%22%3A13%2C%22text%22%3A%22VERTXTCOCLIENT%22%7D%2C%7B%22x%22%3A884%2C%22y%22%3A29%2C%22width%22%3A14%2C%22height%22%3A18%2C%22text%22%3A%22%E4%B8%AA%22%7D%2C%7B%22x%22%3A856%2C%22y%22%3A29%2C%22width%22%3A17%2C%22height%22%3A18%2C%22text%22%3A%22%E4%B8%AA%22%7D%2C%7B%22x%22%3A701%2C%22y%22%3A29%2C%22width%22%3A42%2C%22height%22%3A16%2C%22text%22%3A%22CC%20W%22%7D%2C%7B%22x%22%3A66%2C%22y%22%3A30%2C%22width%22%3A31%2C%22height%22%3A14%2C%22text%22%3A%22GOOD%22%7D%2C%7B%22x%22%3A792%2C%22y%22%3A31%2C%22width%22%3A52%2C%22height%22%3A13%2C%22text%22%3A%22999%2F1%2C000%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A61%2C%22width%22%3A307%2C%22height%22%3A13%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A82%2C%22width%22%3A47%2C%22height%22%3A15%2C%22text%22%3A%22GOOD!%22%7D%2C%7B%22x%22%3A44%2C%22y%22%3A104%2C%22width%22%3A316%2C%22height%22%3A15%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A126%2C%22width%22%3A60%2C%22height%22%3A17%2C%22text%22%3A%22GOOD!%22%7D%2C%7B%22x%22%3A45%2C%22y%22%3A148%2C%22width%22%3A317%2C%22height%22%3A16%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A168%2C%22width%22%3A104%2C%22height%22%3A18%2C%22text%22%3A%22GOOD!%20%20%20%20%20%20%20%20%20%20OOD!%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A191%2C%22width%22%3A315%2C%22height%22%3A17%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A47%2C%22y%22%3A215%2C%22width%22%3A47%2C%22height%22%3A15%2C%22text%22%3A%22GOOD!%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A236%2C%22width%22%3A316%2C%22height%22%3A15%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A47%2C%22y%22%3A258%2C%22width%22%3A43%2C%22height%22%3A15%2C%22text%22%3A%22GOOD!%22%7D%2C%7B%22x%22%3A46%2C%22y%22%3A279%2C%22width%22%3A315%2C%22height%22%3A15%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A47%2C%22y%22%3A302%2C%22width%22%3A52%2C%22height%22%3A15%2C%22text%22%3A%22GOOD!%22%7D%2C%7B%22x%22%3A48%2C%22y%22%3A323%2C%22width%22%3A313%2C%22height%22%3A16%2C%22text%22%3A%22HELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A49%2C%22y%22%3A347%2C%22width%22%3A36%2C%22height%22%3A14%2C%22text%22%3A%22POOD%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E5%85%A8%E9%83%A8%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233e4652%22%2C%22id%22%3A%22IwFjf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u4715f59a" id="u4715f59a"><br></p><h5 data-lake-id="RqhDW" id="RqhDW"><span data-lake-id="ued7fc547" id="ued7fc547" style="color: rgb(31, 35, 40)">2）读取可变长度的消息</span></h5><p data-lake-id="u7c23747f" id="u7c23747f"><span data-lake-id="uf48b4e5f" id="uf48b4e5f" style="color: rgb(31, 35, 40)">实际运用中，消息体的长度是不固定的，所以要通过调整 RecordParser 的固定长度（变长）来解决。</span></p><p data-lake-id="ubd2ab0a1" id="ubd2ab0a1"><span data-lake-id="ua07bf283" id="ua07bf283" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="uc216b400" id="uc216b400"><span data-lake-id="u03830b13" id="u03830b13" style="color: rgb(31, 35, 40)">那我们的思路可以是，将读取完整的消息拆分为 2 次：</span></p><ol list="u7dedf1ce"><li fid="uc30cd07b" data-lake-id="u7808e06c" id="u7808e06c"><span data-lake-id="u2072e60b" id="u2072e60b" style="color: rgb(31, 35, 40)">先完整读取请求头信息，由于请求头信息长度是固定的，可以使用</span><span data-lake-id="u1e6faefd" id="u1e6faefd" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u8dc760d1" id="u8dc760d1" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RecordParser</span><span data-lake-id="ub871806d" id="ub871806d" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="ud3da9931" id="ud3da9931" style="color: rgb(31, 35, 40)">保证每次都完整读取。</span></li><li fid="uc30cd07b" data-lake-id="u088e9028" id="u088e9028"><span data-lake-id="ubff04bba" id="ubff04bba" style="color: rgb(31, 35, 40)">再根据请求头长度信息更改</span><span data-lake-id="uc33f9b11" id="uc33f9b11" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="uf80955b6" id="uf80955b6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RecordParser</span><span data-lake-id="ua78e85a9" id="ua78e85a9" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u7f9d95c5" id="u7f9d95c5" style="color: rgb(31, 35, 40)">的固定长度，保证完整获取到请求体。</span></li></ol><p data-lake-id="u6688e0ef" id="u6688e0ef"><span data-lake-id="u249c477c" id="u249c477c" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ue67700a0" id="ue67700a0"><span data-lake-id="ua4d8cbbe" id="ua4d8cbbe" style="color: rgb(31, 35, 40)">todo： 这里面的buffer.getInt(num),里面的num具体指的是什么</span></p><p data-lake-id="u512e4963" id="u512e4963"><span data-lake-id="u9cc73e6c" id="u9cc73e6c" style="color: rgb(31, 35, 40)">修改测试 TCP Server 代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxTcpServer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Slf4j%5Cnpublic%20class%20VertxTcpServer%20implements%20HttpServer%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20doStart(int%20port)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20Vert.x%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20NetServer%20server%20%3D%20vertx.createNetServer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20server.connectHandler(socket%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%20parser%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RecordParser%20parser%20%3D%20RecordParser.newFixed(8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20parser.setOutput(new%20Handler%3CBuffer%3E()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20size%20%3D%20-1%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%BB%E5%8F%96%EF%BC%88%E5%A4%B4%20%2B%20%E4%BD%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20resultBuffer%20%3D%20Buffer.buffer()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20void%20handle(Buffer%20buffer)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(-1%20%3D%3D%20size)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E6%B6%88%E6%81%AF%E4%BD%93%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%20%3D%20buffer.getInt(4)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20parser.fixedSizeMode(size)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%99%E5%85%A5%E5%A4%B4%E4%BF%A1%E6%81%AF%E5%88%B0%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer.appendBuffer(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%99%E5%85%A5%E4%BD%93%E4%BF%A1%E6%81%AF%E5%88%B0%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer.appendBuffer(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(resultBuffer.toString())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%87%8D%E7%BD%AE%E4%B8%80%E8%BD%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20parser.fixedSizeMode(8)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%20%3D%20-1%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(parser)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E7%9B%91%E5%90%AC%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20server.listen(port%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22TCP%20server%20started%20on%20port%20%5C%22%20%2B%20port)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22Failed%20to%20start%20TCP%20server%3A%20%5C%22%20%2B%20result.cause())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpServer().doStart(8888)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxTcpServer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22INu7n%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u164b732b" id="u164b732b"><span data-lake-id="ucf3a69cc" id="ucf3a69cc" style="color: rgb(31, 35, 40)">修改测试 TCP client 代码如下，自己构造了一个变长、长度信息不在 Buffer 最开头（而是有一定偏移量）的消息：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22VertxTcpClient%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cn%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20TCP%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cnpublic%20class%20VertxTcpClient%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%80%9A%E8%BF%87%E5%8F%91%E9%80%81%E5%A4%9A%E7%BB%84%E4%BF%A1%E6%81%AF%EF%BC%881000%E6%AC%A1%EF%BC%89%E6%9D%A5%E8%A7%A6%E5%8F%91%E7%B2%98%E5%8C%85%E5%92%8C%E5%8D%8A%E5%8C%85%E7%9A%84%E9%97%AE%E9%A2%98%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F7%2021%3A59%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20void%20testTCPClient()%20%7B%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%20%20%20%20%20%20%20%20vertx.createNetClient().connect(8888%2C%20%5C%22localhost%5C%22%2C%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Connect%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20NetSocket%20socket%20%3D%20result.result()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%201000%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20buffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20String%20testMessage%20%3D%20%5C%22This%20is%20%5C%22%20%2B%20(i%20%2B%201)%20%2B%20%5C%22%20times%3BHello%20server!Hello%20server!Hello%20server!%5C%22%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendInt(0)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendInt(testMessage.length())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer.appendBytes(testMessage.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Received%20response%20from%20server%3A%20%5C%22%20%2B%20buffer.toString())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Failed%20to%20connect%20to%20TCP%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20new%20VertxTcpClient().testTCPClient()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22VertxTcpClient%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YlWys%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u2ced0af0" id="u2ced0af0"><span data-lake-id="u863ed225" id="u863ed225" style="color: rgb(31, 35, 40)">测试结果应该也是能够正常读取到消息的，不会出现半包和粘包。</span></p><p data-lake-id="ufbaa807f" id="ufbaa807f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712502498127-0f132cb6-b293-4c38-ac9e-9aa9ec256692.png%22%2C%22taskId%22%3A%22u09260c48-38c8-48db-922a-f93d54da507%22%2C%22clientId%22%3A%22u55ab4ecd-acd1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1511%2C%22height%22%3A346%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A353262%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1511%2C%22originHeight%22%3A346%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22VERTXTCPCLIENT%20VERTXTCPSERVER%20CCW%20Q-RESULT%201%2C000%2F1.000%20THIS%20IS%20989%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%209-11%20RESULT%3A%20SERVER!%209%20--%20THIS%20IS%20990%20TIMES%3BHELLO%20SERVER!HELLO%20S%20RESULT%3A%20SERVER!HELLO%20SERVER!%209%20--%20THIS%20IS%20991%20TIMES%3BHELLO%20SERVER!HELLO%20SERVERLHELLO%20RESULT%3A%20SERVER!%209%20--%20THIS%20IS%20992%20TIMES%3BHELLO%20SERVER!HELLO%20SER%20SERVER%20LHE%20LO%20RESUIT%3A%209%20--%20THIS%20IS%20993%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20S%20O%20SERVER!%20RESULT%3A%209%20--%20THIS%20IS%20994%20TINES%3AHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESU1T%3A%209%20--%20THIS%20IS%20995%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESULT%3A%209%20--%20THIS%20IS%20996%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20RESULT%3A%209%20--%20THIS%20IS%20997%20TIMES%3AHELLO%20SERVER!HELLO%20SERVERLHELLO%20SERVER!%209%20--%20THIS%20IS%20998%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20-%20THIS%20IS%20999%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%20THIS%20IS%201000%20TIMES%3AHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A183%2C%22y%22%3A15%2C%22width%22%3A89%2C%22height%22%3A13%2C%22text%22%3A%22VERTXTCPCLIENT%22%7D%2C%7B%22x%22%3A37%2C%22y%22%3A16%2C%22width%22%3A94%2C%22height%22%3A12%2C%22text%22%3A%22VERTXTCPSERVER%22%7D%2C%7B%22x%22%3A687%2C%22y%22%3A41%2C%22width%22%3A45%2C%22height%22%3A17%2C%22text%22%3A%22CCW%22%7D%2C%7B%22x%22%3A30%2C%22y%22%3A42%2C%22width%22%3A56%2C%22height%22%3A13%2C%22text%22%3A%22Q-RESULT%22%7D%2C%7B%22x%22%3A777%2C%22y%22%3A43%2C%22width%22%3A60%2C%22height%22%3A13%2C%22text%22%3A%221%2C000%2F1.000%22%7D%2C%7B%22x%22%3A193%2C%22y%22%3A67%2C%22width%22%3A393%2C%22height%22%3A15%2C%22text%22%3A%22THIS%20IS%20989%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%22%7D%2C%7B%22x%22%3A149%2C%22y%22%3A67%2C%22width%22%3A56%2C%22height%22%3A16%2C%22text%22%3A%229-11%22%7D%2C%7B%22x%22%3A35%2C%22y%22%3A68%2C%22width%22%3A57%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A595%2C%22y%22%3A69%2C%22width%22%3A55%2C%22height%22%3A11%2C%22text%22%3A%22SERVER!%22%7D%2C%7B%22x%22%3A149%2C%22y%22%3A88%2C%22width%22%3A342%2C%22height%22%3A19%2C%22text%22%3A%229%20--%20THIS%20IS%20990%20TIMES%3BHELLO%20SERVER!HELLO%20S%22%7D%2C%7B%22x%22%3A35%2C%22y%22%3A90%2C%22width%22%3A57%2C%22height%22%3A14%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A490%2C%22y%22%3A90%2C%22width%22%3A98%2C%22height%22%3A14%2C%22text%22%3A%22SERVER!HELLO%22%7D%2C%7B%22x%22%3A597%2C%22y%22%3A90%2C%22width%22%3A55%2C%22height%22%3A13%2C%22text%22%3A%22SERVER!%22%7D%2C%7B%22x%22%3A160%2C%22y%22%3A109%2C%22width%22%3A421%2C%22height%22%3A16%2C%22text%22%3A%229%20--%20THIS%20IS%20991%20TIMES%3BHELLO%20SERVER!HELLO%20SERVERLHELLO%22%7D%2C%7B%22x%22%3A36%2C%22y%22%3A111%2C%22width%22%3A56%2C%22height%22%3A13%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A598%2C%22y%22%3A112%2C%22width%22%3A53%2C%22height%22%3A12%2C%22text%22%3A%22SERVER!%22%7D%2C%7B%22x%22%3A156%2C%22y%22%3A132%2C%22width%22%3A349%2C%22height%22%3A16%2C%22text%22%3A%229%20--%20THIS%20IS%20992%20TIMES%3BHELLO%20SERVER!HELLO%20SER%22%7D%2C%7B%22x%22%3A496%2C%22y%22%3A133%2C%22width%22%3A88%2C%22height%22%3A15%2C%22text%22%3A%22SERVER%20LHE%20LO%22%7D%2C%7B%22x%22%3A37%2C%22y%22%3A134%2C%22width%22%3A53%2C%22height%22%3A13%2C%22text%22%3A%22RESUIT%3A%22%7D%2C%7B%22x%22%3A151%2C%22y%22%3A152%2C%22width%22%3A445%2C%22height%22%3A19%2C%22text%22%3A%229%20--%20THIS%20IS%20993%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20S%22%7D%2C%7B%22x%22%3A584%2C%22y%22%3A156%2C%22width%22%3A66%2C%22height%22%3A14%2C%22text%22%3A%22O%20SERVER!%22%7D%2C%7B%22x%22%3A36%2C%22y%22%3A156%2C%22width%22%3A54%2C%22height%22%3A13%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A151%2C%22y%22%3A175%2C%22width%22%3A500%2C%22height%22%3A17%2C%22text%22%3A%229%20--%20THIS%20IS%20994%20TINES%3AHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A36%2C%22y%22%3A178%2C%22width%22%3A55%2C%22height%22%3A14%2C%22text%22%3A%22RESU1T%3A%22%7D%2C%7B%22x%22%3A156%2C%22y%22%3A197%2C%22width%22%3A494%2C%22height%22%3A17%2C%22text%22%3A%229%20--%20THIS%20IS%20995%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A38%2C%22y%22%3A199%2C%22width%22%3A55%2C%22height%22%3A15%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A152%2C%22y%22%3A218%2C%22width%22%3A500%2C%22height%22%3A20%2C%22text%22%3A%229%20--%20THIS%20IS%20996%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A36%2C%22y%22%3A221%2C%22width%22%3A56%2C%22height%22%3A15%2C%22text%22%3A%22RESULT%3A%22%7D%2C%7B%22x%22%3A156%2C%22y%22%3A241%2C%22width%22%3A496%2C%22height%22%3A17%2C%22text%22%3A%229%20--%20THIS%20IS%20997%20TIMES%3AHELLO%20SERVER!HELLO%20SERVERLHELLO%20SERVER!%22%7D%2C%7B%22x%22%3A151%2C%22y%22%3A263%2C%22width%22%3A500%2C%22height%22%3A18%2C%22text%22%3A%229%20--%20THIS%20IS%20998%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A192%2C%22y%22%3A283%2C%22width%22%3A459%2C%22height%22%3A21%2C%22text%22%3A%22-%20THIS%20IS%20999%20TIMES%3BHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%2C%7B%22x%22%3A195%2C%22y%22%3A307%2C%22width%22%3A463%2C%22height%22%3A17%2C%22text%22%3A%22THIS%20IS%201000%20TIMES%3AHELLO%20SERVER!HELLO%20SERVER!HELLO%20SERVER!%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E9%80%9A%E8%BF%87%E5%8A%A8%E6%80%81%E9%95%BF%E5%BA%A6%E6%9D%A5%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E5%8D%8A%E5%8C%85%E9%97%AE%E9%A2%98%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233f4753%22%2C%22id%22%3A%22PSXqx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="brE7J" id="brE7J"><span data-lake-id="ud331cdb4" id="ud331cdb4" style="color: rgba(0, 0, 0, 0.85)">封装半包粘包处理器</span></h4><p data-lake-id="ua2cd63d0" id="ua2cd63d0"><span data-lake-id="u9bb6a9f4" id="u9bb6a9f4" style="color: rgb(31, 35, 40)">我们会发现，解决半包粘包问题还是有一定的代码量的，而且由于 ServiceProxy（消费者）和请求 Handler（提供者）都需要接受 Buffer，所以都需要半包粘包问题处理。</span></p><p data-lake-id="ucedd634c" id="ucedd634c"><span data-lake-id="u43d0d9d7" id="u43d0d9d7" style="color: rgb(31, 35, 40)">那我们就应该要想到：需要对代码进行封装复用了。</span></p><p data-lake-id="u00e4a041" id="u00e4a041"><span data-lake-id="u40e919ec" id="u40e919ec" style="color: rgb(31, 35, 40)">这里我们可以使用设计模式中的</span><span data-lake-id="ud4f3876c" id="ud4f3876c" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u6909d64a" id="u6909d64a" style="color: rgb(31, 35, 40)">装饰者模式</span></strong><span data-lake-id="uf638fd3f" id="uf638fd3f" style="color: rgb(31, 35, 40)">，使用 RecordParser 对原有的 Buffer 处理器的能力进行增强。</span></p><p data-lake-id="u16d467d3" id="u16d467d3"><span data-lake-id="u83c171a7" id="u83c171a7" style="color: rgb(31, 35, 40)">装饰者模式可以简单理解为给对象穿装备，增强对象的能力。</span></p><p data-lake-id="u744d26a6" id="u744d26a6"><span data-lake-id="u7f71118a" id="u7f71118a" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="ufdd0cf12" id="ufdd0cf12"><span data-lake-id="u3201c257" id="u3201c257" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">server.tcp</span></code><span data-lake-id="u79ae94df" id="u79ae94df" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="u98a52501" id="u98a52501"><span data-lake-id="u77ec9036" id="u77ec9036" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">TcpBufferHandlerWrapper</span></code><span data-lake-id="u74adb06f" id="u74adb06f" style="color: rgb(31, 35, 40)"> 类，实现并增强 </span><code data-lake-id="u0b1c351e" id="u0b1c351e"><span data-lake-id="ub2187b4d" id="ub2187b4d" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">Handler&lt;Buffer&gt;</span></code><span data-lake-id="u6cf60532" id="u6cf60532" style="color: rgb(31, 35, 40)"> 接口。</span></p><p data-lake-id="u0323305b" id="u0323305b"><span data-lake-id="uda726a10" id="uda726a10" style="color: rgb(31, 35, 40)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22TcpBufferHandleWrapper%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20com.yybf.chenrpc.protocol.ProtocolConstant%3B%5Cnimport%20io.vertx.core.Handler%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.parsetools.RecordParser%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%20recordParser%20%E5%AF%B9%E5%8E%9F%E6%9C%89%E7%9A%84%20buffer%20%E7%9A%84%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%BC%BA%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F7%5Cn%20*%2F%5Cnpublic%20class%20TcpBufferHandleWrapper%20implements%20Handler%3CBuffer%3E%20%7B%5Cn%20%20%20%20private%20final%20RecordParser%20recordParser%3B%5Cn%5Cn%20%20%20%20public%20TcpBufferHandleWrapper(Handler%3CBuffer%3E%20bufferHandler)%20%7B%5Cn%20%20%20%20%20%20%20%20recordParser%20%3D%20initRecordParser(bufferHandler)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(Buffer%20buffer)%20%7B%5Cn%20%20%20%20%20%20%20%20recordParser.handle(buffer)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20private%20RecordParser%20initRecordParser(Handler%3CBuffer%3E%20bufferHandler)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0parser%5Cn%20%20%20%20%20%20%20%20RecordParser%20parser%20%3D%20RecordParser.newFixed(ProtocolConstant.MESSAGE_HEADER_LENGTH)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20parser.setOutput(new%20Handler%3CBuffer%3E()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E6%B6%88%E6%81%AF%E5%A4%B4%E6%A0%87%E8%AE%B0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20size%20%3D%20-1%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%82%A8%E5%AD%98%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AF%BB%E5%8F%96%EF%BC%88%E5%8C%85%E6%8B%AC%E6%B6%88%E6%81%AF%E5%A4%B4%E5%92%8C%E6%B6%88%E6%81%AF%E4%BD%93%EF%BC%89%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20resultBuffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20%20%20%20%20public%20void%20handle(Buffer%20buffer)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(size%20%3D%3D%20-1)%20%7B%20%2F%2F%20%E8%AF%BB%E5%8F%96%E7%9A%84%E6%98%AF%E5%A4%B4%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E6%B6%88%E6%81%AF%E4%BD%93%E7%9A%84%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%20%3D%20buffer.getInt(13)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9B%B4%E6%94%B9%E6%88%AA%E5%8F%96%E7%9A%84%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20parser.fixedSizeMode(size)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%A4%B4%E4%BF%A1%E6%81%AF%E5%86%99%E5%85%A5%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer.appendBuffer(buffer)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer.appendBytes(%5C%22%20--%20%5C%22.getBytes())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%20%2F%2F%20%E8%AF%BB%E5%8F%96%E7%9A%84%E6%98%AF%E4%BD%93%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%99%E5%85%A5%E4%BD%93%E4%BF%A1%E6%81%AF%E5%88%B0%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer.appendBuffer(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B7%B2%E6%8B%BC%E6%8E%A5%E4%B8%BA%E5%AE%8C%E6%95%B4%20Buffer%EF%BC%8C%E6%89%A7%E8%A1%8C%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bufferHandler.handle(resultBuffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%87%8D%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20parser.fixedSizeMode(ProtocolConstant.MESSAGE_HEADER_LENGTH)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%20%3D%20-1%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultBuffer%20%3D%20Buffer.buffer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20return%20parser%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22TcpBufferHandleWrapper%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z5UFC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u35821651" id="u35821651"><span data-lake-id="u3d8b6ca6" id="u3d8b6ca6" style="color: rgb(31, 35, 40)">其实就是把 RecordParser 的代码粘了过来，当调用处理器的 </span><code data-lake-id="ue1772e01" id="ue1772e01"><span data-lake-id="u474b7225" id="u474b7225" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">handle</span></code><span data-lake-id="u710ac2d3" id="u710ac2d3" style="color: rgb(31, 35, 40)"> 方法时，改为调用 </span><code data-lake-id="ue608ca7b" id="ue608ca7b"><span data-lake-id="ud655591b" id="ud655591b" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">recordParser.handle</span></code><span data-lake-id="u3525d187" id="u3525d187" style="color: rgb(31, 35, 40)">。</span></p><h3 data-lake-id="NY1wQ" id="NY1wQ"><span data-lake-id="u8c137544" id="u8c137544" style="color: rgba(0, 0, 0, 0.85)">优化客户端调用代码</span></h3><p data-lake-id="u27b40fc5" id="u27b40fc5"><span data-lake-id="ub0ef3810" id="ub0ef3810" style="color: rgb(31, 35, 40)">有了半包粘包处理器，我们就可以很轻松地在业务代码中运用它了。</span></p><h4 data-lake-id="p1LzG" id="p1LzG"><span data-lake-id="u19160b25" id="u19160b25" style="color: rgb(31, 35, 40)">1）修改 TCP 请求处理器。</span></h4><p data-lake-id="u75bb012f" id="u75bb012f"><span data-lake-id="ubdce9898" id="ubdce9898" style="color: rgb(31, 35, 40)">使用 </span><code data-lake-id="ua1ee04e3" id="ua1ee04e3"><span data-lake-id="ua8a2bb50" id="ua8a2bb50" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">TcpBufferHandlerWrapper</span></code><span data-lake-id="ufc35ac6d" id="ufc35ac6d" style="color: rgb(31, 35, 40)"> 来封装之前处理请求的代码，请求逻辑不用变，需要修改的部分代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20TCP%20%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E5%99%A8%5Cn%20*%2F%5Cnpublic%20class%20TcpServerHandler%20implements%20Handler%3CNetSocket%3E%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20socket%20the%20event%20to%20handle%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20handle(NetSocket%20socket)%20%7B%5Cn%20%20%20%20%20%20%20%20TcpBufferHandlerWrapper%20bufferHandlerWrapper%20%3D%20new%20TcpBufferHandlerWrapper(buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E4%BB%A3%E7%A0%81%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20socket.handler(bufferHandlerWrapper)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q6odT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u168dee2d" id="u168dee2d"><span data-lake-id="u84aa5194" id="u84aa5194" style="color: rgb(31, 35, 40)">其实就是使用一个 Wrapper 对象</span><span data-lake-id="ue1548f6c" id="ue1548f6c" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u7237c72d" id="u7237c72d" style="color: rgb(31, 35, 40)">包装</span></strong><span data-lake-id="u66e038e6" id="u66e038e6" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="ue2a14fda" id="ue2a14fda" style="color: rgb(31, 35, 40)">了之前的代码，就解决了半包粘包。是不是很简单？这就是装饰者模式的妙用！</span></p><p data-lake-id="u451c33d7" id="u451c33d7"><span data-lake-id="u91aa11ea" id="u91aa11ea" style="color: rgb(31, 35, 40)">现在的 AI 不就是这样么？给你个 AI 工具，你就能做到之前很多想都不敢想的事情。</span></p><p data-lake-id="u91156fa6" id="u91156fa6"><br></p><h4 data-lake-id="s0DkK" id="s0DkK"><span data-lake-id="u4d0c82f2" id="u4d0c82f2" style="color: rgb(31, 35, 40)">2）修改客户端处理响应的代码。</span></h4><p data-lake-id="uaa82d933" id="uaa82d933"><span data-lake-id="u19482723" id="u19482723" style="color: rgb(31, 35, 40)">之前我们是把所有发送请求、处理响应的代码都写到了</span><span data-lake-id="u998cd069" id="u998cd069" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="ud53f3e66" id="ud53f3e66" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceProxy</span><span data-lake-id="ubc70c700" id="ubc70c700" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="uc7ee8964" id="uc7ee8964" style="color: rgb(31, 35, 40)">中，使得这个类的代码 “臃肿不堪”。</span></p><p data-lake-id="u7a594212" id="u7a594212"><span data-lake-id="ub19db1a4" id="ub19db1a4" style="color: rgb(31, 35, 40)">我们干脆做个优化，把所有的请求响应逻辑提取出来，封装为单独的 </span><code data-lake-id="ufc852473" id="ufc852473"><span data-lake-id="uba426859" id="uba426859" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxTcpClient</span></code><span data-lake-id="u8800ac21" id="u8800ac21" style="color: rgb(31, 35, 40)"> 类，放在 </span><code data-lake-id="uf067f3bd" id="uf067f3bd"><span data-lake-id="u9fdd9313" id="u9fdd9313" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">server.tcp</span></code><span data-lake-id="u099ac2d1" id="u099ac2d1" style="color: rgb(31, 35, 40)"> 包下。</span></p><p data-lake-id="uc27fdbb6" id="uc27fdbb6"><span data-lake-id="ub7d6b2d6" id="ub7d6b2d6" style="color: rgb(31, 35, 40)">VertxTcpClient 的完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.server.tcp%3B%5Cn%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cn%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cn%5Cn%2F**%5Cn%20*%20Vertx%20TCP%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F5%5Cn%20*%2F%5Cnpublic%20class%20VertxTcpClient%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%88%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFServiceProxy%E4%B8%AD%E7%9A%84%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%89%5Cn%20%20%20%20%20*%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20rpcRequest%3A%5Cn%20%20%20%20%20*%20%40param%20serviceMetaInfo%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.model.RpcResponse%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F7%2023%3A28%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20RpcResponse%20doRequest(RpcRequest%20rpcRequest%2C%20ServiceMetaInfo%20serviceMetaInfo)%20throws%20ExecutionException%2C%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81Tcp%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20Vertx%20vertx%20%3D%20Vertx.vertx()%3B%5Cn%20%20%20%20%20%20%20%20NetClient%20netClient%20%3D%20vertx.createNetClient()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E5%BC%82%E6%AD%A5%E5%BC%8F%E7%9A%84vertx%E9%80%9A%E8%BF%87%E9%98%BB%E5%A1%9E%E5%8F%98%E4%B8%BA%E5%90%8C%E6%AD%A5%5Cn%20%20%20%20%20%20%20%20CompletableFuture%3CRpcResponse%3E%20responseFuture%20%3D%20new%20CompletableFuture%3C%3E()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20netClient.connect(serviceMetaInfo.getServicePort()%2C%20serviceMetaInfo.getServiceHost()%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!result.succeeded())%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.err.println(%5C%22Failed%20to%20connect%20to%20TCP%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Connected%20to%20TCP%20server!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20socket%E4%BB%A3%E8%A1%A8%E4%BA%86%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BB%BA%E7%AB%8B%E7%9A%84%20TCP%20%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97%EF%BC%8C%E4%BD%9C%E7%94%A8%E6%98%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9B%E8%A1%8C%20TCP%20%E8%BF%9E%E6%8E%A5%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20NetSocket%20socket%20%3D%20result.result()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E6%B6%88%E6%81%AF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcRequest%3E%20protocolMessage%20%3D%20new%20ProtocolMessage%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage.Header%20header%20%3D%20new%20ProtocolMessage.Header()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setMagic(ProtocolConstant.PROTOCOL_MAGIC)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setVersion(ProtocolConstant.PROTOCOL_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setSerializer((byte)%20ProtocolMessageSerializerEnum%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getEnumByValue(RpcApplication.getRpcConfig().getSerializer()).getKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setType((byte)%20ProtocolMessageTypeEnum.REQUEST.getKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E5%85%A8%E5%B1%80%E8%AF%B7%E6%B1%82ID%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20header.setRequestId(IdUtil.getSnowflakeNextId())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20protocolMessage.setHeader(header)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20protocolMessage.setBody(rpcRequest)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E7%A0%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Buffer%20encodeBuffer%20%3D%20ProtocolMessageEncoder.encode(protocolMessage)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.write(encodeBuffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E5%8D%8F%E8%AE%AE%E6%B6%88%E6%81%AF%E7%BC%96%E7%A0%81%E5%A4%B1%E8%B4%A5%EF%BC%81%20exception%20%EF%BC%9A%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8E%A5%E6%94%B6%E5%93%8D%E5%BA%94%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20TcpBufferHandleWrapper%20tcpBufferHandleWrapper%20%3D%20new%20TcpBufferHandleWrapper(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20buffer%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ProtocolMessage%3CRpcResponse%3E%20rpcResponseProtocolMessage%20%3D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20(ProtocolMessage%3CRpcResponse%3E)%20ProtocolMessageDecoder.decode(buffer)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20responseFuture.complete(rpcResponseProtocolMessage.getBody())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%93%8D%E5%BA%94%E5%A4%84%E7%90%86%E5%99%A8%E8%A3%85%E9%85%8D%E5%88%B0socket%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20socket.handler(tcpBufferHandleWrapper)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20responseFuture.get()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B3%E9%97%AD%E9%93%BE%E6%8E%A5%5Cn%20%20%20%20%20%20%20%20netClient.close()%3B%5Cn%20%20%20%20%20%20%20%20return%20rpcResponse%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CdJJH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8f9782a3" id="u8f9782a3"><span data-lake-id="u4a9ce7c2" id="u4a9ce7c2" style="color: rgb(31, 35, 40)">注意，上述代码中，也使用了 </span><code data-lake-id="u4db9e5e9" id="u4db9e5e9"><span data-lake-id="u8142084e" id="u8142084e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">TcpBufferHandlerWrapper</span></code><span data-lake-id="uf8c16cee" id="uf8c16cee" style="color: rgb(31, 35, 40)"> 对处理响应的代码进行了封装。</span></p><p data-lake-id="u32265065" id="u32265065"><span data-lake-id="u715b789b" id="u715b789b" style="color: rgb(31, 35, 40)">修改 ServiceProxy 代码，调用 VertxTcpClient，修改后的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpClient%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%20%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89tcp%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%9E%84%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%20%2B%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(rpcConfig.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ServiceProxy%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20serializer.toString())%3B%5Cn%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E6%9C%BA%E5%88%B6%E6%9D%A5%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8EserviceMetaInfo%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8EEtcd%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20todo%20%E6%9A%82%E6%97%B6%E5%85%88%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AAmateInfo%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20serviceMetaInfoList.get(0)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81TCP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Response%EF%BC%9A%5C%22%20%2B%20rpcResponse)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f906k%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u88a97a18" id="u88a97a18"><br></p><p data-lake-id="u5aae87e2" id="u5aae87e2"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1712583157736-f27089bd-10be-470f-8738-3307055f9fc0.png%22%2C%22taskId%22%3A%22u24e48938-a132-46cd-a8cd-08c96d44722%22%2C%22clientId%22%3A%22u756478e2-d7a2-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1501%2C%22height%22%3A577%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A677709%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1501%2C%22originHeight%22%3A577%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22HEADERS-GRPCHTTP2RESPONSEHEADERS%5B%3ASTATUS%3A%20200%2C%20CONTENT-TYPE%3A%20APPLICATION%2FGRPC%5D%20PADDING-0%20ENDSTREAM-FALSE%2021%3A29%3A17.116%20(VERT.X-EVENTLOOP-THREAD-0%5D%20DEBUG%2010.GRPC%2CNETTY%2CNETTYGLIENTHANDLER%20--%20%5BID%3A%20EX2A72Z1EE%20-%20%5BID%3A%200X207221E0%2C%20L%3A%2F127.0.0.1%3A53281%20-%20R%3ALOCALHOST%2F127.0.0.1%3A2380%5D%20INBOUND%20DATA%3A%20STREAMID-5%20SERVICEGROUP%20DEFAULT)%20SERVICEPORT18081%2C%20COM.YYBF.EXAMPLE.COMMON.MODEL%20CLASS%20.USER%5D%2C%20ARGS-%5BCOM.YYBF.EXAMPLE.COMMON.MODEL.USERQ5FCACC0%5D)%20CONNECTED%20TO%20TCP%20SERVER!%20.COMMON.MODEL.USER%405FCACC0%5D)%20.MODEL.USER%5D%2C%20ARGS-%5BCOM.YYBF.EXAMPLE.COMMON.NODEL.USER%40SFCACCO%5D)%20.COMMON.MODEL.USER%405FCACC0%5D)%20CLIENT%20--)%20RESPONSEFUTURE%3A%20JAVA.UTIL.CONCURRENT.COMPLETABLEFUTUREG61861A29(COMPLETED%20NORMALLY%5D%202END!!!%20NEWUSER%20%3ACOM.YYBF.EXAMPLE.COMMON.MODEL.USER%4015A902E7%20NAME%3AYYBF%203END!!!%2021%3A29%3A20.925%20%5BVERT.X-EVENTLOOP-THREAD-01%20DEBUG%20IO.GEPC.NETTY.NETTYCLIENTHANDLER%20%5BID%3A%20OX207221EO%2C%20L%3A%2F127.0.9.1%3A53281%20-%20R%3ALOCALHOST%2F127.9.0.0.1%3A2380%5D%20INBOUND%20DATA%3A%20STREAMIDE5%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22%2C%22y%22%3A21%2C%22width%22%3A630%2C%22height%22%3A18%2C%22text%22%3A%22HEADERS-GRPCHTTP2RESPONSEHEADERS%5B%3ASTATUS%3A%20200%2C%20CONTENT-TYPE%3A%20APPLICATION%2FGRPC%5D%22%7D%2C%7B%22x%22%3A658%2C%22y%22%3A24%2C%22width%22%3A207%2C%22height%22%3A14%2C%22text%22%3A%22PADDING-0%20ENDSTREAM-FALSE%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A42%2C%22width%22%3A779%2C%22height%22%3A19%2C%22text%22%3A%2221%3A29%3A17.116%20(VERT.X-EVENTLOOP-THREAD-0%5D%20DEBUG%2010.GRPC%2CNETTY%2CNETTYGLIENTHANDLER%20--%20%5BID%3A%20EX2A72Z1EE%22%7D%2C%7B%22x%22%3A673%2C%22y%22%3A43%2C%22width%22%3A542%2C%22height%22%3A18%2C%22text%22%3A%22-%20%5BID%3A%200X207221E0%2C%20L%3A%2F127.0.0.1%3A53281%20-%20R%3ALOCALHOST%2F127.0.0.1%3A2380%5D%22%7D%2C%7B%22x%22%3A1204%2C%22y%22%3A45%2C%22width%22%3A200%2C%22height%22%3A15%2C%22text%22%3A%22INBOUND%20DATA%3A%20STREAMID-5%22%7D%2C%7B%22x%22%3A1327%2C%22y%22%3A89%2C%22width%22%3A155%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEGROUP%20DEFAULT)%22%7D%2C%7B%22x%22%3A1173%2C%22y%22%3A90%2C%22width%22%3A136%2C%22height%22%3A15%2C%22text%22%3A%22SERVICEPORT18081%2C%22%7D%2C%7B%22x%22%3A1243%2C%22y%22%3A111%2C%22width%22%3A230%2C%22height%22%3A16%2C%22text%22%3A%22COM.YYBF.EXAMPLE.COMMON.MODEL%22%7D%2C%7B%22x%22%3A1192%2C%22y%22%3A112%2C%22width%22%3A42%2C%22height%22%3A14%2C%22text%22%3A%22CLASS%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A131%2C%22width%22%3A469%2C%22height%22%3A17%2C%22text%22%3A%22.USER%5D%2C%20ARGS-%5BCOM.YYBF.EXAMPLE.COMMON.MODEL.USERQ5FCACC0%5D)%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A154%2C%22width%22%3A205%2C%22height%22%3A17%2C%22text%22%3A%22CONNECTED%20TO%20TCP%20SERVER!%22%7D%2C%7B%22x%22%3A24%2C%22y%22%3A241%2C%22width%22%3A251%2C%22height%22%3A17%2C%22text%22%3A%22.COMMON.MODEL.USER%405FCACC0%5D)%22%7D%2C%7B%22x%22%3A22%2C%22y%22%3A286%2C%22width%22%3A527%2C%22height%22%3A17%2C%22text%22%3A%22.MODEL.USER%5D%2C%20ARGS-%5BCOM.YYBF.EXAMPLE.COMMON.NODEL.USER%40SFCACCO%5D)%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A351%2C%22width%22%3A240%2C%22height%22%3A19%2C%22text%22%3A%22.COMMON.MODEL.USER%405FCACC0%5D)%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A395%2C%22width%22%3A754%2C%22height%22%3A17%2C%22text%22%3A%22CLIENT%20--)%20RESPONSEFUTURE%3A%20JAVA.UTIL.CONCURRENT.COMPLETABLEFUTUREG61861A29(COMPLETED%20NORMALLY%5D%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A441%2C%22width%22%3A80%2C%22height%22%3A14%2C%22text%22%3A%222END!!!%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A462%2C%22width%22%3A428%2C%22height%22%3A18%2C%22text%22%3A%22NEWUSER%20%3ACOM.YYBF.EXAMPLE.COMMON.MODEL.USER%4015A902E7%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A485%2C%22width%22%3A70%2C%22height%22%3A13%2C%22text%22%3A%22NAME%3AYYBF%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A507%2C%22width%22%3A62%2C%22height%22%3A13%2C%22text%22%3A%223END!!!%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A526%2C%22width%22%3A635%2C%22height%22%3A17%2C%22text%22%3A%2221%3A29%3A20.925%20%5BVERT.X-EVENTLOOP-THREAD-01%20DEBUG%20IO.GEPC.NETTY.NETTYCLIENTHANDLER%22%7D%2C%7B%22x%22%3A681%2C%22y%22%3A527%2C%22width%22%3A728%2C%22height%22%3A19%2C%22text%22%3A%22%5BID%3A%20OX207221EO%2C%20L%3A%2F127.0.9.1%3A53281%20-%20R%3ALOCALHOST%2F127.9.0.0.1%3A2380%5D%20INBOUND%20DATA%3A%20STREAMIDE5%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E6%9C%80%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%88%90%E5%8A%9F%E9%80%9A%E8%BF%87RPC%E8%B0%83%E7%94%A8provider%E6%8F%90%E4%BE%9B%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23434d58%22%2C%22id%22%3A%22mrC7n%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h2 data-lake-id="IMRPJ" id="IMRPJ"><span data-lake-id="u0257bf8c" id="u0257bf8c" style="color: rgba(0, 0, 0, 0.85)">六、扩展</span></h2><p data-lake-id="ubd100f8e" id="ubd100f8e"><span data-lake-id="ued231108" id="ued231108" style="color: rgb(31, 35, 40)">1）自己定义一个占用空间更少的 RPC 协议的消息结构。</span></p><p data-lake-id="u112c5d8a" id="u112c5d8a"><span data-lake-id="u396dba66" id="u396dba66" style="color: rgb(31, 35, 40)">参考思路：序列化方式字段目前占用了 8 bit，但其实总共就几种序列化方式，能否只占用 4 bit？其他字段也可以按照这种方式思考。</span></p><p data-lake-id="u29fe7928" id="u29fe7928"><br></p><p data-lake-id="ud4f329d1" id="ud4f329d1"><br></p><h1 data-lake-id="jqf9s" id="jqf9s"><span data-lake-id="ud176ea7d" id="ud176ea7d">八、负载均衡</span></h1><h2 data-lake-id="rb9dL" id="rb9dL"><span data-lake-id="u85db9c6f" id="u85db9c6f" style="color: rgba(0, 0, 0, 0.85)">一、需求分析</span></h2><p data-lake-id="ue9e10cc8" id="ue9e10cc8"><span data-lake-id="u1433e095" id="u1433e095" style="color: rgb(31, 35, 40)">现在的 RPC 框架已经可以从注册中心获取到服务提供者的注册信息了，同一个服务可能会有多个服务提供者，但是目前消费者始终读取了第一个服务提供者节点发起调用，不仅会增大单个节点的压力，而且没有利用好其他节点的资源。</span></p><p data-lake-id="ubc47fd81" id="ubc47fd81"><span data-lake-id="ud8e6790f" id="ud8e6790f" style="color: rgb(31, 35, 40)">因此完全可以从服务提供者节点中，选择一个服务提供者发起请求，而不是每次都请求同一个服务提供者，这个操作就叫做 </span><strong><span data-lake-id="ue8f80bde" id="ue8f80bde" style="color: rgb(31, 35, 40)">负载均衡</span></strong><span data-lake-id="u2cd07f45" id="u2cd07f45" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="ud886d584" id="ud886d584"><span data-lake-id="u88bd0a70" id="u88bd0a70" style="color: rgb(31, 35, 40)">本次就为 RPC 框架支持服务消费者的负载均衡。</span></p><h2 data-lake-id="t29xc" id="t29xc"><span data-lake-id="u6434aea3" id="u6434aea3" style="color: rgba(0, 0, 0, 0.85)">二、负载均衡</span></h2><h3 data-lake-id="H5KmP" id="H5KmP"><span data-lake-id="uffb2c71f" id="uffb2c71f" style="color: rgba(0, 0, 0, 0.85)">什么是负载均衡？</span></h3><p data-lake-id="ua03efd34" id="ua03efd34"><span data-lake-id="u0ba1f432" id="u0ba1f432" style="color: rgb(31, 35, 40)">负载均衡是一种用来分配网络或计算负载到多个资源上的技术。它的目的是确保每个资源都能够有效地处理负载、增加系统的并发量、避免某些资源过载而导致性能下降或服务不可用的情况。</span></p><p data-lake-id="uf8cefc74" id="uf8cefc74"><span data-lake-id="uccf27e6f" id="uccf27e6f" style="color: rgb(31, 35, 40)">回归到 RPC 框架，负载均衡的作用是从一组可用的服务提供者中选择一个进行调用。</span></p><p data-lake-id="u224f5036" id="u224f5036"><span data-lake-id="ud7167625" id="ud7167625" style="color: rgb(31, 35, 40)">常用的负载均衡实现技术有 Nginx（七层负载均衡）、LVS（四层负载均衡）等。</span></p><p data-lake-id="u006d4a20" id="u006d4a20"><span data-lake-id="uf3c8d660" id="uf3c8d660" style="color: rgb(31, 35, 40)">推荐阅读鱼皮之前写过的一篇负载均衡入门文章：</span><a href="https://www.codefather.cn/%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/" target="_blank" data-lake-id="u1873ea8b" id="u1873ea8b"><span data-lake-id="u22be4508" id="u22be4508">文章链接</span></a></p><h3 data-lake-id="zkYAW" id="zkYAW"><span data-lake-id="u17413eaf" id="u17413eaf" style="color: rgba(0, 0, 0, 0.85)">常见负载均衡算法</span></h3><p data-lake-id="u95b5d5ad" id="u95b5d5ad"><span data-lake-id="ud5daab60" id="ud5daab60" style="color: rgb(31, 35, 40)">负载均衡学习的重点就是它的算法 —— 按照什么策略选择资源。</span></p><p data-lake-id="u26e17428" id="u26e17428"><span data-lake-id="u31481dc1" id="u31481dc1" style="color: rgb(31, 35, 40)">不同的负载均衡算法，适用的场景也不同，一定要根据实际情况选取，主流的负载均衡算法如下：</span></p><h4 data-lake-id="z89Yr" id="z89Yr"><span data-lake-id="u8552b19e" id="u8552b19e" style="color: rgb(31, 35, 40)">1）轮询（Round Robin）：</span></h4><p data-lake-id="u3526c033" id="u3526c033"><span data-lake-id="u852404e2" id="u852404e2" style="color: rgb(31, 35, 40)">按照循环的顺序将请求分配给每个服务器，适用于各服务器性能相近的情况。</span></p><p data-lake-id="u6b39f450" id="u6b39f450"><span data-lake-id="u60097355" id="u60097355" style="color: rgb(31, 35, 40)">假如有 5 台服务器节点，请求调用顺序如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%221%2C2%2C3%2C4%2C5%2C1%2C2%2C3%2C4%2C5%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ocxr6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="xBWKU" id="xBWKU"><span data-lake-id="u825374ed" id="u825374ed" style="color: rgb(31, 35, 40)">2）随机（Random）：</span></h4><p data-lake-id="u4434a688" id="u4434a688"><span data-lake-id="u445ee52c" id="u445ee52c" style="color: rgb(31, 35, 40)">随机选择一个服务器来处理请求，适用于服务器性能相近且负载均匀的情况。</span></p><p data-lake-id="ub54643f7" id="ub54643f7"><span data-lake-id="u3c2d59ac" id="u3c2d59ac" style="color: rgb(31, 35, 40)">假如有 5 台服务器节点，请求调用顺序如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%223%2C2%2C4%2C1%2C2%2C5%2C2%2C1%2C3%2C4%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Hbetd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="JoraN" id="JoraN"><span data-lake-id="u111884db" id="u111884db" style="color: rgb(31, 35, 40)">3）加权轮询（Weighted Round Robin）：</span></h4><p data-lake-id="u1508258c" id="u1508258c"><span data-lake-id="u03a97d3b" id="u03a97d3b" style="color: rgb(31, 35, 40)">根据服务器的性能或权重分配请求，性能更好的服务器会获得更多的请求，适用于服务器性能不均的情况。</span></p><p data-lake-id="ue7ce0119" id="ue7ce0119"><span data-lake-id="u14d7a3e1" id="u14d7a3e1" style="color: rgb(31, 35, 40)">假如有 1 台千兆带宽的服务器节点和 4 台百兆带宽的服务器节点，请求调用顺序可能如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%221%2C1%2C1%2C2%2C%201%2C1%2C1%2C3%2C%201%2C1%2C1%2C4%2C%201%2C1%2C1%2C5%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lG95c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="UthN4" id="UthN4"><span data-lake-id="u97f0d617" id="u97f0d617" style="color: rgb(31, 35, 40)">4）加权随机（Weighted Random）：</span></h4><p data-lake-id="ua8a672e3" id="ua8a672e3"><span data-lake-id="u6e11e344" id="u6e11e344" style="color: rgb(31, 35, 40)">根据服务器的权重随机选择一个服务器处理请求，适用于服务器性能不均的情况。</span></p><p data-lake-id="u0b91f64a" id="u0b91f64a"><span data-lake-id="uc4e28fe9" id="uc4e28fe9" style="color: rgb(31, 35, 40)">假如有 2 台千兆带宽的服务器节点和 3 台百兆带宽的服务器节点，请求调用顺序可能如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%221%2C2%2C2%2C1%2C3%2C%201%2C1%2C1%2C2%2C4%2C%202%2C2%2C2%2C1%2C5%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22goPH6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="pdhRQ" id="pdhRQ"><span data-lake-id="u4f09f3b8" id="u4f09f3b8" style="color: rgb(31, 35, 40)">5）最小连接数（Least Connections）：</span></h4><p data-lake-id="u223c7709" id="u223c7709"><span data-lake-id="u1d725ebb" id="u1d725ebb" style="color: rgb(31, 35, 40)">选择当前连接数最少的服务器来处理请求，适用于长连接场景。</span></p><h4 data-lake-id="JNZxQ" id="JNZxQ"><span data-lake-id="u43563096" id="u43563096" style="color: rgb(31, 35, 40)">6）IP Hash：</span></h4><p data-lake-id="u18b0fd18" id="u18b0fd18"><span data-lake-id="u106520fe" id="u106520fe" style="color: rgb(31, 35, 40)">根据客户端 IP 地址的哈希值选择服务器处理请求，确保同一客户端的请求始终被分配到同一台服务器上，适用于需要保持会话一致性的场景。</span></p><p data-lake-id="ua6ce73fb" id="ua6ce73fb"><span data-lake-id="u1d2a4a52" id="u1d2a4a52" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u974f03d0" id="u974f03d0"><span data-lake-id="ufa320c32" id="ufa320c32" style="color: rgb(31, 35, 40)">当然，也可以根据请求中的其他参数进行 Hash，比如根据请求接口的地址路由到不同的服务器节点。</span></p><p data-lake-id="u77c61c55" id="u77c61c55"><span data-lake-id="u7dfe92e6" id="u7dfe92e6" style="color: rgb(31, 35, 40)">下面，再给大家分享一个很重要的分布式知识点：一致性 Hash。</span></p><h3 data-lake-id="jPZf5" id="jPZf5"><span data-lake-id="u2b531fc9" id="u2b531fc9" style="color: rgba(0, 0, 0, 0.85)">一致性 Hash</span></h3><p data-lake-id="u0af36df3" id="u0af36df3"><span data-lake-id="uc2bbb56d" id="uc2bbb56d" style="color: rgb(31, 35, 40)">一致性哈希（Consistent Hashing）是一种经典的哈希算法，用于将请求分配到多个节点或服务器上，所以非常适用于负载均衡。</span></p><p data-lake-id="u874c9ca4" id="u874c9ca4"><span data-lake-id="u94f19f00" id="u94f19f00" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u373ffb00" id="u373ffb00"><span data-lake-id="u576bbf40" id="u576bbf40" style="color: rgb(31, 35, 40)">它的核心思想是将整个哈希值空间划分成一个环状结构，每个节点或服务器在环上占据一个位置，每个请求根据其哈希值映射到环上的一个点，然后顺时针寻找第一个大于或等于该哈希值的节点，将请求路由到该节点上。</span></p><p data-lake-id="u6be4b0fe" id="u6be4b0fe"><span data-lake-id="ufc21c14e" id="ufc21c14e" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u6b6a95e0" id="u6b6a95e0"><span data-lake-id="u774154b3" id="u774154b3" style="color: rgb(31, 35, 40)">一致性哈希环结构如图：</span></p><p data-lake-id="uf1513b4a" id="uf1513b4a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1713178918785-7f7e7bad-18a0-44ba-99fd-c9841672880b.jpeg%22%2C%22taskId%22%3A%22u61922e4d-2165-46da-a242-89f6c924244%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709796048078-2a68e807-c640-45a1-9163-a17f044b2a07.jpg%22%2C%22size%22%3A35315%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1051%2C%22originHeight%22%3A888%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%20%E6%9C%8D%E5%8A%A1%E5%99%A8A%20HASH%3A200%20HASH%3A100%20%E8%AF%B7%E6%B1%82A%20HASH%3A280%20%E6%9C%8D%E5%8A%A1%E5%99%A8C%20HASH%3A300%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A892%2C%22y%22%3A87%2C%22width%22%3A119%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A87%2C%22width%22%3A119%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%22%7D%2C%7B%22x%22%3A891%2C%22y%22%3A141%2C%22width%22%3A143%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A200%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A142%2C%22width%22%3A141%2C%22height%22%3A26%2C%22text%22%3A%22HASH%3A100%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A688%2C%22width%22%3A90%2C%22height%22%3A30%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A803%2C%22y%22%3A742%2C%22width%22%3A144%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A280%22%7D%2C%7B%22x%22%3A469%2C%22y%22%3A780%2C%22width%22%3A120%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8C%22%7D%2C%7B%22x%22%3A469%2C%22y%22%3A833%2C%22width%22%3A140%2C%22height%22%3A28%2C%22text%22%3A%22HASH%3A300%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22u98eaf46e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ued46b759" id="ued46b759"><span data-lake-id="uda630e94" id="uda630e94" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u9ecd4439" id="u9ecd4439"><span data-lake-id="u53c4a738" id="u53c4a738" style="color: rgb(31, 35, 40)">上图中，请求 A 会交给服务器 C 来处理。</span></p><p data-lake-id="ucb01243a" id="ucb01243a"><span data-lake-id="ua00dfbc4" id="ua00dfbc4" style="color: rgb(31, 35, 40)">好像也没什么特别的啊？还整个环？</span></p><p data-lake-id="u100de742" id="u100de742"><span data-lake-id="u087916cb" id="u087916cb" style="color: rgb(31, 35, 40)">其实，一致性哈希还解决了</span><span data-lake-id="u130d8672" id="u130d8672" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u2e86943e" id="u2e86943e" style="color: rgb(31, 35, 40)">节点下线</span></strong><span data-lake-id="u0b568ee3" id="u0b568ee3" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u44de6f2a" id="u44de6f2a" style="color: rgb(31, 35, 40)">和</span><span data-lake-id="u3c20c09e" id="u3c20c09e" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u4c0b843c" id="u4c0b843c" style="color: rgb(31, 35, 40)">倾斜问题</span></strong><span data-lake-id="u5540987f" id="u5540987f" style="color: rgb(31, 35, 40)">。</span></p><h4 data-lake-id="mrn63" id="mrn63"><span data-lake-id="uea3e96ed" id="uea3e96ed" style="color: rgb(31, 35, 40)">1）节点下线：</span></h4><p data-lake-id="u5a523498" id="u5a523498"><span data-lake-id="u82c04778" id="u82c04778" style="color: rgb(31, 35, 40)">当某个节点下线时，其负载会被平均分摊到其他节点上，而不会影响到整个系统的稳定性，因为只有部分请求会受到影响。</span></p><p data-lake-id="uec1469be" id="uec1469be"><span data-lake-id="u579a1ac0" id="u579a1ac0" style="color: rgb(31, 35, 40)">如下图，服务器 C 下线后，请求 A 会交给服务器 A 来处理（顺时针寻找第一个大于或等于该哈希值的节点），而服务器 B 接收到的请求保持不变。</span></p><p data-lake-id="u43b8ab68" id="u43b8ab68"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1713178956627-30c612cb-e8b8-4e8c-b69a-9915c43bf3a1.jpeg%22%2C%22taskId%22%3A%22ua8da3ca6-15df-44fc-8603-1e1a99a90da%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709796571984-114f0963-fd81-4d0a-91a5-2e098aa94b51.jpg%22%2C%22size%22%3A35996%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1051%2C%22originHeight%22%3A888%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%20%E6%9C%8D%E5%8A%A1%E5%99%A8A%20HASH%3A200%20HASH%3A100%20%E8%AF%B7%E6%B1%82A%20HASH%3A280%20%E6%9C%8D%E5%8A%A1%E5%99%A8C%20HASH%3A300%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A892%2C%22y%22%3A87%2C%22width%22%3A119%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A87%2C%22width%22%3A119%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%22%7D%2C%7B%22x%22%3A891%2C%22y%22%3A141%2C%22width%22%3A143%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A200%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A142%2C%22width%22%3A141%2C%22height%22%3A26%2C%22text%22%3A%22HASH%3A100%22%7D%2C%7B%22x%22%3A804%2C%22y%22%3A688%2C%22width%22%3A90%2C%22height%22%3A30%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A803%2C%22y%22%3A742%2C%22width%22%3A144%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A280%22%7D%2C%7B%22x%22%3A470%2C%22y%22%3A780%2C%22width%22%3A120%2C%22height%22%3A31%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8C%22%7D%2C%7B%22x%22%3A469%2C%22y%22%3A833%2C%22width%22%3A140%2C%22height%22%3A28%2C%22text%22%3A%22HASH%3A300%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22ub1c5f16c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="WS0lg" id="WS0lg"><span data-lake-id="uc65fd3a1" id="uc65fd3a1" style="color: rgb(31, 35, 40)">2）倾斜问题：</span></h4><p data-lake-id="ue51e8d51" id="ue51e8d51"><span data-lake-id="u3fa92eb1" id="u3fa92eb1" style="color: rgb(31, 35, 40)">通过虚拟节点的引入，将每个物理节点映射到多个虚拟节点上，使得节点在哈希环上的 </span><strong><span data-lake-id="u97b65f9d" id="u97b65f9d" style="color: rgb(31, 35, 40)">分布更加均匀</span></strong><span data-lake-id="ue1baa2d6" id="ue1baa2d6" style="color: rgb(31, 35, 40)">，减少了节点间的负载差异。</span></p><p data-lake-id="u940cfc64" id="u940cfc64"><span data-lake-id="u65e9c77a" id="u65e9c77a" style="color: rgb(31, 35, 40)">举个例子，节点很少的情况下，环的情况可能如下图：</span></p><p data-lake-id="u37cb902b" id="u37cb902b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1713179062190-080081d7-f0c4-4a17-917b-94e49eeea324.jpeg%22%2C%22taskId%22%3A%22u0f2a4deb-8983-4f3b-9cca-33f7c85da6f%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709796572009-aea8e341-5b33-4d21-a53f-36538a5197e0.jpg%22%2C%22size%22%3A34665%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A990%2C%22originHeight%22%3A904%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%20HASH%3A100%20%E6%9C%8D%E5%8A%A1%E5%99%A8B%20HASH%3A80%20%E8%AF%B7%E6%B1%82A%20HASH%3A280%20%E6%9C%8D%E5%8A%A1%E5%99%A8C%20HASH%3A300%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A109%2C%22y%22%3A24%2C%22width%22%3A118%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%22%7D%2C%7B%22x%22%3A107%2C%22y%22%3A79%2C%22width%22%3A140%2C%22height%22%3A24%2C%22text%22%3A%22HASH%3A100%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A238%2C%22width%22%3A120%2C%22height%22%3A33%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%22%7D%2C%7B%22x%22%3A13%2C%22y%22%3A294%2C%22width%22%3A121%2C%22height%22%3A25%2C%22text%22%3A%22HASH%3A80%22%7D%2C%7B%22x%22%3A830%2C%22y%22%3A703%2C%22width%22%3A90%2C%22height%22%3A31%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A829%2C%22y%22%3A758%2C%22width%22%3A143%2C%22height%22%3A30%2C%22text%22%3A%22HASH%3A280%22%7D%2C%7B%22x%22%3A496%2C%22y%22%3A795%2C%22width%22%3A119%2C%22height%22%3A30%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8C%22%7D%2C%7B%22x%22%3A494%2C%22y%22%3A849%2C%22width%22%3A141%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A300%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22u7bd73aaa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u6024357f" id="u6024357f"><span data-lake-id="u4684fc44" id="u4684fc44" style="color: rgb(31, 35, 40)">这样就会导致绝大多数的请求都会发给服务器 C，而服务器 A 的 “领地” 非常少，几乎不会有请求。</span></p><p data-lake-id="u359423a4" id="u359423a4"><span data-lake-id="u961cbeeb" id="u961cbeeb" style="color: rgb(31, 35, 40)">引入虚拟节点后，环的情况变为：</span></p><p data-lake-id="udbae3c3a" id="udbae3c3a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fjpeg%2F35273292%2F1713179100306-c3a49abb-65b1-4229-8c9a-23a026b045ef.jpeg%22%2C%22taskId%22%3A%22ue786216a-3ffa-4c82-9a33-a8e9b4b3a1c%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709796572020-b1e7f220-e579-4455-98bf-c330c11f129c.jpg%22%2C%22size%22%3A48125%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1081%2C%22originHeight%22%3A904%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%20HASH%3A100%20%E6%9C%8D%E5%8A%A1%E5%99%A8B%20HASH%3A80%20%E6%9C%8D%E5%8A%A1%E5%99%A8C%20HASH%3A%2060%20%E6%9C%8D%E5%8A%A1%E5%99%A8B%20HASH%3A%2040%20%E8%AF%B7%E6%B1%82A%20%E6%9C%8D%E5%8A%A1%E5%99%A8A%20HASH%3A280%20%E6%9C%8D%E5%8A%A1%E5%99%A8C%20HASH%3A20%20HASH%3A300%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A137%2C%22y%22%3A23%2C%22width%22%3A121%2C%22height%22%3A31%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A77%2C%22width%22%3A144%2C%22height%22%3A28%2C%22text%22%3A%22HASH%3A100%22%7D%2C%7B%22x%22%3A44%2C%22y%22%3A241%2C%22width%22%3A120%2C%22height%22%3A29%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A293%2C%22width%22%3A123%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A80%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A410%2C%22width%22%3A121%2C%22height%22%3A32%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8C%22%7D%2C%7B%22x%22%3A13%2C%22y%22%3A464%2C%22width%22%3A123%2C%22height%22%3A28%2C%22text%22%3A%22HASH%3A%2060%22%7D%2C%7B%22x%22%3A91%2C%22y%22%3A577%2C%22width%22%3A120%2C%22height%22%3A34%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8B%22%7D%2C%7B%22x%22%3A89%2C%22y%22%3A632%2C%22width%22%3A124%2C%22height%22%3A28%2C%22text%22%3A%22HASH%3A%2040%22%7D%2C%7B%22x%22%3A861%2C%22y%22%3A702%2C%22width%22%3A90%2C%22height%22%3A32%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82A%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A746%2C%22width%22%3A122%2C%22height%22%3A34%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8A%22%7D%2C%7B%22x%22%3A861%2C%22y%22%3A759%2C%22width%22%3A142%2C%22height%22%3A25%2C%22text%22%3A%22HASH%3A280%22%7D%2C%7B%22x%22%3A526%2C%22y%22%3A793%2C%22width%22%3A123%2C%22height%22%3A33%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8C%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A803%2C%22width%22%3A122%2C%22height%22%3A27%2C%22text%22%3A%22HASH%3A20%22%7D%2C%7B%22x%22%3A526%2C%22y%22%3A849%2C%22width%22%3A140%2C%22height%22%3A26%2C%22text%22%3A%22HASH%3A300%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22ufcc325bd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u933c70d3" id="u933c70d3"><span data-lake-id="u6869f090" id="u6869f090" style="color: rgb(31, 35, 40)">这样一来，每个服务器接受到的请求会更容易平均。</span></p><card type="block" name="hr" value="data:%7B%22id%22%3A%22dafxM%22%7D"></card><p data-lake-id="u8b95f810" id="u8b95f810"><span data-lake-id="ue84cdfb3" id="ue84cdfb3" style="color: rgb(31, 35, 40)">理解了负载均衡算法后，我们来开发实现。</span></p><p data-lake-id="uf2a25304" id="uf2a25304"><br></p><h2 data-lake-id="yiyZl" id="yiyZl"><span data-lake-id="u35b709ea" id="u35b709ea" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><h3 data-lake-id="Fsgmf" id="Fsgmf"><span data-lake-id="uaa6b20e0" id="uaa6b20e0" style="color: rgba(0, 0, 0, 0.85)">1、多种负载均衡器实现</span></h3><p data-lake-id="u8aba80d8" id="u8aba80d8"><span data-lake-id="ub0d15bcc" id="ub0d15bcc" style="color: rgb(31, 35, 40)">在学习负载均衡的时候，可以参考 Nginx 的负载均衡算法实现，此处实现</span><strong><span data-lake-id="u5a7620bf" id="u5a7620bf" style="color: rgb(31, 35, 40)">轮询、随机、一致性 Hash </span></strong><span data-lake-id="ub99540d3" id="ub99540d3" style="color: rgb(31, 35, 40)">三种负载均衡算法。</span></p><p data-lake-id="uaa4e9ddc" id="uaa4e9ddc"><span data-lake-id="u6dfae6b1" id="u6dfae6b1" style="color: rgb(31, 35, 40)">在 RPC 项目中新建 </span><code data-lake-id="u3dd2be6f" id="u3dd2be6f"><span data-lake-id="u97de758c" id="u97de758c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">loadbalancer</span><span data-lake-id="uc6d33b1a" id="uc6d33b1a" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u9aa194ee" id="u9aa194ee" style="color: rgb(31, 35, 40)">包，将所有负载均衡器相关的代码放到该包下。</span></p><h4 data-lake-id="tiSdj" id="tiSdj"><span data-lake-id="u53355021" id="u53355021" style="color: rgb(31, 35, 40)">1）编写负载均衡器通用接口。</span></h4><p data-lake-id="uc53c027f" id="uc53c027f"><span data-lake-id="u2aa25467" id="u2aa25467" style="color: rgb(31, 35, 40)">提供一个选择服务方法，接受请求参数和可用服务列表，可以根据这些信息进行选择。</span></p><p data-lake-id="u233295fd" id="u233295fd"><span data-lake-id="uf80461e3" id="uf80461e3" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22LoadBalancer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%EF%BC%88%E6%B6%88%E8%B4%B9%E7%AB%AF%E4%BD%BF%E7%94%A8%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F10%5Cn%20*%2F%5Cnpublic%20interface%20LoadBalancer%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%80%89%E6%8B%A9%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20*%20%E5%B0%86%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%92%8C%E5%8F%AF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E4%BC%A0%E5%85%A5%EF%BC%8C%E8%AF%A5%E6%96%B9%E6%B3%95%E9%80%9A%E8%BF%87%E7%89%B9%E5%AE%9A%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%96%B9%E6%B3%95%EF%BC%8C%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E5%90%88%E9%80%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20requestParams%3A%20%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%20%EF%BC%88%E5%BD%93%E5%89%8D%E4%BB%85%E5%9C%A8consistentHash%E9%87%8C%E9%9D%A2%E7%94%A8%E6%9D%A5%E8%AE%A1%E7%AE%97%E8%AF%B7%E6%B1%82%E7%9A%84hash%E5%80%BC%EF%BC%89%5Cn%20%20%20%20%20*%20%40param%20serviceMetaInfoList%3A%20%E5%8F%AF%E7%94%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.model.ServiceMetaInfo%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F10%2011%3A50%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20ServiceMetaInfo%20select(Map%3CString%2C%20Object%3E%20requestParams%2C%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList)%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22LoadBalancer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22y0j3Z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="hVo4e" id="hVo4e"><span data-lake-id="u93e52166" id="u93e52166" style="color: rgb(31, 35, 40)">2）轮询负载均衡器。</span></h4><p data-lake-id="u3c506239" id="u3c506239"><span data-lake-id="ua7bff2fb" id="ua7bff2fb" style="color: rgb(31, 35, 40)">使用 JUC 包的 </span><code data-lake-id="uea40df75" id="uea40df75"><span data-lake-id="u26eadbfa" id="u26eadbfa" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">AtomicInteger</span></code><span data-lake-id="ucbd6443e" id="ucbd6443e" style="color: rgb(31, 35, 40)"> 实现原子计数器，防止并发冲突问题。</span></p><p data-lake-id="u66113e8c" id="u66113e8c"><span data-lake-id="uada8524f" id="uada8524f" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RoundRobinLoadBalancer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.atomic.AtomicInteger%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E6%9F%A5%E8%AF%A2%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F10%5Cn%20*%2F%5Cnpublic%20class%20RoundRobinLoadBalancer%20implements%20LoadBalancer%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BD%93%E5%89%8D%E8%BD%AE%E8%AF%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E4%B8%8B%E6%A0%87%5Cn%20%20%20%20%20*%20%EF%BC%88%E4%BD%BF%E7%94%A8%20JUC%20%E5%8C%85%E7%9A%84%20AtomicInteger%20%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E8%AE%A1%E6%95%B0%E5%99%A8%EF%BC%8C%E9%98%B2%E6%AD%A2%E5%B9%B6%E5%8F%91%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E3%80%82%EF%BC%89%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20final%20AtomicInteger%20currentIndex%20%3D%20new%20AtomicInteger(0)%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20ServiceMetaInfo%20select(Map%3CString%2C%20Object%3E%20requestParams%2C%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20size%20%3D%20serviceMetaInfoList.size()%3B%5Cn%20%20%20%20%20%20%20%20if(size%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%EF%BC%8C%E6%97%A0%E9%9C%80%E8%BD%AE%E8%AF%A2%5Cn%20%20%20%20%20%20%20%20if(size%20%3D%3D%201)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20serviceMetaInfoList.get(0)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%96%E6%A8%A1%E7%AE%97%E6%B3%95%E8%BD%AE%E8%AF%A2%20%EF%BC%88getAndIncrement()%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8A%A0%E4%B8%80%EF%BC%89%5Cn%20%20%20%20%20%20%20%20int%20index%20%3D%20currentIndex.getAndIncrement()%20%25%20size%3B%5Cn%20%20%20%20%20%20%20%20return%20serviceMetaInfoList.get(index)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RoundRobinLoadBalancer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AaiKV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="BRy3v" id="BRy3v"><span data-lake-id="ubbbc785e" id="ubbbc785e" style="color: rgb(31, 35, 40)">3）随机负载均衡器。</span></h4><p data-lake-id="u08d7c303" id="u08d7c303"><span data-lake-id="u9748864d" id="u9748864d" style="color: rgb(31, 35, 40)">使用 Java 自带的 Random 类实现随机选取即可，</span></p><p data-lake-id="ue5087d68" id="ue5087d68"><span data-lake-id="ud45686f2" id="ud45686f2" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RandomLoadBalancer%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.Random%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%9A%8F%E6%9C%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F10%5Cn%20*%2F%5Cnpublic%20class%20RandomLoadBalancer%20implements%20LoadBalancer%7B%5Cn%20%20%20%20private%20final%20Random%20random%20%3D%20new%20Random()%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20ServiceMetaInfo%20select(Map%3CString%2C%20Object%3E%20requestParams%2C%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20size%20%3D%20serviceMetaInfoList.size()%3B%5Cn%20%20%20%20%20%20%20%20if(size%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%EF%BC%8C%E6%97%A0%E9%9C%80%E8%BD%AE%E8%AF%A2%5Cn%20%20%20%20%20%20%20%20if(size%20%3D%3D%201)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20serviceMetaInfoList.get(0)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E6%80%BB%E9%95%BF%E5%BA%A6%E4%B8%AD%E5%8F%96%E5%87%BA%E4%B8%80%E4%B8%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88%E8%8C%83%E5%9B%B4%E3%80%900%EF%BC%8Csize%EF%BC%89%EF%BC%89%5Cn%20%20%20%20%20%20%20%20return%20serviceMetaInfoList.get(random.nextInt(size))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RandomLoadBalancer%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VtYBG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="xYp2a" id="xYp2a"><span data-lake-id="u58b943d2" id="u58b943d2" style="color: rgb(31, 35, 40)">4）一致性 Hash 负载均衡器。</span></h4><p data-lake-id="u268c29d9" id="u268c29d9"><span data-lake-id="ucff15d12" id="ucff15d12" style="color: rgb(31, 35, 40)">可以使用</span><strong><span data-lake-id="ua962b4b9" id="ua962b4b9" style="color: rgb(31, 35, 40)"> TreeMap 实现一致性 Hash 环</span></strong><span data-lake-id="u9471e03f" id="u9471e03f" style="color: rgb(31, 35, 40)">，该数据结构提供了 ceilingEntry 和 firstEntry 两个方法，便于获取符合算法要求的节点。</span></p><p data-lake-id="u82ab660c" id="u82ab660c"><span data-lake-id="u09211893" id="u09211893" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cn%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.TreeMap%3B%5Cn%5Cn%2F**%5Cn%20*%20%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F10%5Cn%20*%2F%5Cnpublic%20class%20ConsistentHashLoadBalancer%20implements%20LoadBalancer%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%8E%AF%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20final%20TreeMap%3CInteger%2C%20ServiceMetaInfo%3E%20virtualNodes%20%3D%20new%20TreeMap%3C%3E()%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%E6%95%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20final%20int%20VIRTUAL_NODE_NUM%20%3D%20100%3B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20ServiceMetaInfo%20select(Map%3CString%2C%20Object%3E%20requestParams%2C%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList)%20%7B%5Cn%20%20%20%20%20%20%20%20int%20size%20%3D%20serviceMetaInfoList.size()%3B%5Cn%20%20%20%20%20%20%20%20if%20(size%20%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if%20(size%20%3D%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20serviceMetaInfoList.get(0)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%E7%8E%AF%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%AF%8F%E6%AC%A1%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E9%83%BD%E4%BC%9A%E9%87%8D%E6%96%B0%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E7%8E%AF%E6%98%AF%E4%B8%BA%E4%BA%86%E5%8F%AF%E4%BB%A5%E5%8F%8A%E6%97%B6%E5%A4%84%E7%90%86%E8%8A%82%E7%82%B9%E7%9A%84%E5%8F%98%E5%8C%96%5Cn%20%20%20%20%20%20%20%20for%20(ServiceMetaInfo%20serviceMetaInfo%20%3A%20serviceMetaInfoList)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20VIRTUAL_NODE_NUM%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20hash%20%3D%20getHash(serviceMetaInfo.getServiceAddress()%20%2B%20%5C%22%23%5C%22%20%2B%20i)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20virtualNodes.put(hash%2C%20serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E8%B0%83%E7%94%A8%E8%AF%B7%E6%B1%82%E7%9A%84hash%E5%80%BC%5Cn%20%20%20%20%20%20%20%20int%20hash%20%3D%20getHash(requestParams)%3B%5Cn%20%20%20%20%20%20%20%20%2F*%E8%BF%99%E9%87%8C%E5%A6%82%E6%9E%9C%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%9B%A0%E4%B8%BArequestParams%E4%BC%A0%E5%85%A5%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF%E8%B0%83%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E5%90%8D%EF%BC%88getMethodName%EF%BC%89%EF%BC%8C%5Cn%20%20%20%20%20%20%20%20%20%20%E6%89%80%E4%BB%A5%E5%AF%B9%E4%BA%8E%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E8%BF%99%E9%87%8C%E8%AE%A1%E7%AE%97%E5%87%BA%E7%9A%84hash%E5%80%BC%E6%80%BB%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E4%BC%9A%E9%80%A0%E6%88%90%E8%B0%83%E7%94%A8%E7%9B%B8%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E6%98%AF%E4%BC%9A%E8%AF%B7%E6%B1%82%E5%88%B0%E7%9B%B8%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9%E4%B8%8A%E9%9D%A2%5Cn%20%20%20%20%20%20%20%20%20%20%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9hash%E7%AE%97%E6%B3%95%20--%E3%80%8B%20gethash%20%E6%9D%A5%E9%80%9A%E8%BF%87%E5%85%B6%E4%BB%96%E4%B8%8D%E5%90%8C%E7%9A%84%E7%89%B9%E5%BE%81%E8%AE%A1%E7%AE%97%E5%87%BAhash%E5%80%BC%EF%BC%8C%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%90%8C%E8%8A%82%E7%82%B9%E9%97%B4%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1*%2F%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%89%E6%8B%A9%E6%9C%80%E6%8E%A5%E8%BF%91%E4%B8%94%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E8%B0%83%E7%94%A8%E8%AF%B7%E6%B1%82%E7%9A%84hash%E5%80%BC%E7%9A%84%E8%99%9A%E6%8B%9F%E8%8A%82%E7%82%B9%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%B0%B1%E8%BF%94%E5%9B%9E%E7%8E%AF%E9%A6%96%E9%83%A8%E7%9A%84%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20Map.Entry%3CInteger%2C%20ServiceMetaInfo%3E%20entry%20%3D%20virtualNodes.ceilingEntry(hash)%3B%5Cn%20%20%20%20%20%20%20%20if(entry%20%3D%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20entry%20%3D%20virtualNodes.firstEntry()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20entry.getValue()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%B8%80%E7%A7%8D%E8%AE%A1%E7%AE%97%E7%BB%99%E5%AE%9A%E5%AF%B9%E8%B1%A1%E7%9A%84hash%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%90%8C%E7%9A%84Hash%E7%AE%97%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20int%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F10%2016%3A23%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20int%20getHash(Object%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20key.hashCode()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YJJIh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h5 data-lake-id="ZS7CS" id="ZS7CS"><span data-lake-id="uf3bd716f" id="uf3bd716f" style="color: rgb(31, 35, 40)">关于一致性Hash负载均衡器：</span></h5><ol list="ua14eaee4"><li fid="u7a607dc8" data-lake-id="ud4fc5c7c" id="ud4fc5c7c"><span data-lake-id="u5fd40c61" id="u5fd40c61" style="color: rgb(31, 35, 40)">根据 </span><code data-lake-id="ue94f2f3c" id="ue94f2f3c"><span data-lake-id="ua7cfb4e7" id="ua7cfb4e7" style="color: rgb(31, 35, 40)">requestParams</span></code><span data-lake-id="ua5db316c" id="ua5db316c" style="color: rgb(31, 35, 40)"> 对象计算 Hash 值，这里只是简单地调用了对象的 hashCode 方法，大家也可以根据需求实现自己的 Hash 算法。</span></li><li fid="u7a607dc8" data-lake-id="u4b914f36" id="u4b914f36"><span data-lake-id="u2399123d" id="u2399123d" style="color: rgb(31, 35, 40)">因为只是简单调用了对象的hashCode方法，导致</span><span data-lake-id="uf86c68f5" id="uf86c68f5" style="color: rgb(31, 35, 40)">这里如果是同一个请求的话，因为requestParams传入的参数是调用的函数方法名（getMethodName），</span></li></ol><p data-lake-id="uef2da5d0" id="uef2da5d0"><span data-lake-id="udb24a6f4" id="udb24a6f4" style="color: rgb(31, 35, 40)">          所以对于同一个方法这里计算出的hash值总是一样的，也就会造成调用相同的方法总是会请求到相同的服务节点上面</span></p><p data-lake-id="ua7a9235b" id="ua7a9235b"><span data-lake-id="u716ddae1" id="u716ddae1" style="color: rgb(31, 35, 40)">          可以通过修改hash算法 --》 gethash 来通过其他不同的特征计算出hash值，来实现不同节点间的负载均衡</span></p><ol list="ua14eaee4" start="3"><li fid="u7a607dc8" data-lake-id="u645a89af" id="u645a89af"><span data-lake-id="u56ed1430" id="u56ed1430" style="color: rgb(31, 35, 40)">每次调用负载均衡器时，都会重新构造 Hash 环，这是为了能够即时处理节点的变化。</span></li></ol><p data-lake-id="u555529cf" id="u555529cf"><br></p><h3 data-lake-id="EfZOd" id="EfZOd"><span data-lake-id="uc21a7d1d" id="uc21a7d1d" style="color: rgba(0, 0, 0, 0.85)">2、支持配置和扩展负载均衡器</span></h3><p data-lake-id="u5bc2710c" id="u5bc2710c"><span data-lake-id="u1796a713" id="u1796a713" style="color: rgb(31, 35, 40)">一个成熟的 RPC 框架可能会支持多个负载均衡器，像序列化器和注册中心一。需求是，让开发者能够填写配置来指定使用的负载均衡器，并且支持自定义负载均衡器，让框架更易用、更利于扩展。</span></p><p data-lake-id="u61083aa7" id="u61083aa7"><span data-lake-id="u31ac6277" id="u31ac6277" style="color: rgb(31, 35, 40)">要实现这点，开发方式和序列化器、注册中心都是一样的，</span><strong><span data-lake-id="u5e346387" id="u5e346387" style="color: rgb(34, 73, 254),rgb(199, 74, 168)">使用工厂创建对象、使用 SPI 动态加载自定义的注册中心</span></strong><span data-lake-id="ub0399c2e" id="ub0399c2e" style="color: rgb(31, 35, 40)">。</span></p><h4 data-lake-id="e2M8Y" id="e2M8Y"><span data-lake-id="u5da99060" id="u5da99060" style="color: rgb(31, 35, 40)">1）负载均衡器常量。</span></h4><p data-lake-id="ucd6042c2" id="ucd6042c2"><span data-lake-id="u28806168" id="u28806168" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="uaa91957e" id="uaa91957e"><span data-lake-id="u7987b41c" id="u7987b41c" style="color: rgb(31, 35, 40)">loadbalancer</span></code><span data-lake-id="u5ab7ed89" id="u5ab7ed89" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="u545238ef" id="u545238ef"><span data-lake-id="ud9413aed" id="ud9413aed" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">LoadBalancerKeys</span><span data-lake-id="uafecca3a" id="uafecca3a" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u962b3d11" id="u962b3d11" style="color: rgb(31, 35, 40)">类，列举所有支持的负载均衡器键名。</span></p><p data-lake-id="u1f26a69f" id="u1f26a69f"><span data-lake-id="u9c766b59" id="u9c766b59" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22LoadBalancerKeys%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E9%94%AE%E5%90%8D%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F15%5Cn%20*%2F%5Cnpublic%20interface%20LoadBalancerKeys%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%BD%AE%E8%AF%A2%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20ROUND_ROBIN%20%3D%20%5C%22roundRobin%5C%22%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%9A%8F%E6%9C%BA%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20RANDOM%20%3D%20%5C%22random%5C%22%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%B8%80%E8%87%B4%E6%80%A7Hash%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20CONSISTENT_HASH%20%3D%20%5C%22consistentHash%5C%22%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22LoadBalancerKeys%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22T8aKM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="ua7Wa" id="ua7Wa"><span data-lake-id="u7f042d9e" id="u7f042d9e" style="color: rgb(31, 35, 40)">2）负载均衡器工厂类</span></h4><p data-lake-id="u479fdbf4" id="u479fdbf4"><strong><span data-lake-id="uc7b2947c" id="uc7b2947c" style="color: rgb(31, 35, 40)">使用工厂模式，支持根据 key 从 SPI 获取负载均衡器对象实例。</span></strong></p><p data-lake-id="u6499b8f5" id="u6499b8f5"><span data-lake-id="ue9cee2a9" id="ue9cee2a9" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="uf538d076" id="uf538d076"><span data-lake-id="uee2fb1ec" id="uee2fb1ec" style="color: rgb(31, 35, 40)">loadbalancer</span></code><span data-lake-id="uda51da7a" id="uda51da7a" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="u64c0adda" id="u64c0adda"><span data-lake-id="ub2b567ba" id="ub2b567ba" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">LoadBalancerFactory</span></code><span data-lake-id="u402f4d1e" id="u402f4d1e" style="color: rgb(31, 35, 40)">类。</span></p><p data-lake-id="ubcd13aae" id="ubcd13aae"><span data-lake-id="u75833130" id="u75833130" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22LoadBalancerFactory%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.spi.SpiLoader%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E5%B7%A5%E5%8E%82%E7%B1%BB%EF%BC%88%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%8C%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F15%5Cn%20*%2F%5Cnpublic%20class%20LoadBalancerFactory%20%7B%5Cn%20%20%20%20static%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8SPI%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E6%89%AB%E6%8F%8F%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20SpiLoader.load(LoadBalancer.class)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%BB%98%E8%AE%A4%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20final%20LoadBalancer%20DEFAULT_LOAD_BALANCER%20%3D%20new%20RoundRobinLoadBalancer()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.loadbalancer.LoadBalancer%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F15%2017%3A25%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20LoadBalancer%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SpiLoader.getInstance(LoadBalancer.class%2C%20key)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22LoadBalancerFactory%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Eramq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="ZwEg2" id="ZwEg2"><span data-lake-id="ud73f6970" id="ud73f6970" style="color: rgb(31, 35, 40)">3）添加配置文件</span></h4><p data-lake-id="u3e8fd30c" id="u3e8fd30c"><span data-lake-id="ua5dc20ca" id="ua5dc20ca" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="ueb74fa8d" id="ueb74fa8d"><span data-lake-id="u2359dbae" id="u2359dbae" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">META-INF</span></code><span data-lake-id="u42798e49" id="u42798e49" style="color: rgb(31, 35, 40)"> 的 </span><code data-lake-id="ue52a6211" id="ue52a6211"><span data-lake-id="u1a089c29" id="u1a089c29" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">rpc/system</span></code><span data-lake-id="uc9bea61a" id="uc9bea61a" style="color: rgb(31, 35, 40)"> 目录下编写负载均衡器接口的 SPI 配置文件，文件名称为 </span><code data-lake-id="ufe7f68a1" id="ufe7f68a1"><span data-lake-id="u4ff19f60" id="u4ff19f60" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">com.yybf.chenrpc.loadbalancer.LoadBalancer</span></code><span data-lake-id="u83aaf0df" id="u83aaf0df" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="u398ea272" id="u398ea272"><span data-lake-id="u04b0dd5c" id="u04b0dd5c" style="color: rgb(31, 35, 40)">如图：</span></p><p data-lake-id="u7897bf40" id="u7897bf40"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713179989700-00b22b59-a5b9-4f40-b5d8-7e62ea9e728e.png%22%2C%22taskId%22%3A%22ua8c56241-3774-4227-b6d6-06ed7144e28%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1550%2C%22height%22%3A277%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A218522%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1550%2C%22originHeight%22%3A277%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%40%20COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%20%E4%B8%89%20%E9%A1%B9%E7%9B%AE%20ROUNDROBIN-COM.YVBF.CHENRPC.LOADBALANCER.ROUNDROBINLOADBALANCER%20RESOURCES%202%20META-INF%20RANDOM-COM.YYBF.CHENRPC.LOADBALANCER.RANDOMLOADBALANCER%20FPC%20CONSISTENTHASHECOM.YYBF.CHENRDC.LOADBALANCER.CONSISTENTHASHLOADBALANCER%20CUSTOM%20SYSTEM%20COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%20COM.YYBF.CHENRPC.REGISTUY.REGISTUY%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20SERVICES%20E%20COM.WYBF.CHENRPC.SERIALIZER.SERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A492%2C%22y%22%3A-1%2C%22width%22%3A365%2C%22height%22%3A22%2C%22text%22%3A%22%40%20COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%22%7D%2C%7B%22x%22%3A350%2C%22y%22%3A1%2C%22width%22%3A27%2C%22height%22%3A19%2C%22text%22%3A%22%E4%B8%89%22%7D%2C%7B%22x%22%3A30%2C%22y%22%3A1%2C%22width%22%3A34%2C%22height%22%3A17%2C%22text%22%3A%22%E9%A1%B9%E7%9B%AE%22%7D%2C%7B%22x%22%3A557%2C%22y%22%3A33%2C%22width%22%3A632%2C%22height%22%3A18%2C%22text%22%3A%22ROUNDROBIN-COM.YVBF.CHENRPC.LOADBALANCER.ROUNDROBINLOADBALANCER%22%7D%2C%7B%22x%22%3A54%2C%22y%22%3A34%2C%22width%22%3A72%2C%22height%22%3A14%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A488%2C%22y%22%3A57%2C%22width%22%3A17%2C%22height%22%3A22%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A58%2C%22width%22%3A75%2C%22height%22%3A15%2C%22text%22%3A%22META-INF%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A61%2C%22width%22%3A554%2C%22height%22%3A19%2C%22text%22%3A%22RANDOM-COM.YYBF.CHENRPC.LOADBALANCER.RANDOMLOADBALANCER%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A85%2C%22width%22%3A29%2C%22height%22%3A14%2C%22text%22%3A%22FPC%22%7D%2C%7B%22x%22%3A556%2C%22y%22%3A90%2C%22width%22%3A713%2C%22height%22%3A16%2C%22text%22%3A%22CONSISTENTHASHECOM.YYBF.CHENRDC.LOADBALANCER.CONSISTENTHASHLOADBALANCER%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A109%2C%22width%22%3A57%2C%22height%22%3A14%2C%22text%22%3A%22CUSTOM%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A134%2C%22width%22%3A57%2C%22height%22%3A13%2C%22text%22%3A%22SYSTEM%22%7D%2C%7B%22x%22%3A120%2C%22y%22%3A158%2C%22width%22%3A353%2C%22height%22%3A19%2C%22text%22%3A%22COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A184%2C%22width%22%3A258%2C%22height%22%3A16%2C%22text%22%3A%22COM.YYBF.CHENRPC.REGISTUY.REGISTUY%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A207%2C%22width%22%3A276%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A233%2C%22width%22%3A62%2C%22height%22%3A16%2C%22text%22%3A%22SERVICES%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A256%2C%22width%22%3A287%2C%22height%22%3A18%2C%22text%22%3A%22E%20COM.WYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2348525d%22%2C%22id%22%3A%22ua73934bb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h4 data-lake-id="DeCFO" id="DeCFO"><span data-lake-id="u2775fda7" id="u2775fda7" style="color: rgb(31, 35, 40)">4）为 RpcConfig 全局配置新增负载均衡器的配置</span></h4><p data-lake-id="u53ca9995" id="u53ca9995"><span data-lake-id="u22f4687f" id="u22f4687f" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20loadBalancer%20%3D%20LoadBalancerKeys.ROUND_ROBIN%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mduiP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="PTfsk" id="PTfsk"><span data-lake-id="ud7791afb" id="ud7791afb" style="color: rgba(0, 0, 0, 0.85)">3、应用负载均衡器</span></h3><p data-lake-id="u45a566c1" id="u45a566c1"><span data-lake-id="u6c0c3092" id="u6c0c3092" style="color: rgb(31, 35, 40)">现在就能够使用负载均衡器了。修改 ServiceProxy 的代码，将 “</span><strong><span style="color: rgb(31, 35, 40)"><del><span data-lake-id="u8cf1c21e" id="u8cf1c21e">固定调用第一个服务节点</span></del></span></strong><span data-lake-id="ubd9a3b36" id="ubd9a3b36" style="color: rgb(31, 35, 40)">” 改为 “</span><strong><span data-lake-id="u53297573" id="u53297573" style="color: rgb(31, 35, 40)">调用负载均衡器获取一个服务节点</span></strong><span data-lake-id="u5cd89333" id="u5cd89333" style="color: rgb(31, 35, 40)">”。</span></p><p data-lake-id="u111ac878" id="u111ac878"><span data-lake-id="u58410da6" id="u58410da6" style="color: rgb(31, 35, 40)">修改后的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22ServiceProxy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20cn.hutool.core.util.IdUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.loadbalancer.LoadBalancer%3B%5Cnimport%20com.yybf.chenrpc.loadbalancer.LoadBalancerFactory%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.protocol.*%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpClient%3B%5Cnimport%20io.vertx.core.Vertx%3B%5Cnimport%20io.vertx.core.buffer.Buffer%3B%5Cnimport%20io.vertx.core.net.NetClient%3B%5Cnimport%20io.vertx.core.net.NetSocket%3B%5Cnimport%20org.objenesis.ObjenesisException%3B%5Cn%5Cnimport%20java.io.IOException%3B%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cnimport%20java.util.concurrent.CompletableFuture%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%20%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89tcp%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%9E%84%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%20%2B%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(rpcConfig.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ServiceProxy%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20serializer.toString())%3B%5Cn%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20%E5%92%8C%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%88SPI%EF%BC%89%E6%9C%BA%E5%88%B6%20%E6%9D%A5%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8EserviceMetaInfo%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8EEtcd%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20LoadBalancer%20loadBalancer%20%3D%20LoadBalancerFactory.getInstance(rpcConfig.getLoadBalancer())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%B0%83%E7%94%A8%E7%9A%84%20%E6%96%B9%E6%B3%95%E5%90%8D%20%E4%BD%9C%E4%B8%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20requestParams%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20requestParams.put(%5C%22methodName%5C%22%2CrpcRequest.getMethodName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20loadBalancer.select(requestParams%2CserviceMetaInfoList)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81TCP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Response%EF%BC%9A%5C%22%20%2B%20rpcResponse)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22ServiceProxy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%7B%22from%22%3A3152%2C%22to%22%3A3174%2C%22background%22%3A%22%232A4200%22%7D%2C%7B%22from%22%3A3174%2C%22to%22%3A3186%2C%22background%22%3A%22transparent%22%7D%2C%7B%22from%22%3A3186%2C%22to%22%3A3276%2C%22background%22%3A%22%232A4200%22%7D%2C%7B%22from%22%3A3276%2C%22to%22%3A3288%2C%22background%22%3A%22transparent%22%7D%2C%7B%22from%22%3A3288%2C%22to%22%3A3309%2C%22background%22%3A%22%232A4200%22%7D%2C%7B%22from%22%3A3309%2C%22to%22%3A3321%2C%22background%22%3A%22transparent%22%7D%2C%7B%22from%22%3A3321%2C%22to%22%3A3374%2C%22background%22%3A%22%232A4200%22%7D%2C%7B%22from%22%3A3374%2C%22to%22%3A3386%2C%22background%22%3A%22transparent%22%7D%2C%7B%22from%22%3A3386%2C%22to%22%3A3446%2C%22background%22%3A%22%232A4200%22%7D%2C%7B%22from%22%3A3446%2C%22to%22%3A3458%2C%22background%22%3A%22transparent%22%7D%2C%7B%22from%22%3A3458%2C%22to%22%3A3555%2C%22background%22%3A%22%232A4200%22%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DUGCp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uae37d06e" id="uae37d06e"><span data-lake-id="uf9a8b256" id="uf9a8b256" style="color: rgb(31, 35, 40)">上述代码中，给负载均衡器传入了一个 requestParams HashMap，并且将请求方法名作为参数放到了 Map 中。如果使用的是一致性 Hash 算法，那么会根据 requestParams 计算 Hash 值，调用相同方法的请求 Hash 值肯定相同，所以总会请求到同一个服务器节点上。</span></p><h2 data-lake-id="qmzBi" id="qmzBi"><span data-lake-id="u8bfd7531" id="u8bfd7531" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><h3 data-lake-id="NH8Zi" id="NH8Zi"><span data-lake-id="uae6308cb" id="uae6308cb" style="color: rgba(0, 0, 0, 0.85)">1、测试负载均衡算法</span></h3><p data-lake-id="uf9783b60" id="uf9783b60"><span data-lake-id="uc64bfa92" id="uc64bfa92" style="color: rgb(31, 35, 40)">首先编写单元测试类 </span><code data-lake-id="ua69c1418" id="ua69c1418"><span data-lake-id="uf7f4bf31" id="uf7f4bf31" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">LoadBalancerTest</span></code><span data-lake-id="ue3bc98d4" id="ue3bc98d4" style="color: rgb(31, 35, 40)">，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22LoadBalancerTest%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.loadbalancer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20org.junit.Assert%3B%5Cnimport%20org.junit.Test%3B%5Cn%5Cnimport%20java.util.Arrays%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E6%B5%8B%E8%AF%95%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%5Cn%20*%20%40date%202024%2F4%2F15-17%3A52%5Cn%20*%2F%5Cnpublic%20class%20LoadBalancerTest%20%7B%5Cn%5Cn%20%20%20%20final%20LoadBalancer%20sameLoadBalancer%20%3D%20new%20ConsistentHashLoadBalancer()%3B%5Cn%5Cn%20%20%20%20final%20LoadBalancer%20loadBalancer%20%3D%20new%20RoundRobinLoadBalancer()%3B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20select()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20Map%3CString%2CObject%3E%20requestParams%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20requestParams.put(%5C%22methodName%5C%22%2C%5C%22ppap%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo1%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo1.setServiceName(%5C%22111%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo1.setServiceVersion(%5C%221.0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo1.setServiceHost(%5C%22localHost%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo1.setServicePort(11451)%3B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo2%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo2.setServiceName(%5C%22222%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo2.setServiceVersion(%5C%221.0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo2.setServiceHost(%5C%22chen.com%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo2.setServicePort(10241)%3B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo3%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo3.setServiceName(%5C%22333%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo3.setServiceVersion(%5C%221.0%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo3.setServiceHost(%5C%22baidu.com%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo3.setServicePort(11344)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20Arrays.asList(serviceMetaInfo1%2CserviceMetaInfo2%2CserviceMetaInfo3)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%9E%E7%BB%AD%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20int%20times%20%3D%2010%3B%5Cn%20%20%20%20%20%20%20%20for%20(int%20i%20%3D%200%3B%20i%20%3C%20times%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20loadBalancer.select(requestParams%2CserviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Assert.assertNotNull(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%2F%2F%20%20%20%20%20%20%20%20serviceMetaInfo%20%3D%20loadBalancer.select(requestParams%2C%20serviceMetaInfoList)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20System.out.println(serviceMetaInfo)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Assert.assertNotNull(serviceMetaInfo)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20serviceMetaInfo%20%3D%20loadBalancer.select(requestParams%2C%20serviceMetaInfoList)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20System.out.println(serviceMetaInfo)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20Assert.assertNotNull(serviceMetaInfo)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22LoadBalancerTest%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22fontSize%22%3A14%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SaG6N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8c1fbc12" id="u8c1fbc12"><span data-lake-id="u798c8b3d" id="u798c8b3d" style="color: rgb(31, 35, 40)">可以替换 loadBalancer 对象为不同的负载均衡器实现类，然后观察效果。</span></p><p data-lake-id="ua38e3f93" id="ua38e3f93" style="text-align: center"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713180239632-cdf6a004-c1b3-4e0b-a09b-d3b664fb7c7e.png%22%2C%22taskId%22%3A%22ub195832b-1875-487f-b12d-ce9b105dc26%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22356ffd5754a91253f683606ff7958e7.png%22%2C%22size%22%3A477558%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1207%2C%22originHeight%22%3A540%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%20ARRAYS.ASLIST(SERVICEMETAINFO1%2CSERVICEMETAINFO2%2CSERVICEMETAINFO3)%3B%20SERVICEMETAINFOLIST%20%20LIST%3CSERVICEMETAINFO%3E%2018%209%20%E8%BF%9E%E7%BB%AD%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%200%20INT%20TIMES%20-%2010%3B%201%202%20FOR%20(INT%20I%20-%200%3B%20I%20%3C%20TIMES%3B%20I%2B%2B)%7B%20T(REQUESTPARAMS%2CSERVICEMETAINFOLIST)%3B%20SAMELOADBALANCER.SELECT(REG%20%20SERVICEMETAINFO%20SERVICEMETAINFO%2054%20SYSTEM.OUT.PRINTLN(SERVICEMETAINFO)%20ASSERT.ASSERTNOTNULL(SERVICEMETAINFO)%3B%20SERVICEMETAINFO%20%3B%20LOADBALANCER.SELECT(REQUESTPARAMS%2C%20SERVICEMETAINFOLIST)%3B%20%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-24%E6%AF%AB%E7%A7%92%20C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%201124%E5%AE%A4%E7%A7%92%2024%E6%AF%AB%E7%A7%92%20%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%20SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU.COM%2C%20COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%20SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU.COM%2C%205%20IDU.COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%20SERVICEMETAINFO(SERVICENAME-3333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU%2CCOM%2C%20SERY%20SENVACENGETSLNFO(SERNLCRARE-333%2C%20SERVERSION-L.BAIDEFARIACERORT-BAIDD%2CCON%2C%20SERVICERICERORT-ANNACEGROUP%20SERNICERALNTOLSERVICELAME3333%2C%20SERVICERSION%3BI-D%2C%20SERVICERVICERSION%2C%20SERVICERVICERVICERARTAROUPEDEFAUT%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A471%2C%22y%22%3A6%2C%22width%22%3A525%2C%22height%22%3A16%2C%22text%22%3A%22%20ARRAYS.ASLIST(SERVICEMETAINFO1%2CSERVICEMETAINFO2%2CSERVICEMETAINFO3)%3B%22%7D%2C%7B%22x%22%3A295%2C%22y%22%3A6%2C%22width%22%3A155%2C%22height%22%3A15%2C%22text%22%3A%22SERVICEMETAINFOLIST%22%7D%2C%7B%22x%22%3A120%2C%22y%22%3A7%2C%22width%22%3A166%2C%22height%22%3A15%2C%22text%22%3A%22%20LIST%3CSERVICEMETAINFO%3E%22%7D%2C%7B%22x%22%3A0%2C%22y%22%3A7%2C%22width%22%3A14%2C%22height%22%3A13%2C%22text%22%3A%2218%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A30%2C%22width%22%3A12%2C%22height%22%3A13%2C%22text%22%3A%229%22%7D%2C%7B%22x%22%3A140%2C%22y%22%3A48%2C%22width%22%3A97%2C%22height%22%3A19%2C%22text%22%3A%22%E8%BF%9E%E7%BB%AD%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A2%2C%22y%22%3A51%2C%22width%22%3A11%2C%22height%22%3A14%2C%22text%22%3A%220%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A72%2C%22width%22%3A128%2C%22height%22%3A17%2C%22text%22%3A%22INT%20TIMES%20-%2010%3B%22%7D%2C%7B%22x%22%3A2%2C%22y%22%3A73%2C%22width%22%3A11%2C%22height%22%3A15%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A2%2C%22y%22%3A93%2C%22width%22%3A11%2C%22height%22%3A18%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A94%2C%22width%22%3A258%2C%22height%22%3A17%2C%22text%22%3A%22FOR%20(INT%20I%20-%200%3B%20I%20%3C%20TIMES%3B%20I%2B%2B)%7B%22%7D%2C%7B%22x%22%3A611%2C%22y%22%3A113%2C%22width%22%3A277%2C%22height%22%3A20%2C%22text%22%3A%22T(REQUESTPARAMS%2CSERVICEMETAINFOLIST)%3B%22%7D%2C%7B%22x%22%3A427%2C%22y%22%3A117%2C%22width%22%3A210%2C%22height%22%3A14%2C%22text%22%3A%22SAMELOADBALANCER.SELECT(REG%22%7D%2C%7B%22x%22%3A151%2C%22y%22%3A116%2C%22width%22%3A252%2C%22height%22%3A16%2C%22text%22%3A%22%20SERVICEMETAINFO%20SERVICEMETAINFO%22%7D%2C%7B%22x%22%3A0%2C%22y%22%3A132%2C%22width%22%3A14%2C%22height%22%3A23%2C%22text%22%3A%2254%22%7D%2C%7B%22x%22%3A150%2C%22y%22%3A139%2C%22width%22%3A278%2C%22height%22%3A17%2C%22text%22%3A%22SYSTEM.OUT.PRINTLN(SERVICEMETAINFO)%22%7D%2C%7B%22x%22%3A150%2C%22y%22%3A161%2C%22width%22%3A298%2C%22height%22%3A16%2C%22text%22%3A%22ASSERT.ASSERTNOTNULL(SERVICEMETAINFO)%3B%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A205%2C%22width%22%3A593%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO%20%3B%20LOADBALANCER.SELECT(REQUESTPARAMS%2C%20SERVICEMETAINFOLIST)%3B%22%7D%2C%7B%22x%22%3A80%2C%22y%22%3A256%2C%22width%22%3A203%2C%22height%22%3A17%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-24%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A283%2C%22width%22%3A415%2C%22height%22%3A16%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A284%2C%22width%22%3A42%2C%22height%22%3A14%2C%22text%22%3A%221124%E5%AE%A4%E7%A7%92%22%7D%2C%7B%22x%22%3A25%2C%22y%22%3A305%2C%22width%22%3A33%2C%22height%22%3A13%2C%22text%22%3A%2224%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A680%2C%22y%22%3A306%2C%22width%22%3A324%2C%22height%22%3A16%2C%22text%22%3A%22%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A306%2C%22width%22%3A589%2C%22height%22%3A15%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU.COM%2C%22%7D%2C%7B%22x%22%3A656%2C%22y%22%3A371%2C%22width%22%3A349%2C%22height%22%3A17%2C%22text%22%3A%22COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A372%2C%22width%22%3A620%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU.COM%2C%205%22%7D%2C%7B%22x%22%3A619%2C%22y%22%3A393%2C%22width%22%3A385%2C%22height%22%3A17%2C%22text%22%3A%22IDU.COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A394%2C%22width%22%3A635%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-3333%2C%20SERVICEVERSION-1.0%2C%20SERVICEHOST-BAIDU%2CCOM%2C%20SERY%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A438%2C%22width%22%3A927%2C%22height%22%3A18%2C%22text%22%3A%22SENVACENGETSLNFO(SERNLCRARE-333%2C%20SERVERSION-L.BAIDEFARIACERORT-BAIDD%2CCON%2C%20SERVICERICERORT-ANNACEGROUP%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A459%2C%22width%22%3A929%2C%22height%22%3A16%2C%22text%22%3A%22SERNICERALNTOLSERVICELAME3333%2C%20SERVICERSION%3BI-D%2C%20SERVICERVICERSION%2C%20SERVICERVICERVICERARTAROUPEDEFAUT%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E4%BD%BF%E7%94%A8%E4%B8%80%E8%87%B4%E6%80%A7Hash%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23404955%22%2C%22id%22%3A%22uac15f332%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ue5bd86af" id="ue5bd86af" style="text-align: center"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713180270853-ed68c80e-89de-4160-a50b-7b6c9e9fb598.png%22%2C%22taskId%22%3A%22uc563534a-ccbf-4fac-9b8b-a53d14c11cb%22%2C%22clientId%22%3A%22u38823ef4-ee22-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22b734efc12fd74862dd8711a517f16d1.png%22%2C%22size%22%3A470624%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1105%2C%22originHeight%22%3A601%2C%22ratio%22%3A1.25%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22HSONASTANAS'COWTP%20NAWAL%20SERVICEMETAINFO3.SETSERVICEPORT(11344)%3B%20LISTSTSERVICETAINFO%3E%20SERVICERVICETAINFOLIST%20-%20ARRAYS%2CASLIST%20SERVICEHETALNFOL%2CSERVICETALNFO2%2CSERVICEH)%20%E8%BF%9E%E7%BB%AD%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%201%2F%20TIMES%2010%3B%20INT%20(INT%20I%20-%200%3B%20I%20%3C%20TIMES%3B%20I%2B%2B)%20FOR%20SERVICEMETAINFO%20SERVICEMETAINFO%20-%20LOADBALANCER.SELECT(REQUESTPARANS%2CSERVICEMETAINFOLIST)%3B%20SYSTEM.OUT.PRINTLN(SERVICEMETAINFO)%3B%20ASSERT.ASSERTNOTNULL(SERVICEMETAINFO)%3B%20SERVICEMETAINFO%20%3B%20LOADBALANCER.SELECT(REQUESTPARAMS%2C%20SERVICEMETAINFOLIST)%3B%20%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-5%E6%AF%AB%E7%A7%92%20%E7%A7%92%20C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%201.0%2C%20SERVICEHOST-LOCALHOST%2C%20SERVICEPORT-11451%2C%20SERVICEGROUP-DEFAULT)%20SERVICEMETAINFO(SERVICENAME-111%2C%20SERVICEVERSION-1.0%2C%20SONVICERETALNFO(SERVICELANE-22%2C%20SENVACERSION-1%2CD%2C%20SENVICERORT-CHEN.COM%2CCOM%2C%20SENVICERARTEGROUPEFAULT)%20SERVICEMETAINFO(SERVICENAME-111%2C%20SERVICEVERSION-1.0%2C%20SER%20%2C%20SERVICEHOST-LOCALHOST%2C%20SERVICEPORT-11451%2C%20SERVICEGROUP-DEFAULT)%20SERVICELETALNFO(SERVICELLAME322%2C%20SERVICEL%2C%20SENVICERVICEFART-CHEN.CON%2CCON%2CCON%2C%20SERVICERT-19241CEGROUP)%20.0%2C%20SERVICEHOST-BAIDU.COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%20SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%209%2C%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A92%2C%22y%22%3A-2%2C%22width%22%3A237%2C%22height%22%3A12%2C%22text%22%3A%22HSONASTANAS'COWTP%20NAWAL%22%7D%2C%7B%22x%22%3A71%2C%22y%22%3A14%2C%22width%22%3A311%2C%22height%22%3A18%2C%22text%22%3A%22SERVICEMETAINFO3.SETSERVICEPORT(11344)%3B%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A57%2C%22width%22%3A873%2C%22height%22%3A18%2C%22text%22%3A%22LISTSTSERVICETAINFO%3E%20SERVICERVICETAINFOLIST%20-%20ARRAYS%2CASLIST%20SERVICEHETALNFOL%2CSERVICETALNFO2%2CSERVICEH)%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A101%2C%22width%22%3A96%2C%22height%22%3A17%2C%22text%22%3A%22%E8%BF%9E%E7%BB%AD%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A103%2C%22width%22%3A30%2C%22height%22%3A16%2C%22text%22%3A%221%2F%22%7D%2C%7B%22x%22%3A106%2C%22y%22%3A126%2C%22width%22%3A89%2C%22height%22%3A15%2C%22text%22%3A%22TIMES%2010%3B%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A126%2C%22width%22%3A26%2C%22height%22%3A13%2C%22text%22%3A%22INT%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A146%2C%22width%22%3A215%2C%22height%22%3A16%2C%22text%22%3A%22(INT%20I%20-%200%3B%20I%20%3C%20TIMES%3B%20I%2B%2B)%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A148%2C%22width%22%3A26%2C%22height%22%3A13%2C%22text%22%3A%22FOR%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A168%2C%22width%22%3A705%2C%22height%22%3A18%2C%22text%22%3A%22SERVICEMETAINFO%20SERVICEMETAINFO%20-%20LOADBALANCER.SELECT(REQUESTPARANS%2CSERVICEMETAINFOLIST)%3B%22%7D%2C%7B%22x%22%3A106%2C%22y%22%3A191%2C%22width%22%3A278%2C%22height%22%3A15%2C%22text%22%3A%22SYSTEM.OUT.PRINTLN(SERVICEMETAINFO)%3B%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A213%2C%22width%22%3A301%2C%22height%22%3A15%2C%22text%22%3A%22ASSERT.ASSERTNOTNULL(SERVICEMETAINFO)%3B%22%7D%2C%7B%22x%22%3A89%2C%22y%22%3A257%2C%22width%22%3A592%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO%20%3B%20LOADBALANCER.SELECT(REQUESTPARAMS%2C%20SERVICEMETAINFOLIST)%3B%22%7D%2C%7B%22x%22%3A34%2C%22y%22%3A308%2C%22width%22%3A190%2C%22height%22%3A16%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-5%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A335%2C%22width%22%3A12%2C%22height%22%3A16%2C%22text%22%3A%22%E7%A7%92%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A335%2C%22width%22%3A412%2C%22height%22%3A17%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%22%7D%2C%7B%22x%22%3A422%2C%22y%22%3A422%2C%22width%22%3A533%2C%22height%22%3A19%2C%22text%22%3A%221.0%2C%20SERVICEHOST-LOCALHOST%2C%20SERVICEPORT-11451%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A424%2C%22width%22%3A416%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-111%2C%20SERVICEVERSION-1.0%2C%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A444%2C%22width%22%3A922%2C%22height%22%3A20%2C%22text%22%3A%22SONVICERETALNFO(SERVICELANE-22%2C%20SENVACERSION-1%2CD%2C%20SENVICERORT-CHEN.COM%2CCOM%2C%20SENVICERARTEGROUPEFAULT)%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A488%2C%22width%22%3A439%2C%22height%22%3A17%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-111%2C%20SERVICEVERSION-1.0%2C%20SER%22%7D%2C%7B%22x%22%3A445%2C%22y%22%3A489%2C%22width%22%3A511%2C%22height%22%3A17%2C%22text%22%3A%22%2C%20SERVICEHOST-LOCALHOST%2C%20SERVICEPORT-11451%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A509%2C%22width%22%3A923%2C%22height%22%3A19%2C%22text%22%3A%22SERVICELETALNFO(SERVICELLAME322%2C%20SERVICEL%2C%20SENVICERVICEFART-CHEN.CON%2CCON%2CCON%2C%20SERVICERT-19241CEGROUP)%22%7D%2C%7B%22x%22%3A430%2C%22y%22%3A533%2C%22width%22%3A527%2C%22height%22%3A17%2C%22text%22%3A%22.0%2C%20SERVICEHOST-BAIDU.COM%2C%20SERVICEPORT-11344%2C%20SERVICEGROUP-DEFAULT)%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A534%2C%22width%22%3A423%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEMETAINFO(SERVICENAME-333%2C%20SERVICEVERSION-1.0%2C%209%2C%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E4%BD%BF%E7%94%A8%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23414a56%22%2C%22id%22%3A%22ub9bda243%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h3 data-lake-id="UKzIE" id="UKzIE"><span data-lake-id="u6b149cbf" id="u6b149cbf" style="color: rgba(0, 0, 0, 0.85)">2、测试负载均衡调用</span></h3><p data-lake-id="ue26ac4f7" id="ue26ac4f7"><span data-lake-id="u8c546315" id="u8c546315" style="color: rgb(31, 35, 40)">首先在不同的端口启动 2 个服务提供者，然后启动服务消费者项目，通过 Debug 或者控制台输出来观察每次请求的节点地址。</span></p><h2 data-lake-id="h3RBK" id="h3RBK"><span data-lake-id="u7dcbab16" id="u7dcbab16" style="color: rgba(0, 0, 0, 0.85)">五、扩展</span></h2><p data-lake-id="u9f946a20" id="u9f946a20"><span data-lake-id="u602f6a47" id="u602f6a47" style="color: rgb(31, 35, 40)">1）实现更多不同算法的负载均衡器</span></p><p data-lake-id="u4d9df1e5" id="u4d9df1e5"><span data-lake-id="u4861b109" id="u4861b109" style="color: rgb(31, 35, 40)">参考思路：比如最少活跃数负载均衡器，选择当前正在处理请求的数量最少的服务提供者。</span></p><p data-lake-id="ub4ee52ff" id="ub4ee52ff"><span data-lake-id="u66129b2c" id="u66129b2c" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u89ad8a7f" id="u89ad8a7f"><span data-lake-id="ua7ab78bd" id="ua7ab78bd" style="color: rgb(31, 35, 40)">2）自定义一致性 Hash 算法中的 Hash 算法</span></p><p data-lake-id="u28d862ed" id="u28d862ed"><span data-lake-id="u6457b7bd" id="u6457b7bd" style="color: rgb(31, 35, 40)">参考思路：比如根据请求客户端的 IP 地址来计算 Hash 值，保证同 IP 的请求发送给相同的服务提供者。</span></p><p data-lake-id="ub4187dfe" id="ub4187dfe"><span data-lake-id="uc931a0cb" id="uc931a0cb" style="color: rgb(31, 35, 40)">​</span><br></p><h1 data-lake-id="Qk2zA" id="Qk2zA"><span data-lake-id="u228f4901" id="u228f4901" style="color: rgb(31, 35, 40)">九、重试机制</span></h1><h2 data-lake-id="BzSGN" id="BzSGN"><span data-lake-id="ub255432e" id="ub255432e" style="color: rgba(0, 0, 0, 0.85)">一、需求分析</span></h2><p data-lake-id="ufb85516c" id="ufb85516c"><span data-lake-id="ucf3c8c25" id="ucf3c8c25" style="color: rgb(31, 35, 40)">目前，如果使用 RPC 框架的服务消费者调用接口失败，就会直接报错。</span></p><p data-lake-id="u6c01d251" id="u6c01d251"><span data-lake-id="u4e23658c" id="u4e23658c" style="color: rgb(31, 35, 40)">调用接口失败可能有很多原因，有时可能是服务提供者返回了错误，但有时可能只是网络不稳定或服务提供者重启等临时性问题。这种情况下，我们可能更希望服务消费者拥有自动重试的能力，提高系统的可用性。</span></p><p data-lake-id="u482d1a4d" id="u482d1a4d"><span data-lake-id="u6d875662" id="u6d875662" style="color: rgb(31, 35, 40)">本节就实现服务消费端的重试机制。</span></p><p data-lake-id="uf82140cb" id="uf82140cb"><span data-lake-id="ue70d7c8e" id="ue70d7c8e" style="color: rgb(31, 35, 40)">​</span><br></p><h2 data-lake-id="WQAin" id="WQAin"><span data-lake-id="ua0d3abd9" id="ua0d3abd9" style="color: rgba(0, 0, 0, 0.85)">二、设计方案</span></h2><h3 data-lake-id="trmzY" id="trmzY"><span data-lake-id="uba7c6dde" id="uba7c6dde" style="color: rgba(0, 0, 0, 0.85)">重试机制</span></h3><p data-lake-id="u17e224fe" id="u17e224fe"><span data-lake-id="u11f5fd64" id="u11f5fd64" style="color: rgb(31, 35, 40)">重试的概念相信大家都能理解，不必多说，就是 “不行再来” 呗。</span></p><p data-lake-id="ucb75ccd4" id="ucb75ccd4"><span data-lake-id="u7da7a715" id="u7da7a715" style="color: rgb(31, 35, 40)">我们需要掌握的是 “如何设计重试机制”，重试机制的核心是</span><span data-lake-id="u9b29783d" id="u9b29783d" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u72370d0c" id="u72370d0c" style="color: rgb(31, 35, 40)">重试策略</span></strong><span data-lake-id="u3903e834" id="u3903e834" style="color: rgb(31, 35, 40)">，一般来说，包含以下几个考虑点：</span></p><ol list="u0f0ed233"><li fid="u76c3a51e" data-lake-id="u874fd048" id="u874fd048"><span data-lake-id="uc4827bbe" id="uc4827bbe" style="color: rgb(31, 35, 40)">什么时候、什么条件下重试？</span></li><li fid="u76c3a51e" data-lake-id="u12ee9fa5" id="u12ee9fa5"><span data-lake-id="u439cc95c" id="u439cc95c" style="color: rgb(31, 35, 40)">重试时间（确定下一次的重试时间）</span></li><li fid="u76c3a51e" data-lake-id="uae656a47" id="uae656a47"><span data-lake-id="ue6dc55a5" id="ue6dc55a5" style="color: rgb(31, 35, 40)">什么时候、什么条件下停止重试？</span></li><li fid="u76c3a51e" data-lake-id="u9078a24d" id="u9078a24d"><span data-lake-id="u7fe0a5db" id="u7fe0a5db" style="color: rgb(31, 35, 40)">重试后要做什么？</span></li></ol><h4 data-lake-id="ASw3W" id="ASw3W"><span data-lake-id="uc85f4779" id="uc85f4779" style="color: rgba(0, 0, 0, 0.85)">重试条件</span></h4><p data-lake-id="u163ee0ba" id="u163ee0ba"><span data-lake-id="ua238c036" id="ua238c036" style="color: rgb(31, 35, 40)">首先是什么时候、什么条件下重试？</span></p><p data-lake-id="u5d5e43d4" id="u5d5e43d4"><span data-lake-id="u84f3e69f" id="u84f3e69f" style="color: rgb(31, 35, 40)">这个比较好思考，如果我们希望提高系统的可用性，当由于网络等异常情况发生时，触发重试。</span></p><h4 data-lake-id="bi6UL" id="bi6UL"><span data-lake-id="u58528b59" id="u58528b59" style="color: rgba(0, 0, 0, 0.85)">重试时间</span></h4><p data-lake-id="u225ac77d" id="u225ac77d"><span data-lake-id="u42491e51" id="u42491e51" style="color: rgb(31, 35, 40)">重试时间（也叫重试等待）的策略就比较丰富了，可能会用到一些算法，主流的重试时间算法有：</span></p><p data-lake-id="u4e54796c" id="u4e54796c"><span data-lake-id="ufb5adac2" id="ufb5adac2" style="color: rgb(31, 35, 40)">1）固定重试间隔（Fixed Retry Interval）：在每次重试之间使用固定的时间间隔。</span></p><p data-lake-id="u938446e0" id="u938446e0"><span data-lake-id="ud3ee64fe" id="ud3ee64fe" style="color: rgb(31, 35, 40)">比如近 5 次重试的时间点如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%221s%5Cn2s%5Cn3s%5Cn4s%5Cn5s%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OU0tA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ud8eb8fce" id="ud8eb8fce"><span data-lake-id="u4031c71f" id="u4031c71f" style="color: rgb(31, 35, 40)">2）指数退避重试（Exponential Backoff Retry）：在每次失败后，重试的时间间隔会以指数级增加，以避免请求过于密集。</span></p><p data-lake-id="u510d53ae" id="u510d53ae"><span data-lake-id="uda6ba7dd" id="uda6ba7dd" style="color: rgb(31, 35, 40)">比如近 5 次重试的时间点如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%221s%5Cn3s%EF%BC%88%E5%A4%9A%E7%AD%89%202s%EF%BC%89%5Cn7s%EF%BC%88%E5%A4%9A%E7%AD%89%204s%EF%BC%89%5Cn15s%EF%BC%88%E5%A4%9A%E7%AD%89%208s%EF%BC%89%5Cn31s%EF%BC%88%E5%A4%9A%E7%AD%89%2016s%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Bpnus%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u3fa8e9f0" id="u3fa8e9f0"><span data-lake-id="u0be2ab05" id="u0be2ab05" style="color: rgb(31, 35, 40)">3）随机延迟重试（Random Delay Retry）：在每次重试之间使用随机的时间间隔，以避免请求的同时发生。</span></p><p data-lake-id="uef4b46d5" id="uef4b46d5"><span data-lake-id="uea6b0335" id="uea6b0335" style="color: rgb(31, 35, 40)">4）可变延迟重试（Variable Delay Retry）：这种策略更 “高级” 了，根据先前重试的成功或失败情况，动态调整下一次重试的延迟时间。比如，根据前一次的响应时间调整下一次重试的等待时间。</span></p><p data-lake-id="u81fadfc4" id="u81fadfc4"><span data-lake-id="u83decae7" id="u83decae7" style="color: rgb(31, 35, 40)">值得一提的是，以上的策略是可以组合使用的，一定要根据具体情况和需求灵活调整。比如可以先使用指数退避重试策略，如果连续多次重试失败，则切换到固定重试间隔策略。</span></p><h4 data-lake-id="KDOf4" id="KDOf4"><span data-lake-id="u6e30d318" id="u6e30d318" style="color: rgba(0, 0, 0, 0.85)">停止重试</span></h4><p data-lake-id="ud204da26" id="ud204da26"><span data-lake-id="uce6b8b61" id="uce6b8b61" style="color: rgb(31, 35, 40)">一般来说，重试次数是有上限的，否则随着报错的增多，系统同时发生的重试也会越来越多，造成雪崩。</span></p><p data-lake-id="ubca8d516" id="ubca8d516"><span data-lake-id="ua98a9029" id="ua98a9029" style="color: rgb(31, 35, 40)">主流的停止重试策略有：</span></p><p data-lake-id="ue57b87c7" id="ue57b87c7"><span data-lake-id="u1079f441" id="u1079f441" style="color: rgb(31, 35, 40)">1）最大尝试次数：一般重试当达到最大次数时不再重试。</span></p><p data-lake-id="u60454dc0" id="u60454dc0"><span data-lake-id="udb05b606" id="udb05b606" style="color: rgb(31, 35, 40)">2）超时停止：重试达到最大时间的时候，停止重试。</span></p><h4 data-lake-id="kNlSV" id="kNlSV"><span data-lake-id="ufac01f3e" id="ufac01f3e" style="color: rgba(0, 0, 0, 0.85)">重试工作</span></h4><p data-lake-id="u347cf08b" id="u347cf08b"><span data-lake-id="u2e805556" id="u2e805556" style="color: rgb(31, 35, 40)">最后一点是重试后要做什么事情？一般来说就是重复执行原本要做的操作，比如发送请求失败了，那就再发一次请求。</span></p><p data-lake-id="u4e3ac684" id="u4e3ac684"><span data-lake-id="uc3d04664" id="uc3d04664" style="color: rgb(31, 35, 40)">需要注意的是，当重试次数超过上限时，往往还要进行其他的操作，比如：</span></p><ol list="u845b8ab3"><li fid="ubca8bb1a" data-lake-id="u84370d23" id="u84370d23"><span data-lake-id="ubf757632" id="ubf757632" style="color: rgb(31, 35, 40)">通知告警：让开发者人工介入</span></li><li fid="ubca8bb1a" data-lake-id="u6c738926" id="u6c738926"><span data-lake-id="uf6839c6d" id="uf6839c6d" style="color: rgb(31, 35, 40)">降级容错：改为调用其他接口、或者执行其他操作</span></li></ol><p data-lake-id="u843d62b3" id="u843d62b3"><span data-lake-id="ub7e2b3f2" id="ub7e2b3f2" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="EoEZN" id="EoEZN"><span data-lake-id="u10883a1f" id="u10883a1f" style="color: rgba(0, 0, 0, 0.85)">重试方案设计</span></h3><p data-lake-id="u3e6e5641" id="u3e6e5641"><span data-lake-id="u8f19c17e" id="u8f19c17e" style="color: rgb(31, 35, 40)">回归到 RPC 框架，消费者发起调用的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22try%20%7B%5Cn%20%20%20%20%2F%2F%20rpc%20%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20RpcResponse%20rpcResponse%20%3D%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%3B%5Cn%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Gena1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6fc3c92e" id="u6fc3c92e"><span data-lake-id="uafe3f15d" id="uafe3f15d" style="color: rgb(31, 35, 40)">完全可以将 </span><code data-lake-id="ue23c1a8a" id="ue23c1a8a"><span data-lake-id="ud5dda47c" id="ud5dda47c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxTcpClient.doRequest</span></code><span data-lake-id="u051d138d" id="u051d138d" style="color: rgb(31, 35, 40)"> 封装为一个可重试的任务，如果请求失败（重试条件），系统就会自动按照重试策略再次发起请求，不用开发者关心。</span></p><p data-lake-id="u0a366a94" id="u0a366a94"><span data-lake-id="ubc0b70dd" id="ubc0b70dd" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u59960251" id="u59960251"><span data-lake-id="u2c058aba" id="u2c058aba" style="color: rgb(31, 35, 40)">对于重试算法，就选择主流的重试算法好了，Java 中可以使用 </span><strong><span data-lake-id="u2f5461b7" id="u2f5461b7" style="color: rgb(31, 35, 40)">Guava-Retrying</span></strong><span data-lake-id="u6dad5745" id="u6dad5745" style="color: rgb(31, 35, 40)"> 库轻松实现多种不同的重试算法，非常简单。</span></p><p data-lake-id="uc2aeaa77" id="uc2aeaa77"><span data-lake-id="uafff906f" id="uafff906f" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ucd69bf54" id="ucd69bf54"><span data-lake-id="u5f4bd2f2" id="u5f4bd2f2" style="color: rgb(31, 35, 40)">鱼皮之前专门写过一篇 Guava-Retrying 的教程文章：</span><card type="inline" name="bookmarkInline" value="data:%7B%22mode%22%3A%22title%22%2C%22src%22%3A%22https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1752086%22%2C%22text%22%3A%22https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1752086%22%2C%22detail%22%3A%7B%22icon%22%3A%22https%3A%2F%2Fcloud.tencent.com%2Ffavicon.ico%22%2C%22image%22%3A%22https%3A%2F%2Fcloudcache.tencentcs.com%2Fopen_proj%2Fproj_qcloud_v2%2Fgateway%2Fshareicons%2Fcloud.png%22%2C%22title%22%3A%22%E6%8A%80%E6%9C%AF%20%7C%20%E4%BD%BF%E7%94%A8%20guava-retrying%20%E5%AE%9E%E7%8E%B0%E7%81%B5%E6%B4%BB%E7%9A%84%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E7%A4%BE%E5%8C%BA-%E8%85%BE%E8%AE%AF%E4%BA%91%22%2C%22belong%22%3A%22%E4%BD%BF%E7%94%A8%20guava-retrying%20%E5%AE%9E%E7%8E%B0%E7%81%B5%E6%B4%BB%E7%9A%84%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%BC%80%E5%8F%91%E8%80%85%E7%A4%BE%E5%8C%BA-%E8%85%BE%E8%AE%AF%E4%BA%91%22%2C%22belong_url%22%3Anull%2C%22desc%22%3A%22%E6%88%91%E4%BB%AC%E7%9A%84%E5%90%8E%E7%AB%AF%E4%B8%9A%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%E3%80%81%E7%BD%91%E7%BB%9C%E6%8B%A5%E5%A1%9E%E8%B6%85%E6%97%B6%E3%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E3%80%81%E7%B3%BB%E7%BB%9F%E9%94%99%E8%AF%AF%E7%AD%89%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5%EF%BC%8C%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E9%87%8D%E8%AF%95%E6%93%8D%E4%BD%9C%E3%80%82%E4%BD%86%E6%9F%90%E4%BA%9B%E5%9C%BA%E6%99%AF%E4%B8%8B%E6%88%91%E4%BB%AC%E5%AF%B9%E9%87%8D%E8%AF%95%E6%9C%89%E7%89%B9%E6%AE%8A%E8%A6%81%E6%B1%82%EF%BC%8C%E6%AF%94%E5%A6%82%E5%BB%B6%E8%BF%9F%E9%87%8D%E8%AF%95%E3%80%81%E9%99%8D%E9%A2%91%E9%87%8D%E8%AF%95%E7%AD%89%EF%BC%8C%E6%AD%A4%E6%97%B6%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E9%87%8D%E8%AF%95%E4%BB%A3%E7%A0%81%E4%BC%9A%E5%BE%88%E7%B9%81%E7%90%90%EF%BC%8C%E5%9C%A8%20Java%20%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20guava-retrying%20%E5%B8%AE%E6%88%91%E4%BB%AC%E5%AE%9E%E7%8E%B0%E7%81%B5%E6%B4%BB%E7%9A%84%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%E3%80%82%22%2C%22url%22%3A%22https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1752086%22%2C%22extra%22%3A%7B%7D%2C%22_serializer%22%3A%22web.editor_link_detail%22%7D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PPDXE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D" style="color: rgb(31, 35, 40)"></card></p><p data-lake-id="u9f14dbf4" id="u9f14dbf4"><span data-lake-id="u76543da4" id="u76543da4" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u30ded8d3" id="u30ded8d3"><span data-lake-id="u8d07d7e3" id="u8d07d7e3" style="color: rgb(31, 35, 40)">和序列化器、注册中心、负载均衡器一样，重试策略本身也使用</span><strong><span data-lake-id="u6bd872bc" id="u6bd872bc" style="color: rgb(31, 35, 40)"> SPI + 工厂</span></strong><span data-lake-id="u0603b4df" id="u0603b4df" style="color: rgb(31, 35, 40)">的方式，允许开发者动态配置和扩展自己的重试策略。</span></p><p data-lake-id="u236301dc" id="u236301dc"><span data-lake-id="u757d663b" id="u757d663b" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="uafc927e7" id="uafc927e7"><span data-lake-id="u33993edc" id="u33993edc" style="color: rgb(31, 35, 40)">最后，如果重试超过一定次数，就停止重试，并且抛出异常。在下节中，还会使用重试失败后的另一种选择 —— 容错机制。</span></p><h2 data-lake-id="SbXy8" id="SbXy8"><span data-lake-id="u500c40ab" id="u500c40ab" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><h3 data-lake-id="fCFav" id="fCFav"><span data-lake-id="u635ba964" id="u635ba964" style="color: rgba(0, 0, 0, 0.85)">1、多种重试策略实现</span></h3><p data-lake-id="ubb50eb0b" id="ubb50eb0b"><span data-lake-id="u59462ea6" id="u59462ea6" style="color: rgb(31, 35, 40)">下面实现 2 种最基本的重试策略：</span><strong><span data-lake-id="u25bc921a" id="u25bc921a" style="color: rgb(31, 35, 40)">不重试</span></strong><span data-lake-id="u09256df3" id="u09256df3" style="color: rgb(31, 35, 40)">、</span><strong><span data-lake-id="u8d4b854e" id="u8d4b854e" style="color: rgb(31, 35, 40)">固定重试间隔</span></strong><span data-lake-id="u2a919736" id="u2a919736" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="u5cf4b18f" id="u5cf4b18f"><span data-lake-id="u69b89c47" id="u69b89c47" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ud9929731" id="ud9929731"><span data-lake-id="u922ab306" id="u922ab306" style="color: rgb(31, 35, 40)">在 RPC 项目中新建</span><code data-lake-id="ueed97066" id="ueed97066"><span data-lake-id="uf38fd065" id="uf38fd065" style="color: rgb(31, 35, 40)">​</span><span data-lake-id="u8dcbed12" id="u8dcbed12" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.retry</span></code><span data-lake-id="uadd0156a" id="uadd0156a" style="color: rgb(31, 35, 40)"> 包，将所有重试相关的代码放到该包下。</span></p><h4 data-lake-id="EaDe2" id="EaDe2"><span data-lake-id="u38d7c6de" id="u38d7c6de" style="color: rgb(31, 35, 40)">1）编写重试策略通用接口。</span></h4><p data-lake-id="u7c8eb6fe" id="u7c8eb6fe"><span data-lake-id="u821f25ee" id="u821f25ee" style="color: rgb(31, 35, 40)">提供一个重试方法，接受一个具体的任务参数，可以使用 </span><code data-lake-id="u2a3c70e7" id="u2a3c70e7"><span data-lake-id="u214b8622" id="u214b8622" style="color: rgb(31, 35, 40)">Callable</span></code><span data-lake-id="ufaf7a377" id="ufaf7a377" style="color: rgb(31, 35, 40)">类代表一个任务。</span></p><p data-lake-id="ufda7913b" id="ufda7913b"><span data-lake-id="ua3408a66" id="ua3408a66" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22RetryStrategy%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cn%5Cnimport%20java.util.concurrent.Callable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F17%5Cn%20*%2F%5Cnpublic%20interface%20RetryStrategy%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20callable%3A%20%E4%BB%A3%E8%A1%A8%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E9%87%8D%E8%AF%95%E7%9A%84%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.model.RpcResponse%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F17%2016%3A30%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20RpcResponse%20doRetry(Callable%3CRpcResponse%3E%20callable)%20throws%20Exception%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22RetryStrategy%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AXiyv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u1a81496e" id="u1a81496e" open="true" class="lake-collapse"><summary data-lake-id="u3c92acc8" id="u3c92acc8" class="lake-summary"><br></summary><p data-lake-id="u66124b14" id="u66124b14"><span data-lake-id="u12c78b88" id="u12c78b88">todo: 搞懂callable是一个什么类？</span></p></details><h4 data-lake-id="iIJpu" id="iIJpu"><span data-lake-id="u521096c0" id="u521096c0" style="color: rgb(31, 35, 40)">2）引入 Guava-Retrying 重试库</span></h4><p data-lake-id="u186a1e5f" id="u186a1e5f"><span data-lake-id="uc29e8b42" id="uc29e8b42" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C!--%20https%3A%2F%2Fgithub.com%2Frholder%2Fguava-retrying%20--%3E%5Cn%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.github.rholder%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Eguava-retrying%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E2.0.0%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22fontSize%22%3A14%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UAk3z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="ZdDNn" id="ZdDNn"><span data-lake-id="u4d88129b" id="u4d88129b" style="color: rgb(31, 35, 40)">3）不重试策略实现。</span></h4><p data-lake-id="u6a1a9217" id="u6a1a9217"><span data-lake-id="uca675f05" id="uca675f05" style="color: rgb(31, 35, 40)">就是直接执行一次任务，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cn%5Cnimport%20java.util.concurrent.Callable%3B%5Cn%5Cn%2F**%5Cn%20*%20%E4%B8%8D%E9%87%8D%E8%AF%95%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F17%5Cn%20*%2F%5Cnpublic%20class%20NoRetryStrategy%20implements%20RetryStrategy%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doRetry(Callable%3CRpcResponse%3E%20callable)%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20return%20callable.call()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hlkw5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="ac01k" id="ac01k"><span data-lake-id="uaf4bd920" id="uaf4bd920" style="color: rgb(31, 35, 40)">4）固定重试间隔策略实现。</span></h4><p data-lake-id="ub2428261" id="ub2428261"><span data-lake-id="u4c8f22fb" id="u4c8f22fb" style="color: rgb(31, 35, 40)">使用 Guava-Retrying 提供的 </span><code data-lake-id="u30789f42" id="u30789f42"><span data-lake-id="ua4bc6d87" id="ua4bc6d87" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RetryerBuilder</span></code><span data-lake-id="ub2ccc8c4" id="ub2ccc8c4" style="color: rgb(31, 35, 40)"> 能够很方便地指定重试条件、重试等待策略、重试停止策略、重试工作等。</span></p><p data-lake-id="u32b034b6" id="u32b034b6"><span data-lake-id="u75ab4122" id="u75ab4122" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cnimport%20com.github.rholder.retry.*%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.util.concurrent.Callable%3B%5Cnimport%20java.util.concurrent.ExecutionException%3B%5Cnimport%20java.util.concurrent.TimeUnit%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E7%9A%84%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F17%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20FixedIntervalRetryStrategy%20implements%20RetryStrategy%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%E6%9D%A1%E4%BB%B6%EF%BC%9A%E4%BD%BF%E7%94%A8%20retryIfExceptionOfType%20%E6%96%B9%E6%B3%95%E6%8C%87%E5%AE%9A%E5%BD%93%E5%87%BA%E7%8E%B0%20Exception%20%E5%BC%82%E5%B8%B8%E6%97%B6%E9%87%8D%E8%AF%95.%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%E7%AD%89%E5%BE%85%E7%AD%96%E7%95%A5%EF%BC%9A%E4%BD%BF%E7%94%A8%20withWaitStrategy%20%E6%96%B9%E6%B3%95%E6%8C%87%E5%AE%9A%E7%AD%96%E7%95%A5%EF%BC%8C%E9%80%89%E6%8B%A9%20fixedWait%20%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E7%AD%96%E7%95%A5%E3%80%82%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%E5%81%9C%E6%AD%A2%E7%AD%96%E7%95%A5%EF%BC%9A%E4%BD%BF%E7%94%A8%20withStopStrategy%20%E6%96%B9%E6%B3%95%E6%8C%87%E5%AE%9A%E7%AD%96%E7%95%A5%EF%BC%8C%E9%80%89%E6%8B%A9%20stopAfterAttempt%20%E8%B6%85%E8%BF%87%E6%9C%80%E5%A4%A7%E9%87%8D%E8%AF%95%E6%AC%A1%E6%95%B0%E5%81%9C%E6%AD%A2%E3%80%82%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%E5%B7%A5%E4%BD%9C%EF%BC%9A%E4%BD%BF%E7%94%A8%20withRetryListener%20%E7%9B%91%E5%90%AC%E9%87%8D%E8%AF%95%EF%BC%8C%E6%AF%8F%E6%AC%A1%E9%87%8D%E8%AF%95%E6%97%B6%EF%BC%8C%E9%99%A4%E4%BA%86%E5%86%8D%E6%AC%A1%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E5%A4%96%EF%BC%8C%E8%BF%98%E8%83%BD%E5%A4%9F%E6%89%93%E5%8D%B0%E5%BD%93%E5%89%8D%E7%9A%84%E9%87%8D%E8%AF%95%E6%AC%A1%E6%95%B0%E3%80%82%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20callable%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.model.RpcResponse%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F17%2016%3A41%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doRetry(Callable%3CRpcResponse%3E%20callable)%20throws%20Exception%20%7B%5Cn%20%20%20%20%20%20%20%20Retryer%3CRpcResponse%3E%20retryer%20%3D%20RetryerBuilder.%3CRpcResponse%3EnewBuilder()%5Cn%20%20%20%20%20%20%20%20.retryIfExceptionOfType(Exception.class)%5Cn%20%20%20%20%20%20%20%20.withWaitStrategy(WaitStrategies.fixedWait(3L%2C%20TimeUnit.SECONDS))%5Cn%20%20%20%20%20%20%20%20.withStopStrategy(StopStrategies.stopAfterAttempt(3))%5Cn%20%20%20%20%20%20%20%20.withRetryListener(new%20RetryListener()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%40Override%5Cn%20%20%20%20%20%20%20%20%20%20%20%20public%20%3CV%3E%20void%20onRetry(Attempt%3CV%3E%20attempt)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E9%87%8D%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%EF%BC%9A%7B%7D%5C%22%2C%20attempt.getAttemptNumber())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20return%20retryer.call(callable)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GMYnb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="ua013e1c5" id="ua013e1c5" open="true" class="lake-collapse"><summary data-lake-id="u1a62c03c" id="u1a62c03c" class="lake-summary"><span data-lake-id="u8ed293ae" id="u8ed293ae" style="color: rgb(31, 35, 40)">上述代码中，重试策略如下：</span></summary><ul list="u9c5f72b2"><li fid="u5778d9e6" data-lake-id="u2476b8ea" id="u2476b8ea"><span data-lake-id="u217cd0f6" id="u217cd0f6" style="color: rgb(31, 35, 40)">重试条件：使用 retryIfExceptionOfType 方法指定当出现 Exception 异常时重试。</span></li><li fid="u5778d9e6" data-lake-id="ue0ff8803" id="ue0ff8803"><span data-lake-id="u75c829ee" id="u75c829ee" style="color: rgb(31, 35, 40)">重试等待策略：使用 withWaitStrategy 方法指定策略，选择 fixedWait 固定时间间隔策略。</span></li><li fid="u5778d9e6" data-lake-id="u81f49c26" id="u81f49c26"><span data-lake-id="u6495ffc7" id="u6495ffc7" style="color: rgb(31, 35, 40)">重试停止策略：使用 withStopStrategy 方法指定策略，选择 stopAfterAttempt 超过最大重试次数停止。</span></li><li fid="u5778d9e6" data-lake-id="uf5b27263" id="uf5b27263"><span data-lake-id="u7c1120cd" id="u7c1120cd" style="color: rgb(31, 35, 40)">重试工作：使用 withRetryListener 监听重试，每次重试时，除了再次执行任务外，还能够打印当前的重试次数。</span></li></ul></details><h4 data-lake-id="XtLAu" id="XtLAu"><span data-lake-id="ua8fd09c9" id="ua8fd09c9" style="color: rgb(31, 35, 40)">5）测试 </span></h4><p data-lake-id="u163dfc63" id="u163dfc63"><span data-lake-id="u9ef23d79" id="u9ef23d79" style="color: rgb(31, 35, 40)">可以简单编写一个单元测试，来验证不同的重试策略，这是最好的学习方式。</span></p><p data-lake-id="u10b65a5f" id="u10b65a5f"><span data-lake-id="u6bc617ff" id="u6bc617ff" style="color: rgb(31, 35, 40)">单元测试代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20org.junit.Test%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%5Cn%20*%20%40date%202024%2F4%2F17-16%3A42%5Cn%20*%2F%5Cnpublic%20class%20RetryStrategyTest%20%7B%5Cn%5Cn%20%20%20%20RetryStrategy%20retryStrategy1%20%3D%20new%20NoRetryStrategy()%3B%5Cn%20%20%20%20RetryStrategy%20retryStrategy2%20%3D%20new%20FixedIntervalRetryStrategy()%3B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20doRetry()%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20retryStrategy2.doRetry(()%20-%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%EF%BC%8C%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%AF%95%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(rpcResponse)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22%E9%87%8D%E8%AF%95%E5%A4%9A%E6%AC%A1%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bOQkU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u4ae52d4f" id="u4ae52d4f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713952727754-e74c411b-f2b5-405e-a3b5-2f46e72f4461.png%22%2C%22taskId%22%3A%22u84067a4d-bb89-4eb3-a4ce-0f5300be5e8%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1335%2C%22height%22%3A532%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A505518%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1335%2C%22originHeight%22%3A532%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%20%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%2017%3A58%3A02.748%20%5BMAINL%20INFO%20COM%2CYYBF.CHENRPC%2CFAULT.RETRY.FIXEDINTERVALRETRYSTRATERY%20--%20%20%E7%9B%B4%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3B%20%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%2017%3A58%3A05.753%20(MAIN)%20INFO%20COM.YBF.CHENRPC%2CFAULT.RETRY.FIXEDINTERVAIRETRYSTRYSTRATEGY%20--%20%E9%80%9A%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3A%202%20%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%2017%3A58%3A98.75A%20%5BMAIN%5D%20INFO%20COM.YBF.CHENRPC.FAULT.RETRY.FIXEDINTERVALRETRYSTRYSTRATEGY%20-%20%E7%9B%B4%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3A%20%E9%87%8D%E8%AF%95%E5%A4%9A%E6%AC%A1%E5%A4%B1%E8%B4%A5%20TION%20CREATE%20BREAKPOINT%20%3A%20RETRYING%20FAILED%20TO%20COMPLETE%20SUCCESSFULLY%20AFTER%203%20ATTEMPTS.%20COM.GITHUB.RHOLDER.RETRY.RETRYEXCEPTION%20CR%20.RHOLDER.RETRY.RETRYER.CALL(RETRYER.JAVA%3A174)%20COM.GITHUB%20AT%20AT%20COM.YYBF%20HENRPC%2CFAULT.RETRY.FIXEDINTERVALRETRYSTRATEGY%20DORETRY(EIXEDINTERVALRETRYSTRATERYSTRATERY-JAVA%3BAA%20%E7%94%B0%20(CHENRPC.FAULT.RETRY.RETRYSTRATEGYTEST.DORETRY(RETRYSTRATEBYTEST.JAVA%3A21)%20%3C27%20%E4%B8%AA%E5%86%85%E9%83%A8%E8%A1%8C)%20AT%20COM.YYBF.%20%3AJAVA.LANG.RUNTIMEEXCEPTION%20CREATEBREAKPOINT%3A%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%2C%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%AF%95%E5%A4%B1%E8%B4%A5%20CAUSED%20BY%3A%20J%20AT%20COM.YYBF%2CCHENRPC.FAULT.RETRY.RETRYSTRYSTRATEBYTEST.LAMBDASDORETRYSO(SETRYSTRATERYTEST.JAVA%3B23)%20-RITHUB.RHOLDER.RETRY.ATTEMPTTIMELIMITERSSNOATTEMPTTIMELIMELIMIT.CALL(ATTEMPTTIMELIMITERS%2C%20JAVA%3A78%20AT%20COM.GITH%20AT%20COM.GITHUB.RHOLDER.RETRY.RETRYER.CALL(RETRYER.JAVA%3A160)%2029%20MORE%20%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%2C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA0%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A16%2C%22y%22%3A10%2C%22width%22%3A517%2C%22height%22%3A22%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%22%7D%2C%7B%22x%22%3A17%2C%22y%22%3A36%2C%22width%22%3A74%2C%22height%22%3A22%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A64%2C%22width%22%3A961%2C%22height%22%3A19%2C%22text%22%3A%2217%3A58%3A02.748%20%5BMAINL%20INFO%20COM%2CYYBF.CHENRPC%2CFAULT.RETRY.FIXEDINTERVALRETRYSTRATERY%20--%20%20%E7%9B%B4%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3B%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A92%2C%22width%22%3A75%2C%22height%22%3A19%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A120%2C%22width%22%3A960%2C%22height%22%3A20%2C%22text%22%3A%2217%3A58%3A05.753%20(MAIN)%20INFO%20COM.YBF.CHENRPC%2CFAULT.RETRY.FIXEDINTERVAIRETRYSTRYSTRATEGY%20--%20%E9%80%9A%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3A%202%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A146%2C%22width%22%3A73%2C%22height%22%3A19%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E9%87%8D%E8%AF%95%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A173%2C%22width%22%3A956%2C%22height%22%3A23%2C%22text%22%3A%2217%3A58%3A98.75A%20%5BMAIN%5D%20INFO%20COM.YBF.CHENRPC.FAULT.RETRY.FIXEDINTERVALRETRYSTRYSTRATEGY%20-%20%E7%9B%B4%E8%AF%95%E6%AC%A1%E6%95%B0%E4%B8%BA%3A%22%7D%2C%7B%22x%22%3A21%2C%22y%22%3A201%2C%22width%22%3A107%2C%22height%22%3A20%2C%22text%22%3A%22%E9%87%8D%E8%AF%95%E5%A4%9A%E6%AC%A1%E5%A4%B1%E8%B4%A5%22%7D%2C%7B%22x%22%3A384%2C%22y%22%3A223%2C%22width%22%3A804%2C%22height%22%3A34%2C%22text%22%3A%22TION%20CREATE%20BREAKPOINT%20%3A%20RETRYING%20FAILED%20TO%20COMPLETE%20SUCCESSFULLY%20AFTER%203%20ATTEMPTS.%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A231%2C%22width%22%3A409%2C%22height%22%3A20%2C%22text%22%3A%22COM.GITHUB.RHOLDER.RETRY.RETRYEXCEPTION%20CR%22%7D%2C%7B%22x%22%3A201%2C%22y%22%3A257%2C%22width%22%3A437%2C%22height%22%3A23%2C%22text%22%3A%22.RHOLDER.RETRY.RETRYER.CALL(RETRYER.JAVA%3A174)%22%7D%2C%7B%22x%22%3A91%2C%22y%22%3A258%2C%22width%22%3A99%2C%22height%22%3A20%2C%22text%22%3A%22COM.GITHUB%22%7D%2C%7B%22x%22%3A59%2C%22y%22%3A260%2C%22width%22%3A22%2C%22height%22%3A17%2C%22text%22%3A%22AT%22%7D%2C%7B%22x%22%3A58%2C%22y%22%3A286%2C%22width%22%3A23%2C%22height%22%3A18%2C%22text%22%3A%22AT%22%7D%2C%7B%22x%22%3A90%2C%22y%22%3A285%2C%22width%22%3A81%2C%22height%22%3A20%2C%22text%22%3A%22COM.YYBF%22%7D%2C%7B%22x%22%3A196%2C%22y%22%3A285%2C%22width%22%3A872%2C%22height%22%3A20%2C%22text%22%3A%22HENRPC%2CFAULT.RETRY.FIXEDINTERVALRETRYSTRATEGY%20DORETRY(EIXEDINTERVALRETRYSTRATERYSTRATERY-JAVA%3BAA%22%7D%2C%7B%22x%22%3A2%2C%22y%22%3A309%2C%22width%22%3A20%2C%22height%22%3A22%2C%22text%22%3A%22%E7%94%B0%22%7D%2C%7B%22x%22%3A185%2C%22y%22%3A312%2C%22width%22%3A837%2C%22height%22%3A20%2C%22text%22%3A%22(CHENRPC.FAULT.RETRY.RETRYSTRATEGYTEST.DORETRY(RETRYSTRATEBYTEST.JAVA%3A21)%20%3C27%20%E4%B8%AA%E5%86%85%E9%83%A8%E8%A1%8C)%22%7D%2C%7B%22x%22%3A58%2C%22y%22%3A312%2C%22width%22%3A115%2C%22height%22%3A20%2C%22text%22%3A%22AT%20COM.YYBF.%22%7D%2C%7B%22x%22%3A124%2C%22y%22%3A335%2C%22width%22%3A676%2C%22height%22%3A28%2C%22text%22%3A%22%3AJAVA.LANG.RUNTIMEEXCEPTION%20CREATEBREAKPOINT%3A%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%2C%E6%A8%A1%E6%8B%9F%E9%87%8D%E8%AF%95%E5%A4%B1%E8%B4%A5%22%7D%2C%7B%22x%22%3A18%2C%22y%22%3A341%2C%22width%22%3A120%2C%22height%22%3A21%2C%22text%22%3A%22CAUSED%20BY%3A%20J%22%7D%2C%7B%22x%22%3A59%2C%22y%22%3A368%2C%22width%22%3A924%2C%22height%22%3A19%2C%22text%22%3A%22AT%20COM.YYBF%2CCHENRPC.FAULT.RETRY.RETRYSTRYSTRATEBYTEST.LAMBDASDORETRYSO(SETRYSTRATERYTEST.JAVA%3B23)%22%7D%2C%7B%22x%22%3A129%2C%22y%22%3A395%2C%22width%22%3A918%2C%22height%22%3A20%2C%22text%22%3A%22-RITHUB.RHOLDER.RETRY.ATTEMPTTIMELIMITERSSNOATTEMPTTIMELIMELIMIT.CALL(ATTEMPTTIMELIMITERS%2C%20JAVA%3A78%22%7D%2C%7B%22x%22%3A59%2C%22y%22%3A396%2C%22width%22%3A104%2C%22height%22%3A16%2C%22text%22%3A%22AT%20COM.GITH%22%7D%2C%7B%22x%22%3A59%2C%22y%22%3A423%2C%22width%22%3A577%2C%22height%22%3A20%2C%22text%22%3A%22AT%20COM.GITHUB.RHOLDER.RETRY.RETRYER.CALL(RETRYER.JAVA%3A160)%22%7D%2C%7B%22x%22%3A102%2C%22y%22%3A453%2C%22width%22%3A68%2C%22height%22%3A13%2C%22text%22%3A%2229%20MORE%22%7D%2C%7B%22x%22%3A20%2C%22y%22%3A503%2C%22width%22%3A220%2C%22height%22%3A22%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E5%B7%B2%E7%BB%93%E6%9D%9F%2C%E9%80%80%E5%87%BA%E4%BB%A3%E7%A0%81%E4%B8%BA0%22%7D%5D%2C%22showTitle%22%3Atrue%2C%22title%22%3A%22%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E6%B5%8B%E8%AF%95%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23404954%22%2C%22id%22%3A%22uc64c4cbc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h3 data-lake-id="MdwVI" id="MdwVI"><span data-lake-id="u16a9d77a" id="u16a9d77a" style="color: rgba(0, 0, 0, 0.85)">2、支持配置和扩展重试策略</span></h3><p data-lake-id="ua7c91a78" id="ua7c91a78"><span data-lake-id="u1b25a36e" id="u1b25a36e" style="color: rgb(31, 35, 40)">一个成熟的 RPC 框架可能会支持多种不同的重试策略，像序列化器、注册中心、负载均衡器一样，我们的需求是，让开发者能够填写配置来指定使用的重试策略，并且支持自定义重试策略，让框架更易用、更利于扩展。</span></p><p data-lake-id="u628d081a" id="u628d081a"><span data-lake-id="u09897785" id="u09897785" style="color: rgb(31, 35, 40)">要实现这点，开发方式和序列化器、注册中心、负载均衡器都是一样的，都可以</span><strong><span data-lake-id="ue17e64a1" id="ue17e64a1" style="color: rgb(31, 35, 40)">使用工厂创建对象、使用 SPI 动态加载自定义</span></strong><span data-lake-id="u825e886e" id="u825e886e" style="color: rgb(31, 35, 40)">的注册中心。</span></p><h4 data-lake-id="L7Jj4" id="L7Jj4"><span data-lake-id="uf1dbf339" id="uf1dbf339" style="color: rgb(31, 35, 40)">1）重试策略常量。</span></h4><p data-lake-id="u6cd7b7bd" id="u6cd7b7bd"><span data-lake-id="uaa14d923" id="uaa14d923" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="u5392b36f" id="u5392b36f"><span data-lake-id="u8aea346b" id="u8aea346b" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.retry</span></code><span data-lake-id="u07ccf69f" id="u07ccf69f" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="ue504ca39" id="ue504ca39"><span data-lake-id="u7404b98a" id="u7404b98a" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RetryStrategyKeys</span><span data-lake-id="u90905fc5" id="u90905fc5" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u5a8cb0c6" id="u5a8cb0c6" style="color: rgb(31, 35, 40)">类，列举所有支持的重试策略键名。</span></p><p data-lake-id="uc5f0ac75" id="uc5f0ac75"><span data-lake-id="u4c84073e" id="u4c84073e" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%E9%94%AE%E5%90%8D%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F17%5Cn%20*%2F%5Cnpublic%20interface%20RetryStrategyKeys%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E4%B8%8D%E9%87%8D%E8%AF%95%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20NO%20%3D%20%5C%22no%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%9B%BA%E5%AE%9A%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20FIXED_INTERVAL%20%3D%20%5C%22fixedInterval%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22JJu1l%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="xkF7l" id="xkF7l"><span data-lake-id="u896e2720" id="u896e2720" style="color: rgb(31, 35, 40)">2）创建工厂类</span></h4><p data-lake-id="u545e6257" id="u545e6257"><span data-lake-id="u3029f81c" id="u3029f81c" style="color: rgb(31, 35, 40)">使用工厂模式，支持根据 key 从 SPI 获取重试策略对象实例。</span></p><p data-lake-id="uef83a2a0" id="uef83a2a0"><span data-lake-id="u6b27acd7" id="u6b27acd7" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="u14f5199d" id="u14f5199d"><span data-lake-id="ub88408ba" id="ub88408ba" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.retry</span></code><span data-lake-id="u893e2155" id="u893e2155" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="ua44594a7" id="ua44594a7"><span data-lake-id="ue0de1cd6" id="ue0de1cd6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RetryStrategyFactory</span></code><span data-lake-id="u032142db" id="u032142db" style="color: rgb(31, 35, 40)"> 类，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.retry%3B%5Cn%5Cnimport%20com.yybf.chenrpc.spi.SpiLoader%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E9%87%8D%E8%AF%95%E5%99%A8%E5%AF%B9%E8%B1%A1%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F17%5Cn%20*%2F%5Cnpublic%20class%20RetryStrategyFactory%20%7B%5Cn%5Cn%20%20%20%20static%20%7B%5Cn%20%20%20%20%20%20%20%20SpiLoader.load(RetryStrategy.class)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E9%87%8D%E8%AF%95%E5%99%A8%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.fault.retry.RetryStrategy%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F17%2017%3A17%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20RetryStrategy%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SpiLoader.getInstance(RetryStrategy.class%2C%20key)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22q5J2U%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="X8B7z" id="X8B7z"><span data-lake-id="uf6018751" id="uf6018751" style="color: rgb(31, 35, 40)">3）编写配置文件</span></h4><p data-lake-id="u95568a47" id="u95568a47"><span data-lake-id="u5461c1e6" id="u5461c1e6" style="color: rgb(31, 35, 40)">在 </span><span data-lake-id="ubc51319e" id="ubc51319e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">META-INF</span><span data-lake-id="ud202ca63" id="ud202ca63" style="color: rgb(31, 35, 40)"> 的 </span><span data-lake-id="u8e24f2df" id="u8e24f2df" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">rpc/system</span><span data-lake-id="u06ebe93a" id="u06ebe93a" style="color: rgb(31, 35, 40)"> 目录下编写重试策略接口的 SPI 配置文件，文件名称为 </span><span data-lake-id="u0e9e915f" id="u0e9e915f" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">com.yupi.yurpc.fault.retry.RetryStrategy</span><span data-lake-id="uf4e6f7a0" id="uf4e6f7a0" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="u5fd75686" id="u5fd75686"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713953086568-cdaaa7b7-90d6-4261-bdf9-c4ff26abb82d.png%22%2C%22taskId%22%3A%22u2569b6c5-437d-471f-8958-7e5efe493b6%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1666%2C%22height%22%3A335%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A274022%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1666%2C%22originHeight%22%3A335%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22COM.YYBI.CHENRPC.FAULT.RETRYSTRYSTRATEGY%20%E7%A7%BB%E9%99%A4%E5%85%B3%E8%81%94%20%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%20RESOURCES%20META-INF%20NO-COM.YYBF.CHENRPC.FAULT.RETRY.NORETRYSTRATEGY%20FIXEDINTERVAL-COM.YYBF.CHENRPC.FAULT.RETRY.FIXEDINTERVALRETRYSTRATEGY%20CUSTOM%20SYSTEM%20COM.YYBF.CHENRPC.FAULT.RETRY.RETRYSTRATEGY%20COM.YYBF.CHENRPC.FAULT.TOLERANT.TOLERANTSTRAT%20COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20SERVICES%20COM.WYBF.CHENRPC.SERIALIZER.SERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A517%2C%22y%22%3A-1%2C%22width%22%3A321%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBI.CHENRPC.FAULT.RETRYSTRYSTRATEGY%22%7D%2C%7B%22x%22%3A1568%2C%22y%22%3A30%2C%22width%22%3A65%2C%22height%22%3A18%2C%22text%22%3A%22%E7%A7%BB%E9%99%A4%E5%85%B3%E8%81%94%22%7D%2C%7B%22x%22%3A499%2C%22y%22%3A30%2C%22width%22%3A212%2C%22height%22%3A19%2C%22text%22%3A%22%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%22%7D%2C%7B%22x%22%3A68%2C%22y%22%3A32%2C%22width%22%3A69%2C%22height%22%3A14%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A88%2C%22y%22%3A55%2C%22width%22%3A76%2C%22height%22%3A16%2C%22text%22%3A%22META-INF%22%7D%2C%7B%22x%22%3A558%2C%22y%22%3A61%2C%22width%22%3A477%2C%22height%22%3A25%2C%22text%22%3A%22NO-COM.YYBF.CHENRPC.FAULT.RETRY.NORETRYSTRATEGY%22%7D%2C%7B%22x%22%3A559%2C%22y%22%3A89%2C%22width%22%3A692%2C%22height%22%3A22%2C%22text%22%3A%22FIXEDINTERVAL-COM.YYBF.CHENRPC.FAULT.RETRY.FIXEDINTERVALRETRYSTRATEGY%22%7D%2C%7B%22x%22%3A130%2C%22y%22%3A107%2C%22width%22%3A59%2C%22height%22%3A13%2C%22text%22%3A%22CUSTOM%22%7D%2C%7B%22x%22%3A132%2C%22y%22%3A133%2C%22width%22%3A57%2C%22height%22%3A14%2C%22text%22%3A%22SYSTEM%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A156%2C%22width%22%3A310%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.FAULT.RETRY.RETRYSTRATEGY%22%7D%2C%7B%22x%22%3A157%2C%22y%22%3A180%2C%22width%22%3A330%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.FAULT.TOLERANT.TOLERANTSTRAT%22%7D%2C%7B%22x%22%3A159%2C%22y%22%3A204%2C%22width%22%3A327%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCER%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A229%2C%22width%22%3A259%2C%22height%22%3A20%2C%22text%22%3A%22COM.YYBF.CHENRPC.REGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A158%2C%22y%22%3A255%2C%22width%22%3A270%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A109%2C%22y%22%3A280%2C%22width%22%3A61%2C%22height%22%3A17%2C%22text%22%3A%22SERVICES%22%7D%2C%7B%22x%22%3A132%2C%22y%22%3A305%2C%22width%22%3A273%2C%22height%22%3A17%2C%22text%22%3A%22COM.WYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2347505c%22%2C%22id%22%3A%22u7582341f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22no%3Dcom.yybf.chenrpc.fault.retry.NoRetryStrategy%5CnfixedInterval%3Dcom.yybf.chenrpc.fault.retry.FixedIntervalRetryStrategy%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22W6Peo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="CQmT5" id="CQmT5"><span data-lake-id="ue77ca352" id="ue77ca352" style="color: rgb(31, 35, 40)">4）为 RpcConfig 全局配置新增重试策略的配置</span></h4><p data-lake-id="uf955065c" id="uf955065c"><span data-lake-id="ua9a1abe4" id="ua9a1abe4" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20retryStrategy%20%3D%20RetryStrategyKeys.NO%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a9Lw2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1538a144" id="u1538a144"><span data-lake-id="uea82597b" id="uea82597b" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="GAws7" id="GAws7"><span data-lake-id="u8bf5b7de" id="u8bf5b7de" style="color: rgba(0, 0, 0, 0.85)">3、应用重试功能</span></h3><p data-lake-id="u04921759" id="u04921759"><span data-lake-id="u1602f4f2" id="u1602f4f2" style="color: rgb(31, 35, 40)">现在，就能够使用重试功能了。修改 ServiceProxy 的代码，从工厂中获取重试器，并且将请求代码封装为一个 Callable 接口，作为重试器的参数，调用重试器即可。</span></p><p data-lake-id="u7c747156" id="u7c747156"><span data-lake-id="u541dd29b" id="u541dd29b" style="color: rgb(31, 35, 40)">修改的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E4%BD%BF%E7%94%A8%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%5CnRetryStrategy%20retryStrategy%20%3D%20RetryStrategyFactory.getInstance(rpcConfig.getRetryStrategy())%3B%5CnRpcResponse%20rpcResponse%20%3D%20retryStrategy.doRetry(()%20-%3E%5Cn%20%20%20%20%20%20%20%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PqgdU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u8f68d5e8" id="u8f68d5e8"><span data-lake-id="ub8018d6a" id="ub8018d6a" style="color: rgb(31, 35, 40)">上述代码中，使用 Lambda 表达式将 </span><code data-lake-id="ue68c677c" id="ue68c677c"><span data-lake-id="u859e5370" id="u859e5370" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">VertxTcpClient.doRequest</span></code><span data-lake-id="u6dc71d78" id="u6dc71d78" style="color: rgb(31, 35, 40)"> 封装为了一个匿名函数，简化了代码。</span></p><p data-lake-id="u1d25aa08" id="u1d25aa08"><span data-lake-id="uf0920c22" id="uf0920c22" style="color: rgb(31, 35, 40)">修改后的 ServiceProxy 的完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%20%40throws%20Throwable%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(RpcApplication.getRpcConfig().getSerializer())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E9%80%A0%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.build()%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20LoadBalancer%20loadBalancer%20%3D%20LoadBalancerFactory.getInstance(rpcConfig.getLoadBalancer())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E5%90%8D%EF%BC%88%E8%AF%B7%E6%B1%82%E8%B7%AF%E5%BE%84%EF%BC%89%E4%BD%9C%E4%B8%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20requestParams%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20requestParams.put(%5C%22methodName%5C%22%2C%20rpcRequest.getMethodName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20loadBalancer.select(requestParams%2C%20serviceMetaInfoList)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20rpc%20%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RetryStrategy%20retryStrategy%20%3D%20RetryStrategyFactory.getInstance(rpcConfig.getRetryStrategy())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20retryStrategy.doRetry(()%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20)%3B%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E8%B0%83%E7%94%A8%E5%A4%B1%E8%B4%A5%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A1865%2C%22to%22%3A1959%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A1971%2C%22to%22%3A2025%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A2037%2C%22to%22%3A2107%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A2119%2C%22to%22%3A2121%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gv0pE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1f5d667f" id="u1f5d667f"><span data-lake-id="ue2e28c4c" id="ue2e28c4c" style="color: rgb(31, 35, 40)">即使引入了重试机制，整段代码并没有变得更复杂，这就是可扩展性设计的巧妙之处。</span></p><h2 data-lake-id="N563x" id="N563x"><span data-lake-id="u08e2a08c" id="u08e2a08c" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><p data-lake-id="ub19b28d8" id="ub19b28d8"><span data-lake-id="u5aed3341" id="u5aed3341" style="color: rgb(31, 35, 40)">首先启动服务提供者，然后使用 Debug 模式启动服务消费者，当服务消费者发起调用时，立刻停止服务提供者，就会看到调用失败后重试的情况。</span></p><h2 data-lake-id="th9o4" id="th9o4"><span data-lake-id="u8d0178ef" id="u8d0178ef" style="color: rgba(0, 0, 0, 0.85)">五、扩展</span></h2><p data-lake-id="ue564909e" id="ue564909e"><span data-lake-id="ufbbec647" id="ufbbec647" style="color: rgb(31, 35, 40)">1）新增更多不同类型的重试器。</span></p><p data-lake-id="u61a429fa" id="u61a429fa"><span data-lake-id="u57ed43e6" id="u57ed43e6" style="color: rgb(31, 35, 40)">参考思路：比如指数退避算法的重试器。</span></p><p data-lake-id="ubaad6a89" id="ubaad6a89"><span data-lake-id="u65bfd760" id="u65bfd760" style="color: rgb(31, 35, 40)">​</span><br></p><h1 data-lake-id="akOhZ" id="akOhZ"><span data-lake-id="ue246a670" id="ue246a670" style="color: rgb(31, 35, 40)"> 十、容错机制</span></h1><h2 data-lake-id="KZ5Ur" id="KZ5Ur"><span data-lake-id="uf78a0080" id="uf78a0080" style="color: rgba(0, 0, 0, 0.85)">一、需求分析</span></h2><p data-lake-id="u51300c15" id="u51300c15"><span data-lake-id="u388520c3" id="u388520c3" style="color: rgb(31, 35, 40)">上节教程中，给 RPC 框架增加了重试机制，提升了服务消费端的可靠性和健壮性。</span></p><p data-lake-id="u9ff1eaff" id="u9ff1eaff"><span data-lake-id="u5c0dc50c" id="u5c0dc50c" style="color: rgb(31, 35, 40)">​</span><br></p><ol list="u6a47a39d"><li fid="u2a8262f4" data-lake-id="u42fece23" id="u42fece23"><span data-lake-id="u6aafee9e" id="u6aafee9e" style="color: rgb(31, 35, 40)">但如果重试超过了一定次数仍然失败，又该怎么处理呢？</span></li><li fid="u2a8262f4" data-lake-id="ub19c954b" id="ub19c954b"><span data-lake-id="u8641f6f6" id="u8641f6f6" style="color: rgb(31, 35, 40)">当调用出现失败时，一定要重试么？有没有其他的策略呢？</span></li></ol><p data-lake-id="u0f2a872b" id="u0f2a872b"><br></p><p data-lake-id="u3c1c391a" id="u3c1c391a"><span data-lake-id="u53cd5c67" id="u53cd5c67" style="color: rgb(31, 35, 40)">本节实现另一种提高服务消费端可靠性和健壮性的机制 —— </span><strong><span data-lake-id="u0caee81f" id="u0caee81f" style="color: rgb(31, 35, 40)">容错机制</span></strong><span data-lake-id="u7ff49905" id="u7ff49905" style="color: rgb(31, 35, 40)">。</span></p><h2 data-lake-id="u9mYb" id="u9mYb"><span data-lake-id="u9b2fafd1" id="u9b2fafd1" style="color: rgba(0, 0, 0, 0.85)">二、设计方案</span></h2><h3 data-lake-id="BNAYo" id="BNAYo"><span data-lake-id="ua040ad73" id="ua040ad73" style="color: rgba(0, 0, 0, 0.85)">容错机制</span></h3><p data-lake-id="u98f2155b" id="u98f2155b"><span data-lake-id="u896f901b" id="u896f901b" style="color: rgb(31, 35, 40)">容错是指系统在出现异常情况时，可以通过一定的策略保证系统仍然稳定运行，从而提高系统的可靠性和健壮性。</span></p><p data-lake-id="u4633afa2" id="u4633afa2"><span data-lake-id="u6041d705" id="u6041d705" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="uc6e7db17" id="uc6e7db17"><span data-lake-id="u3278b637" id="u3278b637" style="color: rgb(31, 35, 40)">在分布式系统中，容错机制尤为重要，因为分布式系统中的各个组件都可能存在网络故障、节点故障等各种异常情况。要顾全大局，尽可能消除偶发 / 单点故障对系统带来的整体影响。</span></p><p data-lake-id="u5a506580" id="u5a506580"><span data-lake-id="u7cfe05c9" id="u7cfe05c9" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ucd7d4e6a" id="ucd7d4e6a"><span data-lake-id="u888fc201" id="u888fc201" style="color: rgb(31, 35, 40)">打个比方，将分布式系统类比为一家公司，如果公司某个优秀员工请假了，需要 “触发容错”，让另一个普通员工顶上，这本质上是容错机制的一种</span><span data-lake-id="u37bedbfb" id="u37bedbfb" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u6711c096" id="u6711c096" style="color: rgb(31, 35, 40)">降级</span></strong><span data-lake-id="u7bc8c6fc" id="u7bc8c6fc" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u3f5e1a96" id="u3f5e1a96" style="color: rgb(31, 35, 40)">策略。</span></p><p data-lake-id="u4f466660" id="u4f466660"><span data-lake-id="u3e37fd39" id="u3e37fd39" style="color: rgb(31, 35, 40)">容错机制一般都是在系统出现错误时才触发的，这点没什么好讲的，这里需要重点学习的是容错策略和容错实现方式。</span></p><h4 data-lake-id="JKmhr" id="JKmhr"><span data-lake-id="uad7e6904" id="uad7e6904" style="color: rgba(0, 0, 0, 0.85)">容错策略</span></h4><p data-lake-id="u773ec876" id="u773ec876"><span data-lake-id="ud052d6ea" id="ud052d6ea" style="color: rgb(31, 35, 40)">容错策略有很多种，常用的容错策略主要是以下几个：</span></p><p data-lake-id="ubcf58997" id="ubcf58997"><span data-lake-id="u7fac2724" id="u7fac2724" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u3d4fb0fd" id="u3d4fb0fd"><span data-lake-id="u5765ea53" id="u5765ea53" style="color: rgb(31, 35, 40)">1）</span><strong><span data-lake-id="u7752d4a8" id="u7752d4a8" style="color: rgb(31, 35, 40)">Fail-Over 故障转移</span></strong><span data-lake-id="uc9d3d95c" id="uc9d3d95c" style="color: rgb(31, 35, 40)">：一次调用失败后，切换一个其他节点再次进行调用，也算是一种重试。</span></p><p data-lake-id="ue4d65678" id="ue4d65678"><span data-lake-id="u0af6223e" id="u0af6223e" style="color: rgb(31, 35, 40)">2）</span><strong><span data-lake-id="u407a4781" id="u407a4781" style="color: rgb(31, 35, 40)">Fail-Back 失败自动恢复</span></strong><span data-lake-id="u78cd4c9b" id="u78cd4c9b" style="color: rgb(31, 35, 40)">：系统的某个功能出现调用失败或错误时，通过其他的方法，恢复该功能的正常。可以理解为降级，比如重试、调用其他服务等。</span></p><p data-lake-id="u41b0245c" id="u41b0245c"><span data-lake-id="u8c8cb4e8" id="u8c8cb4e8" style="color: rgb(31, 35, 40)">3）</span><strong><span data-lake-id="uda1cdbec" id="uda1cdbec" style="color: rgb(31, 35, 40)">Fail-Safe 静默处理</span></strong><span data-lake-id="uc5908e31" id="uc5908e31" style="color: rgb(31, 35, 40)">：系统出现部分非重要功能的异常时，直接忽略掉，不做任何处理，就像错误没有发生过一样。</span></p><p data-lake-id="u287b4e8e" id="u287b4e8e"><span data-lake-id="u63f485ec" id="u63f485ec" style="color: rgb(31, 35, 40)">4）</span><strong><span data-lake-id="ue4c0287f" id="ue4c0287f" style="color: rgb(31, 35, 40)">Fail-Fast 快速失败</span></strong><span data-lake-id="u82182886" id="u82182886" style="color: rgb(31, 35, 40)">：系统出现调用错误时，立刻报错，交给外层调用方处理。</span></p><p data-lake-id="u005e5fda" id="u005e5fda"><span data-lake-id="u5a6d2e61" id="u5a6d2e61" style="color: rgb(31, 35, 40)">​</span><br></p><h4 data-lake-id="OsuzX" id="OsuzX"><span data-lake-id="u826b0ea1" id="u826b0ea1" style="color: rgba(0, 0, 0, 0.85)">容错实现方式</span></h4><p data-lake-id="u24919b6a" id="u24919b6a"><span data-lake-id="u008bf044" id="u008bf044" style="color: rgb(31, 35, 40)">容错其实是个比较广泛的概念，除了上面几种策略外，很多技术都可以起到容错的作用。</span></p><p data-lake-id="u6d1dfea3" id="u6d1dfea3"><span data-lake-id="ud4c5354b" id="ud4c5354b" style="color: rgb(31, 35, 40)">比如：</span></p><p data-lake-id="u5578da08" id="u5578da08"><span data-lake-id="u9b02c6ab" id="u9b02c6ab" style="color: rgb(31, 35, 40)">1）</span><strong><span data-lake-id="u6ec25a29" id="u6ec25a29" style="color: rgb(31, 35, 40)">重试</span></strong><span data-lake-id="udb1195b7" id="udb1195b7" style="color: rgb(31, 35, 40)">：重试本质上也是一种容错的降级策略，系统错误后再试一次。</span></p><p data-lake-id="ud2534831" id="ud2534831"><span data-lake-id="ude795d5c" id="ude795d5c" style="color: rgb(31, 35, 40)">2）</span><strong><span data-lake-id="ua97c8029" id="ua97c8029" style="color: rgb(31, 35, 40)">限流</span></strong><span data-lake-id="ua854cb67" id="ua854cb67" style="color: rgb(31, 35, 40)">：当系统压力过大、已经出现部分错误时，通过限制执行操作（接受请求）的频率或数量，对系统进行保护。</span></p><p data-lake-id="u84b12bba" id="u84b12bba"><span data-lake-id="ua8035463" id="ua8035463" style="color: rgb(31, 35, 40)">3）</span><strong><span data-lake-id="u450ee003" id="u450ee003" style="color: rgb(31, 35, 40)">降级</span></strong><span data-lake-id="uefe4cfba" id="uefe4cfba" style="color: rgb(31, 35, 40)">：</span><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u038751fd" id="u038751fd">系统出现错误后，改为执行其他更稳定可用的操作</span></u></span></strong><span data-lake-id="u9296f3f0" id="u9296f3f0" style="color: rgb(31, 35, 40)">。也可以叫做 “兜底” 或 “有损服务”，这种方式的本质是：即使牺牲一定的服务质量，也要保证系统的部分功能可用，保证基本的功能需求得到满足。</span></p><p data-lake-id="u4faec0b1" id="u4faec0b1"><span data-lake-id="u460da509" id="u460da509" style="color: rgb(31, 35, 40)">4）</span><strong><span data-lake-id="u9d0e13fe" id="u9d0e13fe" style="color: rgb(31, 35, 40)">熔断</span></strong><span data-lake-id="u2b01b32a" id="u2b01b32a" style="color: rgb(31, 35, 40)">：系统出现故障或异常时，暂时中断对该服务的请求，而是执行其他操作，以避免连锁故障。</span></p><p data-lake-id="ufc11d1d1" id="ufc11d1d1"><span data-lake-id="u342bc324" id="u342bc324" style="color: rgb(31, 35, 40)">5）</span><strong><span data-lake-id="uaa8b2d67" id="uaa8b2d67" style="color: rgb(31, 35, 40)">超时控制</span></strong><span data-lake-id="u935718e5" id="u935718e5" style="color: rgb(31, 35, 40)">：如果请求或操作长时间没处理完成，就进行中断，防止阻塞和资源占用。</span></p><p data-lake-id="ub753b81c" id="ub753b81c"><span data-lake-id="u9c4dd9d3" id="u9c4dd9d3" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u1427615c" id="u1427615c"><span data-lake-id="u6736de6c" id="u6736de6c" style="color: rgb(31, 35, 40)">注意，在实际项目中，根据对系统可靠性的需求，我们通常会结合多种策略或方法实现容错机制。</span></p><p data-lake-id="u8d30a0f3" id="u8d30a0f3"><span data-lake-id="ubd2629da" id="ubd2629da" style="color: rgb(31, 35, 40)">​</span><br></p><h3 data-lake-id="flKxO" id="flKxO"><span data-lake-id="ue228e5bf" id="ue228e5bf" style="color: rgba(0, 0, 0, 0.85)">容错方案设计</span></h3><p data-lake-id="u4db0148d" id="u4db0148d"><span data-lake-id="ue422703d" id="ue422703d" style="color: rgb(31, 35, 40)">回归到 RPC 框架，之前已经给系统增加重试机制了，算是实现了一部分的容错能力。</span></p><p data-lake-id="u04cdfe41" id="u04cdfe41"><span data-lake-id="u2a649284" id="u2a649284" style="color: rgb(31, 35, 40)">现在，我们可以正式引入容错机制，通过更多策略来进一步增加系统可靠性。</span></p><p data-lake-id="u95c5be60" id="u95c5be60"><span data-lake-id="u38ac7d1c" id="u38ac7d1c" style="color: rgb(31, 35, 40)">容错方案的设计可以是很灵活的，建议大家先自己思考。</span></p><p data-lake-id="u72e31f72" id="u72e31f72"><span data-lake-id="u27948433" id="u27948433" style="color: rgb(31, 35, 40)">这里提供 2 种方案：</span></p><h4 data-lake-id="w9n11" id="w9n11"><span data-lake-id="u2fcd5827" id="u2fcd5827" style="color: rgb(31, 35, 40)">1）先容错再重试。</span></h4><p data-lake-id="uae24c845" id="uae24c845"><span data-lake-id="u2ffb44af" id="u2ffb44af" style="color: rgb(31, 35, 40)">当系统发生异常时，首先会触发容错机制，比如记录日志、进行告警等，然后可以选择是否进行重试。</span></p><p data-lake-id="ue8d39be6" id="ue8d39be6"><span data-lake-id="u9e9879ed" id="u9e9879ed" style="color: rgb(31, 35, 40)">这种方案其实是把重试当做容错机制的一种可选方案。</span></p><h4 data-lake-id="c1ckO" id="c1ckO"><span data-lake-id="uc2c1a618" id="uc2c1a618" style="color: rgb(31, 35, 40)">2）先重试再容错。</span></h4><p data-lake-id="ua26785e4" id="ua26785e4"><span data-lake-id="u00b20fe3" id="u00b20fe3" style="color: rgb(31, 35, 40)">在发生错误后，首先尝试重试操作，如果重试多次仍然失败，则触发容错机制，比如记录日志、进行告警等。</span></p><p data-lake-id="ub45f1d69" id="ub45f1d69"><br></p><p data-lake-id="u7d3bf8c1" id="u7d3bf8c1"><strong><span data-lake-id="uc88c81e4" id="uc88c81e4" style="color: rgb(31, 35, 40)">系统错误时，先通过重试操作解决一些临时性的异常，比如网络波动、服务端临时不可用等；如果重试多次后仍然失败，说明可能存在更严重的问题，这时可以触发其他的容错策略，比如调用降级服务、熔断、限流、快速失败等，来减少异常的影响，保障系统的稳定性和可靠性。</span></strong></p><p data-lake-id="udc4b5c90" id="udc4b5c90"><strong><span data-lake-id="ub5fcb109" id="ub5fcb109" style="color: rgb(31, 35, 40)">​</span></strong><br></p><p data-lake-id="u5d2a027e" id="u5d2a027e"><span data-lake-id="u15ae912b" id="u15ae912b" style="color: rgb(31, 35, 40)">举个具体的例子：</span></p><ol list="u8bc88988"><li fid="u926c38a2" data-lake-id="uc30fac9b" id="uc30fac9b"><span data-lake-id="u4ad78e28" id="u4ad78e28" style="color: rgb(31, 35, 40)">系统调用服务 A 出现网络错误，使用容错策略 - 重试。</span></li><li fid="u926c38a2" data-lake-id="uf4209ee7" id="uf4209ee7"><span data-lake-id="u77891913" id="u77891913" style="color: rgb(31, 35, 40)">重试 3 次失败后，使用其他容错策略 - 降级。</span></li><li fid="u926c38a2" data-lake-id="ubdda43a5" id="ubdda43a5"><span data-lake-id="uab4b18e5" id="uab4b18e5" style="color: rgb(31, 35, 40)">系统改为调用不依赖网络的服务 B，完成操作。</span></li></ol><p data-lake-id="ub1601013" id="ub1601013"><span data-lake-id="udacd7a7f" id="udacd7a7f" style="color: rgb(31, 35, 40)">下面，就使用上述的方案。</span></p><h2 data-lake-id="lHCb4" id="lHCb4"><span data-lake-id="uf3b188f1" id="uf3b188f1" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><p data-lake-id="uc2923c17" id="uc2923c17"><span data-lake-id="u0ef7a6fc" id="u0ef7a6fc" style="color: rgb(31, 35, 40)">整个容错机制的实现方式几乎和重试机制一模一样，能力较强的同学可以先尝试自己实现。</span></p><h3 data-lake-id="aqdL5" id="aqdL5"><span data-lake-id="u8e8b41af" id="u8e8b41af" style="color: rgba(0, 0, 0, 0.85)">1、多种容错策略实现</span></h3><p data-lake-id="u948e7cf0" id="u948e7cf0"><span data-lake-id="u673307ad" id="u673307ad" style="color: rgb(31, 35, 40)">下面实现 2 种最基本的容错策略：</span><strong><span data-lake-id="u6506eb6d" id="u6506eb6d" style="color: rgb(31, 35, 40)">Fail-Fast 快速失败</span></strong><span data-lake-id="u8eeba166" id="u8eeba166" style="color: rgb(31, 35, 40)">、</span><strong><span data-lake-id="u6d480c59" id="u6d480c59" style="color: rgb(31, 35, 40)">Fail-Safe 静默处理</span></strong><span data-lake-id="u49315781" id="u49315781" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="uaa9d1128" id="uaa9d1128"><span data-lake-id="ua87f887a" id="ua87f887a" style="color: rgb(31, 35, 40)">在 RPC 项目中新建 </span><code data-lake-id="u6c4c69e9" id="u6c4c69e9"><span data-lake-id="u5a4b515f" id="u5a4b515f" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.tolerant</span></code><span data-lake-id="u62036f83" id="u62036f83" style="color: rgb(31, 35, 40)"> 包，将所有容错相关的代码放到该包下。</span></p><h4 data-lake-id="ieZXA" id="ieZXA"><span data-lake-id="uff6bc9ac" id="uff6bc9ac" style="color: rgb(31, 35, 40)">1）编写容错策略通用接口。</span></h4><p data-lake-id="u5c1d183b" id="u5c1d183b"><span data-lake-id="uace9063d" id="uace9063d" style="color: rgb(31, 35, 40)">提供一个容错方法，使用 Map 类型的参数接受上下文信息（可用于灵活地传递容错处理需要用到的数据），并且接受一个具体的异常类参数。</span></p><p data-lake-id="uc03fa704" id="uc03fa704"><span data-lake-id="u6fe8193d" id="u6fe8193d" style="color: rgb(31, 35, 40)">由于容错是应用到发送请求操作的，所以容错方法的返回值是 RpcResponse（响应）。</span></p><p data-lake-id="u82cfc3e9" id="u82cfc3e9"><span data-lake-id="uf9b2f2d6" id="uf9b2f2d6" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20RPC%E6%A1%86%E6%9E%B6%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20interface%20TolerantStrategy%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%AE%B9%E9%94%99%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20context%3A%20%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%8C%E7%94%A8%E4%BA%8E%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20*%20%40param%20e%3A%20%E6%8E%A5%E6%94%B6%E5%88%B0%E7%9A%84%20%E6%8A%A5%E9%94%99%20%E6%88%96%20%E5%BC%82%E5%B8%B8%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.model.RpcResponse%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F18%2017%3A00%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20RpcResponse%20doTolerant(Map%3CString%2C%20Object%3E%20context%2C%20Exception%20e)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TP5sx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="fF8qH" id="fF8qH"><span data-lake-id="u51a5f022" id="u51a5f022" style="color: rgb(31, 35, 40)">2）快速失败容错策略实现。</span></h4><p data-lake-id="ub55eec2f" id="ub55eec2f"><span data-lake-id="u100934a9" id="u100934a9" style="color: rgb(31, 35, 40)">很好理解，就是遇到异常后，将异常再次抛出，交给外层处理。</span></p><p data-lake-id="ua32b161c" id="ua32b161c"><span data-lake-id="u318d9cad" id="u318d9cad" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5%20--%20%EF%BC%88%E5%9C%A8%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%E7%9A%84%E6%97%B6%E5%80%99%E7%AB%8B%E5%8D%B3%E9%80%9A%E7%9F%A5%E5%A4%96%E5%B1%82%E8%B0%83%E7%94%A8%E6%96%B9%EF%BC%89%5Cn%20*%20%E7%9B%B4%E6%8E%A5%E6%8A%9B%E5%BC%82%E5%B8%B8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20class%20FailFastTolerantStrategy%20implements%20TolerantStrategy%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doTolerant(Map%3CString%2C%20Object%3E%20context%2C%20Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99%5C%22%2C%20e)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LvSAc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="qXJeP" id="qXJeP"><span data-lake-id="u66cf8085" id="u66cf8085" style="color: rgb(31, 35, 40)">3）静默处理容错策略实现。</span></h4><p data-lake-id="uf8fd8d4e" id="uf8fd8d4e"><span data-lake-id="u5c2d4382" id="u5c2d4382" style="color: rgb(31, 35, 40)">也很好理解，就是遇到异常后，记录一条日志，然后正常返回一个响应对象，就好像没有出现过报错。</span></p><p data-lake-id="ufb49e03a" id="ufb49e03a"><span data-lake-id="u042b403b" id="u042b403b" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%9D%99%E9%BB%98%E5%A4%84%E7%90%86%5Cn%20*%20%E5%9C%A8%E9%81%87%E5%88%B0%E5%BC%82%E5%B8%B8%E4%B9%8B%E5%90%8E%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97%EF%BC%8C%E7%84%B6%E5%90%8E%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20FailSafeTolerantStrategy%20implements%20TolerantStrategy%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doTolerant(Map%3CString%2C%20Object%3E%20context%2C%20Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20log.error(%5C%22%E9%9D%99%E9%BB%98%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%20%7B%7D%5C%22%2C%20context%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20new%20RpcResponse()%3B%5Cn%20%20%20%20%20%20%20%20rpcResponse.setException(new%20RuntimeException(%5C%22fuck%20you%20vert.x!!!%5C%22))%3B%5Cn%5Cn%20%20%20%20%20%20%20%20return%20rpcResponse%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tbJTC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="I9Dp0" id="I9Dp0"><span data-lake-id="ud9429206" id="ud9429206" style="color: rgb(31, 35, 40)">4）其他容错策略。</span></h4><p data-lake-id="u922fbab0" id="u922fbab0"><span data-lake-id="u34f77479" id="u34f77479" style="color: rgb(31, 35, 40)">还可以自行实现更多的容错策略</span></p><p data-lake-id="u841ef489" id="u841ef489"><span data-lake-id="ud0e52a15" id="ud0e52a15" style="color: rgb(31, 35, 40)">比如 </span><code data-lake-id="u73bfb3b6" id="u73bfb3b6"><span data-lake-id="ue9d4f351" id="ue9d4f351" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">FailBackTolerantStrategy</span></code><span data-lake-id="ud4f14e83" id="ud4f14e83" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">（降级）</span><span data-lake-id="u7cd91bdd" id="u7cd91bdd" style="color: rgb(31, 35, 40)"> 故障恢复策略：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E9%99%8D%E7%BA%A7%5Cn%20*%20%E5%9C%A8%E9%81%87%E5%88%B0%E5%BC%82%E5%B8%B8%E4%B9%8B%E5%90%8E%E9%99%8D%E7%BA%A7%E6%88%90%E5%85%B6%E4%BB%96%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20FailBackTolerantStrategy%20implements%20TolerantStrategy%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doTolerant(Map%3CString%2C%20Object%3E%20context%2C%20Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22I04WK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u0905a6c6" id="u0905a6c6"><span data-lake-id="u94371c6c" id="u94371c6c" style="color: rgb(31, 35, 40)">还有 </span><code data-lake-id="u02dbb5ef" id="u02dbb5ef"><span data-lake-id="u2b29c039" id="u2b29c039" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">FailOverTolerantStrategy</span><span data-lake-id="u7e57a6fb" id="u7e57a6fb" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u02a119ee" id="u02a119ee" style="color: rgb(31, 35, 40)">故障转移策略：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E8%BD%AC%E7%A7%BB%E6%9C%8D%E5%8A%A1%5Cn%20*%20%E5%9C%A8%E9%81%87%E5%88%B0%E5%BC%82%E5%B8%B8%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20FailOverTolerantStrategy%20implements%20TolerantStrategy%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20RpcResponse%20doTolerant(Map%3CString%2C%20Object%3E%20context%2C%20Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZrSj0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uc9879456" id="uc9879456"><span data-lake-id="uc4964439" id="uc4964439" style="color: rgb(31, 35, 40)">当前的容错机制目录如下：</span></p><p data-lake-id="uab3f14b3" id="uab3f14b3"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713960180927-0fe69f61-46cc-4334-a90e-8bbc7c9be013.png%22%2C%22taskId%22%3A%22u6fdcc834-cdf1-460c-a107-092ae809ffb%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A491%2C%22height%22%3A500%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A138869%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A491%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22IC%20D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%20CHEN-RPC%20D%3A%20.IDEA%20CHEN-RPC-CORE%20SRC%20MAIN%20JAVA%20COM%20YYBF%20CHENRPC%20BOOTSTRAP%20CONFIG%20Y%20CONSTANT%20FAULT%20RETRY%20TOLERANT%20FAILBACKTOLERANTSTRA%20RATEGY%20FAILFASTTOLERANTSTRATEGY%20FAILOVERTOLERANTSTRATEGY%20FAILSAFETOLERANTSTRATEGY%20TOLERANTSTRATEGY%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A110%2C%22y%22%3A2%2C%22width%22%3A362%2C%22height%22%3A18%2C%22text%22%3A%22IC%20D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A3%2C%22width%22%3A89%2C%22height%22%3A17%2C%22text%22%3A%22CHEN-RPC%20D%3A%22%7D%2C%7B%22x%22%3A64%2C%22y%22%3A26%2C%22width%22%3A37%2C%22height%22%3A15%2C%22text%22%3A%22.IDEA%22%7D%2C%7B%22x%22%3A64%2C%22y%22%3A53%2C%22width%22%3A109%2C%22height%22%3A15%2C%22text%22%3A%22CHEN-RPC-CORE%22%7D%2C%7B%22x%22%3A85%2C%22y%22%3A80%2C%22width%22%3A24%2C%22height%22%3A13%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A103%2C%22width%22%3A37%2C%22height%22%3A13%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A128%2C%22y%22%3A128%2C%22width%22%3A32%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A154%2C%22y%22%3A155%2C%22width%22%3A33%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A178%2C%22y%22%3A176%2C%22width%22%3A32%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A203%2C%22width%22%3A61%2C%22height%22%3A15%2C%22text%22%3A%22CHENRPC%22%7D%2C%7B%22x%22%3A220%2C%22y%22%3A227%2C%22width%22%3A76%2C%22height%22%3A17%2C%22text%22%3A%22BOOTSTRAP%22%7D%2C%7B%22x%22%3A221%2C%22y%22%3A251%2C%22width%22%3A48%2C%22height%22%3A19%2C%22text%22%3A%22CONFIG%22%7D%2C%7B%22x%22%3A177%2C%22y%22%3A277%2C%22width%22%3A10%2C%22height%22%3A15%2C%22text%22%3A%22Y%22%7D%2C%7B%22x%22%3A221%2C%22y%22%3A277%2C%22width%22%3A65%2C%22height%22%3A15%2C%22text%22%3A%22CONSTANT%22%7D%2C%7B%22x%22%3A221%2C%22y%22%3A302%2C%22width%22%3A34%2C%22height%22%3A14%2C%22text%22%3A%22FAULT%22%7D%2C%7B%22x%22%3A241%2C%22y%22%3A329%2C%22width%22%3A38%2C%22height%22%3A15%2C%22text%22%3A%22RETRY%22%7D%2C%7B%22x%22%3A243%2C%22y%22%3A353%2C%22width%22%3A60%2C%22height%22%3A15%2C%22text%22%3A%22TOLERANT%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A376%2C%22width%22%3A144%2C%22height%22%3A17%2C%22text%22%3A%22FAILBACKTOLERANTSTRA%22%7D%2C%7B%22x%22%3A400%2C%22y%22%3A378%2C%22width%22%3A48%2C%22height%22%3A18%2C%22text%22%3A%22RATEGY%22%7D%2C%7B%22x%22%3A267%2C%22y%22%3A402%2C%22width%22%3A176%2C%22height%22%3A19%2C%22text%22%3A%22FAILFASTTOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A427%2C%22width%22%3A185%2C%22height%22%3A19%2C%22text%22%3A%22FAILOVERTOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A452%2C%22width%22%3A180%2C%22height%22%3A19%2C%22text%22%3A%22FAILSAFETOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A266%2C%22y%22%3A477%2C%22width%22%3A124%2C%22height%22%3A16%2C%22text%22%3A%22TOLERANTSTRATEGY%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23444f5a%22%2C%22id%22%3A%22u09cf04e9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h3 data-lake-id="IqX5E" id="IqX5E"><span data-lake-id="ua67ac8a7" id="ua67ac8a7" style="color: rgba(0, 0, 0, 0.85)">2、支持配置和扩展容错策略</span></h3><p data-lake-id="u78663f92" id="u78663f92"><span data-lake-id="u75fb88a3" id="u75fb88a3" style="color: rgb(31, 35, 40)">一个成熟的 RPC 框架可能会支持多种不同的容错策略，像序列化器、注册中心、负载均衡器一样，我们的需求是，让开发者能够填写配置来指定使用的容错策略，并且支持自定义容错策略，让框架更易用、更利于扩展。</span></p><p data-lake-id="uf1fc9d90" id="uf1fc9d90"><span data-lake-id="u6283bc9c" id="u6283bc9c" style="color: rgb(31, 35, 40)">要实现这点，开发方式和序列化器、注册中心、负载均衡器都是一样的，都可以</span><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u53cc1e82" id="u53cc1e82">使用工厂创建对象、使用 SPI 动态加载自定义</span></u></span></strong><span data-lake-id="u59dcc027" id="u59dcc027" style="color: rgb(31, 35, 40)">的注册中心。</span></p><h4 data-lake-id="gE1jR" id="gE1jR"><span data-lake-id="ue010f4f0" id="ue010f4f0" style="color: rgb(31, 35, 40)">1）容错策略常量。</span></h4><p data-lake-id="ua1d5a7a0" id="ua1d5a7a0"><span data-lake-id="u51dceaa0" id="u51dceaa0" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="u0a8bee02" id="u0a8bee02"><span data-lake-id="u5e807ad2" id="u5e807ad2" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.tolerant</span></code><span data-lake-id="u10c49446" id="u10c49446" style="color: rgb(31, 35, 40)"> 包下新建 </span><code data-lake-id="ua1b1def6" id="ua1b1def6"><span data-lake-id="u089cd9c6" id="u089cd9c6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">TolerantStrategyKeys</span><span data-lake-id="u5a1bf931" id="u5a1bf931" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="uebbcbfbd" id="uebbcbfbd" style="color: rgb(31, 35, 40)">类，列举所有支持的容错策略键名。</span></p><p data-lake-id="u993ee6e6" id="u993ee6e6"><span data-lake-id="u4dc91e2c" id="u4dc91e2c" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cn%2F**%5Cn%20*%20RPC%E6%A1%86%E6%9E%B6%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%E9%94%AE%E5%90%8D%E5%B8%B8%E9%87%8F%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20interface%20TolerantStrategyKeys%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20FAIL_BACK%20%3D%20%5C%22failBack%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20FAIL_FAST%20%3D%20%5C%22failFast%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20FAIL_OVER%20%3D%20%5C%22failOver%5C%22%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%9D%99%E9%BB%98%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20FAIL_SAFE%20%3D%20%5C%22failSafe%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Z54MQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="cSlsS" id="cSlsS"><span data-lake-id="uc3aa4161" id="uc3aa4161" style="color: rgb(31, 35, 40)">2）创建工厂类</span></h4><p data-lake-id="u63907f68" id="u63907f68"><span data-lake-id="u93872282" id="u93872282" style="color: rgb(31, 35, 40)">使用工厂模式，支持根据 key 从 SPI 获取容错策略对象实例。</span></p><p data-lake-id="u1f576bfb" id="u1f576bfb"><span data-lake-id="u696d7bfe" id="u696d7bfe" style="color: rgb(31, 35, 40)">在</span><code data-lake-id="u926e8c7a" id="u926e8c7a"><span data-lake-id="u65feb7ec" id="u65feb7ec" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">fault.tolerant</span></code><span data-lake-id="uc06c08d4" id="uc06c08d4" style="color: rgb(31, 35, 40)">包下新建 </span><code data-lake-id="ua95c5e2f" id="ua95c5e2f"><span data-lake-id="u9d26651b" id="u9d26651b" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">TolerantStrategyFactory</span><span data-lake-id="ud91cca47" id="ud91cca47" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="ue1831aa3" id="ue1831aa3" style="color: rgb(31, 35, 40)">类，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.fault.tolerant%3B%5Cn%5Cnimport%20com.yybf.chenrpc.spi.SpiLoader%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%E5%B7%A5%E5%8E%82%EF%BC%88%E7%94%A8%E4%BA%8E%E8%8E%B7%E5%8F%96%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%EF%BC%89%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20class%20TolerantStrategyFactory%20%7B%5Cn%20%20%20%20static%20%7B%5Cn%20%20%20%20%20%20%20%20SpiLoader.load(TolerantStrategy.class)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%BB%98%E8%AE%A4%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%20--%20%E9%9D%99%E9%BB%98%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20static%20final%20TolerantStrategy%20DEFAULT_TOLERANT_STRATEGY%20%3D%20new%20FailSafeTolerantStrategy()%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20key%3A%20%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%E7%9A%84%E9%94%AE%E5%90%8D%5Cn%20%20%20%20%20*%20%40return%20com.yybf.chenrpc.fault.tolerant.TolerantStrategy%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F18%2017%3A21%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20TolerantStrategy%20getInstance(String%20key)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20SpiLoader.getInstance(TolerantStrategy.class%2C%20key)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Iygkr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="Su2HQ" id="Su2HQ"><span data-lake-id="u0b2bf234" id="u0b2bf234" style="color: rgb(31, 35, 40)">3）编写配置文件</span></h4><p data-lake-id="uf9fe080e" id="uf9fe080e"><span data-lake-id="u9cf56ea6" id="u9cf56ea6" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="ubcc575b7" id="ubcc575b7"><span data-lake-id="u55e2c84b" id="u55e2c84b" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">META-INF</span></code><span data-lake-id="u2b69f86a" id="u2b69f86a" style="color: rgb(31, 35, 40)"> 的 </span><code data-lake-id="ud733ae58" id="ud733ae58"><span data-lake-id="u72dc2f86" id="u72dc2f86" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">rpc/system</span></code><span data-lake-id="ud48f075b" id="ud48f075b" style="color: rgb(31, 35, 40)"> 目录下编写容错策略接口的 SPI 配置文件，文件名称为 </span></p><p data-lake-id="uea83b48f" id="uea83b48f"><code data-lake-id="ud32a997b" id="ud32a997b"><span data-lake-id="ua5dc41bd" id="ua5dc41bd" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">com.yupi.yurpc.fault.tolerant.TolerantStrategy</span></code><span data-lake-id="u293e76ea" id="u293e76ea" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="ua23d7a55" id="ua23d7a55"><span data-lake-id="u37652b8c" id="u37652b8c" style="color: rgb(31, 35, 40)">如图：</span></p><p data-lake-id="u83a4ea86" id="u83a4ea86"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713960457401-f9ed5806-78a7-41cf-a300-020e4b2acb22.png%22%2C%22taskId%22%3A%22ua7076814-dc14-494e-b421-224e11f11f3%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1635%2C%22height%22%3A325%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A269296%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1635%2C%22originHeight%22%3A325%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%20RESOURCES%20META-INF%20FAILBACK-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILBACKTOLERANTSTRATEGY%20RPC%20F%20ILI%20ILFAST-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILFASTTOLERANTSTRATEGY%20CUSTOM%20FAILOVER-COM.YYBF.CHENRPE.FAULT.TOLERANT.FAILOVERTOLERANTSTRATEGY%20SVSTEM%20FAILSAFE-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILSAFETOLERANTSTRATEGY%20COM.YYBF.CHENRPC.FAULT.RETRY.RETRYSTRATEGY%20COM.YYBF.CHENRPC.FAULT.TOLERANT.TOLERANTSTRATEGY%20COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCE%20COMYYBF.CHENRPCREGISTRY.REGISTRY%20%E7%9C%81%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20SERVICES%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A512%2C%22y%22%3A20%2C%22width%22%3A213%2C%22height%22%3A19%2C%22text%22%3A%22%E6%AD%A4%E6%96%87%E4%BB%B6%E5%B7%B2%E6%98%BE%E5%BC%8F%E9%87%8D%E6%96%B0%E5%88%86%E9%85%8D%E4%B8%BA%E7%BA%AF%E6%96%87%E6%9C%AC%22%7D%2C%7B%22x%22%3A59%2C%22y%22%3A24%2C%22width%22%3A71%2C%22height%22%3A13%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A47%2C%22width%22%3A78%2C%22height%22%3A15%2C%22text%22%3A%22META-INF%22%7D%2C%7B%22x%22%3A570%2C%22y%22%3A53%2C%22width%22%3A654%2C%22height%22%3A23%2C%22text%22%3A%22FAILBACK-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILBACKTOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A103%2C%22y%22%3A72%2C%22width%22%3A26%2C%22height%22%3A14%2C%22text%22%3A%22RPC%22%7D%2C%7B%22x%22%3A570%2C%22y%22%3A79%2C%22width%22%3A46%2C%22height%22%3A18%2C%22text%22%3A%22F%20ILI%22%7D%2C%7B%22x%22%3A601%2C%22y%22%3A80%2C%22width%22%3A622%2C%22height%22%3A23%2C%22text%22%3A%22ILFAST-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILFASTTOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A125%2C%22y%22%3A98%2C%22width%22%3A56%2C%22height%22%3A13%2C%22text%22%3A%22CUSTOM%22%7D%2C%7B%22x%22%3A568%2C%22y%22%3A106%2C%22width%22%3A654%2C%22height%22%3A24%2C%22text%22%3A%22FAILOVER-COM.YYBF.CHENRPE.FAULT.TOLERANT.FAILOVERTOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A124%2C%22y%22%3A123%2C%22width%22%3A56%2C%22height%22%3A14%2C%22text%22%3A%22SVSTEM%22%7D%2C%7B%22x%22%3A570%2C%22y%22%3A133%2C%22width%22%3A651%2C%22height%22%3A23%2C%22text%22%3A%22FAILSAFE-COM.YYBF.CHENRPC.FAULT.TOLERANT.FAILSAFETOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A131%2C%22y%22%3A146%2C%22width%22%3A331%2C%22height%22%3A17%2C%22text%22%3A%22COM.YYBF.CHENRPC.FAULT.RETRY.RETRYSTRATEGY%22%7D%2C%7B%22x%22%3A144%2C%22y%22%3A171%2C%22width%22%3A354%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.FAULT.TOLERANT.TOLERANTSTRATEGY%22%7D%2C%7B%22x%22%3A147%2C%22y%22%3A195%2C%22width%22%3A319%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.LOADBALANCER.LOADBALANCE%22%7D%2C%7B%22x%22%3A148%2C%22y%22%3A221%2C%22width%22%3A257%2C%22height%22%3A18%2C%22text%22%3A%22COMYYBF.CHENRPCREGISTRY.REGISTRY%22%7D%2C%7B%22x%22%3A124%2C%22y%22%3A239%2C%22width%22%3A21%2C%22height%22%3A26%2C%22text%22%3A%22%E7%9C%81%22%7D%2C%7B%22x%22%3A146%2C%22y%22%3A246%2C%22width%22%3A273%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%2C%7B%22x%22%3A103%2C%22y%22%3A271%2C%22width%22%3A65%2C%22height%22%3A16%2C%22text%22%3A%22SERVICES%22%7D%2C%7B%22x%22%3A125%2C%22y%22%3A295%2C%22width%22%3A270%2C%22height%22%3A19%2C%22text%22%3A%22COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2347515c%22%2C%22id%22%3A%22u472fdc9a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u32e693b9" id="u32e693b9"><span data-lake-id="uc2326d1a" id="uc2326d1a" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22failBack%3Dcom.yupi.yurpc.fault.tolerant.FailBackTolerantStrategy%5CnfailFast%3Dcom.yupi.yurpc.fault.tolerant.FailFastTolerantStrategy%5CnfailOver%3Dcom.yupi.yurpc.fault.tolerant.FailOverTolerantStrategy%5CnfailSafe%3Dcom.yupi.yurpc.fault.tolerant.FailSafeTolerantStrategy%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yUkPf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="kQee2" id="kQee2"><span data-lake-id="u429cf2d8" id="u429cf2d8" style="color: rgb(31, 35, 40)">4）为 RpcConfig 全局配置新增容错策略的配置</span></h4><p data-lake-id="ucba7dd58" id="ucba7dd58"><span data-lake-id="u0a5d38fe" id="u0a5d38fe" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Data%5Cnpublic%20class%20RpcConfig%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20tolerantStrategy%20%3D%20TolerantStrategyKeys.FAIL_FAST%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22irvta%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="Cp93y" id="Cp93y"><span data-lake-id="ub71905db" id="ub71905db" style="color: rgba(0, 0, 0, 0.85)">3、应用容错功能</span></h3><p data-lake-id="u926a4777" id="u926a4777"><span data-lake-id="ube173d2f" id="ube173d2f" style="color: rgb(31, 35, 40)">容错功能的应用非常简单，我们只需要修改 ServiceProxy 的部分代码，在重试多次抛出异常时，从工厂中获取容错策略并执行即可。</span></p><p data-lake-id="u9e68ba03" id="u9e68ba03"><span data-lake-id="ud66743d8" id="ud66743d8" style="color: rgb(31, 35, 40)">修改的代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20rpc%20%E8%AF%B7%E6%B1%82%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%5CnRpcResponse%20rpcResponse%3B%5Cntry%20%7B%5Cn%20%20%20%20RetryStrategy%20retryStrategy%20%3D%20RetryStrategyFactory.getInstance(rpcConfig.getRetryStrategy())%3B%5Cn%20%20%20%20rpcResponse%20%3D%20retryStrategy.doRetry(()%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%5Cn%20%20%20%20)%3B%5Cn%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20TolerantStrategy%20tolerantStrategy%20%3D%20TolerantStrategyFactory.getInstance(rpcConfig.getTolerantStrategy())%3B%5Cn%20%20%20%20rpcResponse%20%3D%20tolerantStrategy.doTolerant(null%2C%20e)%3B%5Cn%7D%5Cnreturn%20rpcResponse.getData()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CtAmf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ueee88cc5" id="ueee88cc5"><span data-lake-id="u1f4711c0" id="u1f4711c0" style="color: rgb(31, 35, 40)">修改后的 ServiceProxy 的完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.proxy%3B%5Cn%5Cnimport%20cn.hutool.core.collection.CollUtil%3B%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.fault.retry.RetryStrategy%3B%5Cnimport%20com.yybf.chenrpc.fault.retry.RetryStrategyFactory%3B%5Cnimport%20com.yybf.chenrpc.fault.tolerant.TolerantStrategy%3B%5Cnimport%20com.yybf.chenrpc.fault.tolerant.TolerantStrategyFactory%3B%5Cnimport%20com.yybf.chenrpc.loadbalancer.LoadBalancer%3B%5Cnimport%20com.yybf.chenrpc.loadbalancer.LoadBalancerFactory%3B%5Cnimport%20com.yybf.chenrpc.model.RpcRequest%3B%5Cnimport%20com.yybf.chenrpc.model.RpcResponse%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.serializer.Serializer%3B%5Cnimport%20com.yybf.chenrpc.serializer.SerializerFactory%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpClient%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cn%5Cnimport%20java.lang.reflect.InvocationHandler%3B%5Cnimport%20java.lang.reflect.Method%3B%5Cnimport%20java.util.HashMap%3B%5Cnimport%20java.util.List%3B%5Cnimport%20java.util.Map%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%EF%BC%88JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89%5Cn%20*%20%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89tcp%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8C%E9%87%8D%E6%9E%84%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F3%2F13%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20ServiceProxy%20implements%20InvocationHandler%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E8%B0%83%E7%94%A8%E4%BB%A3%E7%90%86%20%E9%87%8D%E5%86%99%E4%BA%86invoke%E6%96%B9%E6%B3%95%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20proxy%3A%5Cn%20%20%20%20%20*%20%40param%20method%3A%5Cn%20%20%20%20%20*%20%40param%20args%3A%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F3%2F13%2016%3A01%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%20throws%20Throwable%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%8E%82%20%2B%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%9D%A5%E6%8C%87%E5%AE%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%5Cn%20%20%20%20%20%20%20%20final%20Serializer%20serializer%20%3D%20SerializerFactory.getInstance(rpcConfig.getSerializer())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ServiceProxy%EF%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20serializer.toString())%3B%5Cn%5Cn%5Cn%20%20%20%20%20%20%20%20%2F*%20%E5%8F%91%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9E%84%E5%BB%BA%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20method.getDeclaringClass().getName()%3B%5Cn%20%20%20%20%20%20%20%20RpcRequest%20rpcRequest%20%3D%20RpcRequest.builder()%5Cn%20%20%20%20%20%20%20%20.serviceName(serviceName)%5Cn%20%20%20%20%20%20%20%20.serviceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%5Cn%20%20%20%20%20%20%20%20.methodName(method.getName())%5Cn%20%20%20%20%20%20%20%20.parameterTypes(method.getParameterTypes())%5Cn%20%20%20%20%20%20%20%20.args(args)%5Cn%20%20%20%20%20%20%20%20.build()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20%E5%92%8C%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%EF%BC%88SPI%EF%BC%89%E6%9C%BA%E5%88%B6%20%E6%9D%A5%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(rpcConfig.getRegistryConfig().getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(RpcConstant.DEFAULT_SERVICE_VERSION)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8EserviceMetaInfo%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E9%94%AE%E5%90%8D%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8EEtcd%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20List%3CServiceMetaInfo%3E%20serviceMetaInfoList%20%3D%20registry.serviceDiscovery(serviceMetaInfo.getServiceKey())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%9C%AA%E8%8E%B7%E5%8F%96%E5%88%B0%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(CollUtil.isEmpty(serviceMetaInfoList))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E6%9A%82%E6%97%A0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%9C%B0%E5%9D%80!%20%5C%22%20%2B%20serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20LoadBalancer%20loadBalancer%20%3D%20LoadBalancerFactory.getInstance(rpcConfig.getLoadBalancer())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E8%B0%83%E7%94%A8%E7%9A%84%20%E6%96%B9%E6%B3%95%E5%90%8D%20%E4%BD%9C%E4%B8%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20requestParams%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20requestParams.put(%5C%22methodName%5C%22%2C%20rpcRequest.getMethodName())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20selectedServiceMetaInfo%20%3D%20loadBalancer.select(requestParams%2C%20serviceMetaInfoList)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81TCP%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20RpcResponse%20rpcResponse%20%3D%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcResponse%20rpcResponse%20%3D%20null%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Map%3CString%2C%20Object%3E%20map%20%3D%20new%20HashMap%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.put(%5C%22rpcRequest%5C%22%2C%20rpcRequest)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20map.put(%5C%22selectedServiceMetaInfo%5C%22%2C%20selectedServiceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20RetryStrategy%20retryStrategy%20%3D%20RetryStrategyFactory.getInstance(rpcConfig.getRetryStrategy())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rpcResponse%20%3D%20retryStrategy.doRetry(()%20-%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20VertxTcpClient.doRequest(rpcRequest%2C%20selectedServiceMetaInfo)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%5Cn%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22fuck%20you%20vert.x%5C%22)%3B%20%E6%B5%8B%E8%AF%95%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%E5%AE%B9%E9%94%99%E6%9C%BA%E5%88%B6%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20TolerantStrategy%20tolerantStrategy%20%3D%20TolerantStrategyFactory.getInstance(rpcConfig.getTolerantStrategy())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tolerantStrategy.doTolerant(map%2C%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22Response%EF%BC%9A%5C%22%20%2B%20rpcResponse)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20rpcResponse.getData()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20null%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A3858%2C%22to%22%3A3863%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4137%2C%22to%22%3A4208%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4221%2C%22to%22%3A4245%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4257%2C%22to%22%3A4271%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4283%2C%22to%22%3A4393%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4405%2C%22to%22%3A4446%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A4458%2C%22to%22%3A4459%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vkugR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u4e30961f" id="u4e30961f"><span data-lake-id="u40741d69" id="u40741d69" style="color: rgb(31, 35, 40)">我们会发现，即使引入了容错机制，整段代码并没有变得更复杂，这就是可扩展性设计的巧妙之处。</span></p><h2 data-lake-id="BAq0H" id="BAq0H"><span data-lake-id="u15babbd9" id="u15babbd9" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><p data-lake-id="u31d3716b" id="u31d3716b"><span data-lake-id="u14f2751f" id="u14f2751f" style="color: rgb(31, 35, 40)">可以在上面代码划线注释处添加类似的人为制造的抛出一个错误，从而可以被下面的catch给捕获，启用容错机制，进而得以检测。</span></p><h2 data-lake-id="S9g6M" id="S9g6M"><span data-lake-id="u98230b3c" id="u98230b3c" style="color: rgba(0, 0, 0, 0.85)">五、扩展</span></h2><p data-lake-id="u6e8d8658" id="u6e8d8658"><span data-lake-id="u53974a21" id="u53974a21" style="color: rgb(31, 35, 40)">1）实现 Fail-Back 容错机制。</span></p><p data-lake-id="u2bf70744" id="u2bf70744"><span data-lake-id="u25cf4308" id="u25cf4308" style="color: rgb(31, 35, 40)">参考思路：可以参考 Dubbo 的 Mock 能力，让消费端指定调用失败后要执行的本地服务和方法。</span></p><p data-lake-id="uaf06c82f" id="uaf06c82f"><span data-lake-id="u167147fc" id="u167147fc" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u2037fd69" id="u2037fd69"><span data-lake-id="ucffdb2bc" id="ucffdb2bc" style="color: rgb(31, 35, 40)">2）实现 Fail-Over 容错机制。</span></p><p data-lake-id="u43ff20f4" id="u43ff20f4"><span data-lake-id="uad250d1b" id="uad250d1b" style="color: rgb(31, 35, 40)">参考思路：可以利用容错方法的上下文参数传递所有的服务节点和本次调用的服务节点，选择一个其他节点再次发起调用。</span></p><p data-lake-id="ueaa85442" id="ueaa85442"><span data-lake-id="u57eb41c3" id="u57eb41c3" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u48e3232b" id="u48e3232b"><span data-lake-id="u660862c4" id="u660862c4" style="color: rgb(31, 35, 40)">3）实现更多容错方案。（较难）</span></p><p data-lake-id="u1758ab0c" id="u1758ab0c"><span data-lake-id="u147caa7b" id="u147caa7b" style="color: rgb(31, 35, 40)">参考思路：比如限流、熔断、超时控制等。或者将重试机制作为容错机制的一种策略来实现。</span></p><p data-lake-id="u7677ccb9" id="u7677ccb9"><span data-lake-id="udc2adbd2" id="udc2adbd2" style="color: rgb(31, 35, 40)">​</span><br></p><h1 data-lake-id="ZnMxZ" id="ZnMxZ"><span data-lake-id="uf304fdf3" id="uf304fdf3" style="color: rgb(31, 35, 40)">十一、启动机制和注解驱动</span></h1><h2 data-lake-id="Nb6gK" id="Nb6gK"><span data-lake-id="u6a6742f2" id="u6a6742f2" style="color: rgba(0, 0, 0, 0.85)">一、需求分析</span></h2><p data-lake-id="u99a33a93" id="u99a33a93"><span data-lake-id="u5006fd57" id="u5006fd57" style="color: rgb(31, 35, 40)">通过前面的教程，这个RPC 框架的功能已经比较完善了，接下来就要思考如何优化这个框架。</span></p><p data-lake-id="u6e739df3" id="u6e739df3"><span data-lake-id="u50175026" id="u50175026" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="uba7092cf" id="uba7092cf"><span data-lake-id="u03d42685" id="u03d42685" style="color: rgb(31, 35, 40)">框架是给开发者用的，让我们换位思考：如果你是一名开发者，会选择怎样的一款框架呢？</span></p><p data-lake-id="u2967c713" id="u2967c713"><span data-lake-id="ub4f887de" id="ub4f887de" style="color: rgb(31, 35, 40)">答案很简单，就是选择符合自身需求的呗！</span></p><p data-lake-id="uec6d7b23" id="uec6d7b23"><span data-lake-id="u283c6f0a" id="u283c6f0a" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u18532113" id="u18532113"><span data-lake-id="u7d62965d" id="u7d62965d" style="color: rgb(31, 35, 40)">往细了说，会更关注框架的这些情况：</span></p><ul list="ucad3dce3"><li fid="u3854c4ad" data-lake-id="u10d85303" id="u10d85303"><span data-lake-id="ufb1d899b" id="ufb1d899b" style="color: rgb(31, 35, 40)">框架的知名度和用户数：尽量选主流的、用户多的，经过了充分的市场验证。</span></li><li fid="u3854c4ad" data-lake-id="u2c05d20f" id="u2c05d20f"><span data-lake-id="u03ce5f37" id="u03ce5f37" style="color: rgb(31, 35, 40)">生态和社区活跃度：尽量选社区活跃的、能和其他技术兼容的。</span></li><li fid="u3854c4ad" data-lake-id="u97888851" id="u97888851"><span data-lake-id="u7612f83f" id="u7612f83f" style="color: rgb(31, 35, 40)">简单易用易上手：最好能开箱即用，不用花很多时间去上手。这点可能是我们在做个人小型项目时最关注的，可以把精力聚焦到业务开发上。</span></li><li fid="u3854c4ad" data-lake-id="ud15f43e5" id="ud15f43e5"><span data-lake-id="u8b4224e7" id="u8b4224e7" style="color: rgb(31, 35, 40)">​</span><br></li></ul><p data-lake-id="u23e30d98" id="u23e30d98"><span data-lake-id="uaa13a883" id="uaa13a883" style="color: rgb(31, 35, 40)">选择框架的过程其实还有一个专业术语 —— 技术选型，大家可以阅读鱼皮的 </span><card type="inline" name="bookmarkInline" value="data:%7B%22mode%22%3A%22title%22%2C%22src%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI1NDczNTAwMA%3D%3D%26mid%3D2247541448%26idx%3D1%26sn%3Dfa08326ae7e25c85b7d18436b6d9ccff%26chksm%3De9c2c53fdeb54c29c6699260ed5cf343c4fee5fc3cf81e16fccc98c36aecb50a9bb94f29cae0%26token%3D855278184%26lang%3Dzh_CN%23rd%22%2C%22text%22%3A%22%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%22%2C%22detail%22%3A%7B%22icon%22%3A%22https%3A%2F%2Fres.wx.qq.com%2Fa%2Fwx_fed%2Fassets%2Fres%2FNTI4MWU5.ico%22%2C%22image%22%3A%22https%3A%2F%2Fmmbiz.qpic.cn%2Fmmbiz_jpg%2FmngWTkJEOYIKfXyUZic4azDTHWgv5tfRwUbkQibnQ9WWJmhNgozwk5OUvL2frGsOtWriaDf8HG29OVDZIIRqTrJlw%2F0%3Fwx_fmt%3Djpeg%22%2C%22title%22%3A%22%E5%88%9A%E8%BF%9B%E5%85%AC%E5%8F%B8%E5%B0%B1%E8%B4%9F%E8%B4%A3%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%8A%8A%E8%80%81%E5%BC%9F%E6%95%B4%E8%92%99%E4%BA%86%EF%BC%81%22%2C%22belong%22%3A%22%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%22%2C%22belong_url%22%3Anull%2C%22desc%22%3A%22%E5%88%86%E4%BA%AB%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9F%A5%E8%AF%86%22%2C%22url%22%3A%22https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI1NDczNTAwMA%3D%3D%26mid%3D2247541448%26idx%3D1%26sn%3Dfa08326ae7e25c85b7d18436b6d9ccff%26chksm%3De9c2c53fdeb54c29c6699260ed5cf343c4fee5fc3cf81e16fccc98c36aecb50a9bb94f29cae0%26token%3D855278184%26lang%3Dzh_CN%23rd%22%2C%22extra%22%3A%7B%7D%2C%22_serializer%22%3A%22web.editor_link_detail%22%7D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tg3HU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D" style="color: rgb(31, 35, 40)"></card><span data-lake-id="u57a1fba3" id="u57a1fba3" style="color: rgb(31, 35, 40)"> 详细了解技术选型。</span></p><p data-lake-id="u1b55e430" id="u1b55e430"><span data-lake-id="uf2532368" id="uf2532368" style="color: rgb(31, 35, 40)">回归到我们的 RPC 项目，其实框架目前是不够易用的。还记得么？光是我们的示例服务提供者，就要写下面这段又臭又长的代码！</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22provider%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20ProviderExample%20%7B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20ProviderBootstrap.ServiceRegisterInfo%5Cn%20%20%20%20%20%20%20%20%2F%2F%20RPC%20%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20%20%20%20ProviderBootstrap.init()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20UserService.class.getName()%3B%5Cn%20%20%20%20%20%20%20%20LocalRegistry.register(serviceName%2C%20UserServiceImpl.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E5%88%B0%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20%20%20%20%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(rpcConfig.getServerHost())%3B%5Cn%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(rpcConfig.getServerPort())%3B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%20web%20%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20VertxTcpServer%20vertxTcpServer%20%3D%20new%20VertxTcpServer()%3B%5Cn%20%20%20%20%20%20%20%20vertxTcpServer.doStart(8080)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Atrue%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22provider%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QVps7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="udf921dd1" id="udf921dd1"><span data-lake-id="u23acebe6" id="u23acebe6" style="color: rgb(31, 35, 40)">本节就来优化框架的易用性，通过建立合适的启动机制和注解驱动机制，帮助开发者最少只用一行代码，就能轻松使用框架！</span></p><h2 data-lake-id="kwgul" id="kwgul"><span data-lake-id="u981bdf9b" id="u981bdf9b" style="color: rgba(0, 0, 0, 0.85)">二、设计方案</span></h2><p data-lake-id="uc4de5cab" id="uc4de5cab"><span data-lake-id="uf29a5c19" id="uf29a5c19" style="color: rgb(31, 35, 40)">先来站在上帝视角，思考一下：怎么能让开发者用更少的代码启动框架？</span></p><h3 data-lake-id="Tv3UB" id="Tv3UB"><span data-lake-id="u325c9ce7" id="u325c9ce7" style="color: rgba(0, 0, 0, 0.85)">启动机制设计</span></h3><p data-lake-id="u5f278074" id="u5f278074"><span data-lake-id="uf052e08c" id="uf052e08c" style="color: rgb(31, 35, 40)">其实很简单，把所有启动代码封装成一个</span><span data-lake-id="u85f4fc01" id="u85f4fc01" style="color: rgb(31, 35, 40)"> </span><strong><span data-lake-id="u23a9761b" id="u23a9761b" style="color: rgb(31, 35, 40)">专门的启动类</span></strong><span data-lake-id="u0bdc7894" id="u0bdc7894" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u4c7d556d" id="u4c7d556d" style="color: rgb(31, 35, 40)">或方法，然后由服务提供者 / 服务消费者调用即可。</span></p><p data-lake-id="uba79d8b8" id="uba79d8b8"><span data-lake-id="u8f42f229" id="u8f42f229" style="color: rgb(31, 35, 40)">但有一点需要注意，服务提供者和服务消费者需要初始化的模块是不同的，比如</span><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u02c80f17" id="u02c80f17">服务消费者不需要启动 Web 服务器</span></u></span><span data-lake-id="u9978f117" id="u9978f117" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="u2c954c1b" id="u2c954c1b"><span data-lake-id="uf6845d28" id="uf6845d28" style="color: rgb(31, 35, 40)">所以我们需要针对服务提供者和消费者分别编写一个启动类，如果是二者都需要初始化的模块，可以放到全局应用类 </span><code data-lake-id="u7d00cb5f" id="u7d00cb5f"><span data-lake-id="ue40c8a67" id="ue40c8a67" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RpcApplication</span><span data-lake-id="uf59df903" id="uf59df903" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="uaf4e4224" id="uaf4e4224" style="color: rgb(31, 35, 40)">中，复用代码的同时保证启动类的可维护、可扩展性。</span></p><p data-lake-id="u3faa6b6c" id="u3faa6b6c"><span data-lake-id="u28b671bb" id="u28b671bb" style="color: rgb(31, 35, 40)">在 Dubbo 中，就有类似的设计，参考文档：</span><card type="inline" name="bookmarkInline" value="data:%7B%22mode%22%3A%22title%22%2C%22src%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fapi%2F%22%2C%22text%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fapi%2F%22%2C%22detail%22%3A%7B%22icon%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fimgs%2Ffavicon.png%22%2C%22image%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fimgs%2Fdocs3-v2%2Fjava-sdk%2Fquickstart%2F2023-01-31-10-50-33-image.png%22%2C%22title%22%3A%222%20-%20%E5%9F%BA%E4%BA%8E%20Dubbo%20API%20%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%22%2C%22belong%22%3A%22Apache%20Dubbo%22%2C%22belong_url%22%3Anull%2C%22desc%22%3A%22%E6%9C%AC%E6%96%87%E5%B0%86%E5%9F%BA%E4%BA%8E%20Dubbo%20Samples%20%E7%A4%BA%E4%BE%8B%E6%BC%94%E7%A4%BA%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%20Dubbo%20API%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E3%80%82%22%2C%22url%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fapi%2F%22%2C%22extra%22%3A%7B%7D%2C%22_serializer%22%3A%22web.editor_link_detail%22%7D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22me5MS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D" style="color: rgb(31, 35, 40)"></card><span data-lake-id="u5209914a" id="u5209914a" style="color: rgb(31, 35, 40)"> 。</span></p><h3 data-lake-id="HZ0x2" id="HZ0x2"><span data-lake-id="u13d0f9ce" id="u13d0f9ce" style="color: rgba(0, 0, 0, 0.85)">注解驱动设计</span></h3><p data-lake-id="u26f82cff" id="u26f82cff"><span data-lake-id="u05bd3a1e" id="u05bd3a1e" style="color: rgb(31, 35, 40)">除了启动类外，其实还有一种更牛的方法，能帮助开发者使用框架。</span></p><p data-lake-id="uf7eaf383" id="uf7eaf383"><span data-lake-id="ub96ce522" id="ub96ce522" style="color: rgb(31, 35, 40)">学过 Dubbo 这款 RPC 框架的同学应该会有印象，Dubbo 中是如何让开发者快速使用框架的呢？</span></p><p data-lake-id="u9a758e7c" id="u9a758e7c"><span data-lake-id="u11d3ccf0" id="u11d3ccf0" style="color: rgb(31, 35, 40)">它的做法是 </span><strong><span data-lake-id="ub34685b3" id="ub34685b3" style="color: rgb(31, 35, 40)">注解驱动</span></strong><span data-lake-id="u45005e2d" id="u45005e2d" style="color: rgb(31, 35, 40)">，开发者只需要在服务提供者实现类打上一个 </span><code data-lake-id="u2b6f6605" id="u2b6f6605"><span data-lake-id="u96c3de1c" id="u96c3de1c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">DubboService</span><span data-lake-id="uf31aaba9" id="uf31aaba9" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="ud75a1143" id="ud75a1143" style="color: rgb(31, 35, 40)">注解，就能快速注册服务；同样的，只要在服务消费者字段打上一个 </span><code data-lake-id="u8a4c2d91" id="u8a4c2d91"><span data-lake-id="u37638606" id="u37638606" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">DubboReference</span><span data-lake-id="uf275f05c" id="uf275f05c" style="color: rgb(31, 35, 40)"> </span></code><span data-lake-id="u3f07661b" id="u3f07661b" style="color: rgb(31, 35, 40)">注解，就能快速使用服务。</span></p><p data-lake-id="u3318ff64" id="u3318ff64"><span data-lake-id="uaf97adb8" id="uaf97adb8" style="color: rgb(31, 35, 40)">如图：</span></p><p data-lake-id="u4b4d043f" id="u4b4d043f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713961635757-3abfd865-838d-4c05-8100-5904b7b9f963.png%22%2C%22taskId%22%3A%22uc1ef99d3-ec02-466c-9fa1-b74809757e1%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221710124890093-6003e449-a2d9-48fb-a197-ea9295f7b7b3.png%22%2C%22size%22%3A1282105%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2270%2C%22originHeight%22%3A1216%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22DUBBO-SPRING-BOOT-DEMO%20DEMOSERVICELMPL%20DUBBO%20DUBBO-%20PROVIDER%20JAVA%20DEMO%20SRC%20ORG%20MO-PROVIDER%20APACHE%20MAIN%20SPRINGBOOT%20PROJECT%20POM.XML(DUBBO-SPRING-BOOT-DEMO-PROVIDER)%20X%20PROIECT%20DEMOSERVICE%20JAVA%20DEMOSERVICELMPL.JAVA%20DUBBO-SPRING-BOOT-DEMO~%2FCODE%2FDUBBO-SPRING-BOOT-DEMO%20ACHE.DUBBO.SPRINGBOOT.DEMO.PROVIDER%3B%20PACKAGE%20ORG.%20.APACHE.%20.IDEA%20DUBBO-SPRING-BOOT-DEMO-CONSUMER%20COMMIT%20SRC%20SIMPORT%20ORG.APACHE.DUBBO.CONFIG.ANNOTATION.DUBBOSERVICE%3B%20MAIN%20IMPORT%20ORG.APACHE.DUBBO.SPRINGBOOT.DEMO.DEMOSERVICE%3B%20JAVA%20ORG.APACHE.DUBBO.SPRINGBOOT.DEMO.CONSUMER%20%40DUBBOSERVICE%20RESOURCES%20PUBLIC%20CLASS%20DEMOSERVICEIMPL%20IMPLEMENTS%20DEMOSERVICE%20%7B%20MPOM.XML%20DUBBO-SPRING-BOOT-DEMO-INTERFACE%201%20USAGE%20SRC%20%40OVERRIDE%20MAIN%20JAVA%20PUBLIC%20STRING%20SAYHELLO(STRING%20NAME)%20(%20RETURN%20%5C%22HELLO%20%5C%22%20%2B%20NAME%3B%20%7D%20%E7%94%B3%20ORG.APACHE.DUBBO.SPRINGBOOT.DEMO%20%E5%AD%90%20DEMOSERVICE%2015%20RESOURCES%20POM.XML%20DUBBO-SPRING-BOOT-DEMO-PROVIDER%20SRO%20MAIN%20IAVA%20ORABACHE.DUBBO.SPRINGBOOT.DEMO.PROVIDER%20DEMOSERVICELMPL%20G%20RESOURCES%20POM.XML%20GITIGNORE%20POM.XML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A18%2C%22y%22%3A19%2C%22width%22%3A316%2C%22height%22%3A26%2C%22text%22%3A%22DUBBO-SPRING-BOOT-DEMO%22%7D%2C%7B%22x%22%3A1754%2C%22y%22%3A19%2C%22width%22%3A200%2C%22height%22%3A24%2C%22text%22%3A%22DEMOSERVICELMPL%22%7D%2C%7B%22x%22%3A1238%2C%22y%22%3A20%2C%22width%22%3A77%2C%22height%22%3A25%2C%22text%22%3A%22DUBBO%22%7D%2C%7B%22x%22%3A366%2C%22y%22%3A20%2C%22width%22%3A81%2C%22height%22%3A23%2C%22text%22%3A%22DUBBO-%22%7D%2C%7B%22x%22%3A1591%2C%22y%22%3A20%2C%22width%22%3A103%2C%22height%22%3A24%2C%22text%22%3A%22PROVIDER%22%7D%2C%7B%22x%22%3A978%2C%22y%22%3A21%2C%22width%22%3A47%2C%22height%22%3A22%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A1499%2C%22y%22%3A21%2C%22width%22%3A66%2C%22height%22%3A23%2C%22text%22%3A%22DEMO%22%7D%2C%7B%22x%22%3A822%2C%22y%22%3A22%2C%22width%22%3A39%2C%22height%22%3A21%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A1059%2C%22y%22%3A22%2C%22width%22%3A35%2C%22height%22%3A22%2C%22text%22%3A%22ORG%22%7D%2C%7B%22x%22%3A649%2C%22y%22%3A21%2C%22width%22%3A145%2C%22height%22%3A25%2C%22text%22%3A%22MO-PROVIDER%22%7D%2C%7B%22x%22%3A1127%2C%22y%22%3A21%2C%22width%22%3A85%2C%22height%22%3A24%2C%22text%22%3A%22APACHE%22%7D%2C%7B%22x%22%3A893%2C%22y%22%3A22%2C%22width%22%3A54%2C%22height%22%3A22%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A1347%2C%22y%22%3A22%2C%22width%22%3A123%2C%22height%22%3A23%2C%22text%22%3A%22SPRINGBOOT%22%7D%2C%7B%22x%22%3A6%2C%22y%22%3A68%2C%22width%22%3A29%2C%22height%22%3A102%2C%22text%22%3A%22PROJECT%22%7D%2C%7B%22x%22%3A1587%2C%22y%22%3A73%2C%22width%22%3A508%2C%22height%22%3A25%2C%22text%22%3A%22POM.XML(DUBBO-SPRING-BOOT-DEMO-PROVIDER)%20X%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A73%2C%22width%22%3A84%2C%22height%22%3A24%2C%22text%22%3A%22PROIECT%22%7D%2C%7B%22x%22%3A962%2C%22y%22%3A75%2C%22width%22%3A192%2C%22height%22%3A24%2C%22text%22%3A%22DEMOSERVICE%20JAVA%22%7D%2C%7B%22x%22%3A1250%2C%22y%22%3A77%2C%22width%22%3A241%2C%22height%22%3A21%2C%22text%22%3A%22DEMOSERVICELMPL.JAVA%22%7D%2C%7B%22x%22%3A126%2C%22y%22%3A120%2C%22width%22%3A755%2C%22height%22%3A30%2C%22text%22%3A%22DUBBO-SPRING-BOOT-DEMO~%2FCODE%2FDUBBO-SPRING-BOOT-DEMO%22%7D%2C%7B%22x%22%3A1275%2C%22y%22%3A122%2C%22width%22%3A560%2C%22height%22%3A28%2C%22text%22%3A%22ACHE.DUBBO.SPRINGBOOT.DEMO.PROVIDER%3B%22%7D%2C%7B%22x%22%3A1032%2C%22y%22%3A126%2C%22width%22%3A117%2C%22height%22%3A24%2C%22text%22%3A%22PACKAGE%22%7D%2C%7B%22x%22%3A1163%2C%22y%22%3A128%2C%22width%22%3A62%2C%22height%22%3A24%2C%22text%22%3A%22ORG.%22%7D%2C%7B%22x%22%3A1213%2C%22y%22%3A128%2C%22width%22%3A122%2C%22height%22%3A23%2C%22text%22%3A%22.APACHE.%22%7D%2C%7B%22x%22%3A164%2C%22y%22%3A164%2C%22width%22%3A59%2C%22height%22%3A22%2C%22text%22%3A%22.IDEA%22%7D%2C%7B%22x%22%3A160%2C%22y%22%3A202%2C%22width%22%3A481%2C%22height%22%3A26%2C%22text%22%3A%22DUBBO-SPRING-BOOT-DEMO-CONSUMER%22%7D%2C%7B%22x%22%3A6%2C%22y%22%3A220%2C%22width%22%3A28%2C%22height%22%3A109%2C%22text%22%3A%22COMMIT%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A244%2C%22width%22%3A37%2C%22height%22%3A20%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A1037%2C%22y%22%3A252%2C%22width%22%3A877%2C%22height%22%3A32%2C%22text%22%3A%22SIMPORT%20ORG.APACHE.DUBBO.CONFIG.ANNOTATION.DUBBOSERVICE%3B%22%7D%2C%7B%22x%22%3A232%2C%22y%22%3A284%2C%22width%22%3A60%2C%22height%22%3A22%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A1037%2C%22y%22%3A301%2C%22width%22%3A830%2C%22height%22%3A28%2C%22text%22%3A%22IMPORT%20ORG.APACHE.DUBBO.SPRINGBOOT.DEMO.DEMOSERVICE%3B%22%7D%2C%7B%22x%22%3A267%2C%22y%22%3A325%2C%22width%22%3A53%2C%22height%22%3A23%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A301%2C%22y%22%3A363%2C%22width%22%3A571%2C%22height%22%3A25%2C%22text%22%3A%22ORG.APACHE.DUBBO.SPRINGBOOT.DEMO.CONSUMER%22%7D%2C%7B%22x%22%3A1033%2C%22y%22%3A388%2C%22width%22%3A214%2C%22height%22%3A24%2C%22text%22%3A%22%40DUBBOSERVICE%22%7D%2C%7B%22x%22%3A268%2C%22y%22%3A405%2C%22width%22%3A122%2C%22height%22%3A22%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A1033%2C%22y%22%3A425%2C%22width%22%3A856%2C%22height%22%3A38%2C%22text%22%3A%22PUBLIC%20CLASS%20DEMOSERVICEIMPL%20IMPLEMENTS%20DEMOSERVICE%20%7B%22%7D%2C%7B%22x%22%3A161%2C%22y%22%3A440%2C%22width%22%3A146%2C%22height%22%3A29%2C%22text%22%3A%22MPOM.XML%22%7D%2C%7B%22x%22%3A157%2C%22y%22%3A480%2C%22width%22%3A471%2C%22height%22%3A29%2C%22text%22%3A%22DUBBO-SPRING-BOOT-DEMO-INTERFACE%22%7D%2C%7B%22x%22%3A1097%2C%22y%22%3A521%2C%22width%22%3A91%2C%22height%22%3A26%2C%22text%22%3A%221%20USAGE%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A525%2C%22width%22%3A37%2C%22height%22%3A23%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A1097%2C%22y%22%3A562%2C%22width%22%3A149%2C%22height%22%3A27%2C%22text%22%3A%22%40OVERRIDE%22%7D%2C%7B%22x%22%3A232%2C%22y%22%3A562%2C%22width%22%3A65%2C%22height%22%3A23%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A264%2C%22y%22%3A603%2C%22width%22%3A56%2C%22height%22%3A24%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A1096%2C%22y%22%3A606%2C%22width%22%3A1013%2C%22height%22%3A31%2C%22text%22%3A%22PUBLIC%20STRING%20SAYHELLO(STRING%20NAME)%20(%20RETURN%20%5C%22HELLO%20%5C%22%20%2B%20NAME%3B%20%7D%22%7D%2C%7B%22x%22%3A1012%2C%22y%22%3A607%2C%22width%22%3A23%2C%22height%22%3A27%2C%22text%22%3A%22%E7%94%B3%22%7D%2C%7B%22x%22%3A319%2C%22y%22%3A645%2C%22width%22%3A424%2C%22height%22%3A24%2C%22text%22%3A%22ORG.APACHE.DUBBO.SPRINGBOOT.DEMO%22%7D%2C%7B%22x%22%3A1033%2C%22y%22%3A648%2C%22width%22%3A20%2C%22height%22%3A32%2C%22text%22%3A%22%E5%AD%90%22%7D%2C%7B%22x%22%3A309%2C%22y%22%3A681%2C%22width%22%3A198%2C%22height%22%3A28%2C%22text%22%3A%22DEMOSERVICE%22%7D%2C%7B%22x%22%3A917%2C%22y%22%3A690%2C%22width%22%3A32%2C%22height%22%3A32%2C%22text%22%3A%2215%22%7D%2C%7B%22x%22%3A275%2C%22y%22%3A726%2C%22width%22%3A117%2C%22height%22%3A22%2C%22text%22%3A%22RESOURCES%22%7D%2C%7B%22x%22%3A193%2C%22y%22%3A765%2C%22width%22%3A111%2C%22height%22%3A23%2C%22text%22%3A%22POM.XML%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A799%2C%22width%22%3A461%2C%22height%22%3A30%2C%22text%22%3A%22DUBBO-SPRING-BOOT-DEMO-PROVIDER%22%7D%2C%7B%22x%22%3A199%2C%22y%22%3A846%2C%22width%22%3A35%2C%22height%22%3A18%2C%22text%22%3A%22SRO%22%7D%2C%7B%22x%22%3A235%2C%22y%22%3A885%2C%22width%22%3A58%2C%22height%22%3A21%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A269%2C%22y%22%3A924%2C%22width%22%3A55%2C%22height%22%3A21%2C%22text%22%3A%22IAVA%22%7D%2C%7B%22x%22%3A302%2C%22y%22%3A961%2C%22width%22%3A548%2C%22height%22%3A32%2C%22text%22%3A%22ORABACHE.DUBBO.SPRINGBOOT.DEMO.PROVIDER%22%7D%2C%7B%22x%22%3A338%2C%22y%22%3A1002%2C%22width%22%3A223%2C%22height%22%3A28%2C%22text%22%3A%22DEMOSERVICELMPL%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A1045%2C%22width%22%3A146%2C%22height%22%3A23%2C%22text%22%3A%22G%20RESOURCES%22%7D%2C%7B%22x%22%3A193%2C%22y%22%3A1084%2C%22width%22%3A112%2C%22height%22%3A21%2C%22text%22%3A%22POM.XML%22%7D%2C%7B%22x%22%3A165%2C%22y%22%3A1124%2C%22width%22%3A114%2C%22height%22%3A25%2C%22text%22%3A%22GITIGNORE%22%7D%2C%7B%22x%22%3A154%2C%22y%22%3A1163%2C%22width%22%3A114%2C%22height%22%3A24%2C%22text%22%3A%22POM.XML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f5ef%22%2C%22id%22%3A%22u318a652e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ud55940ba" id="ud55940ba"><span data-lake-id="u6cba25ea" id="u6cba25ea" style="color: rgb(31, 35, 40)">由于现在的 Java 项目基本都使用 Spring Boot 框架，所以 Dubbo 还贴心地推出了 Spring Boot Starter，用更少的代码在 Spring Boot 项目中使用框架。</span></p><p data-lake-id="u7b29b9fb" id="u7b29b9fb"><span data-lake-id="u401f94d5" id="u401f94d5" style="color: rgb(31, 35, 40)">参考文档：</span><card type="inline" name="bookmarkInline" value="data:%7B%22mode%22%3A%22title%22%2C%22src%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fspring-boot%2F%22%2C%22text%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fspring-boot%2F%22%2C%22detail%22%3A%7B%22icon%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fimgs%2Ffavicon.png%22%2C%22image%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fimgs%2Fdocs3-v2%2Fjava-sdk%2Fquickstart%2F2023-02-08-17-25-27-image.png%22%2C%22title%22%3A%223%20-%20%E5%9F%BA%E4%BA%8E%20Spring%20Boot%20Starter%20%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%22%2C%22belong%22%3A%22Apache%20Dubbo%22%2C%22belong_url%22%3Anull%2C%22desc%22%3A%22%E6%9C%AC%E6%96%87%E5%B0%86%E5%9F%BA%E4%BA%8E%20Dubbo%20Samples%20%E7%A4%BA%E4%BE%8B%E6%BC%94%E7%A4%BA%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%20Dubbo%20x%20Spring%20Boot%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%E3%80%82%22%2C%22url%22%3A%22https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fmannual%2Fjava-sdk%2Fquick-start%2Fspring-boot%2F%22%2C%22extra%22%3A%7B%7D%2C%22_serializer%22%3A%22web.editor_link_detail%22%7D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nMkDu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D" style="color: rgb(31, 35, 40)"></card></p><p data-lake-id="u440425d5" id="u440425d5"><br></p><p data-lake-id="u319da86b" id="u319da86b"><span data-lake-id="ua9bf54fb" id="ua9bf54fb" style="color: rgb(31, 35, 40)">那我们也可以有样学样，创建一个 Spring Boot Starter 项目，并通过注解驱动框架的初始化，完成服务注册和获取引用。</span></p><p data-lake-id="u180ec7dc" id="u180ec7dc"><span data-lake-id="ua91a6bc4" id="ua91a6bc4" style="color: rgb(31, 35, 40)">1）关于 Spring Boot Starter 的开发，以前写过一篇 </span><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&amp;mid=2247530836&amp;idx=1&amp;sn=2ed9f251e8ff211d7e1c2455e636d1ae&amp;chksm=e9c29ea3deb517b58bd0643ce5c1da63516a1a5de60b4cd2448cce4c41d67d281f4c85d1a67e&amp;token=720877586&amp;lang=zh_CN#rd" data-lake-id="ud5856034" id="ud5856034"><span data-lake-id="ubf62ef09" id="ubf62ef09" style="color: rgb(31, 35, 40)">Starter教程</span></a><span data-lake-id="u0bbf8f1c" id="u0bbf8f1c" style="color: rgb(31, 35, 40)">，并且在 </span><a href="https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd" data-lake-id="uca0584cf" id="uca0584cf"><span data-lake-id="u73c64530" id="u73c64530">编程导航</span></a><span data-lake-id="uc1e8c74d" id="uc1e8c74d"> </span><span data-lake-id="u05bb71fc" id="u05bb71fc" style="color: rgb(31, 35, 40)">的 API 开放平台项目中，带大家实践过基于 Spring Boot Starter 的 SDK 开发。</span></p><p data-lake-id="ue8a3508f" id="ue8a3508f"><span data-lake-id="ucfccd551" id="ucfccd551" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ua0046a7f" id="ua0046a7f"><span data-lake-id="u4a38d883" id="u4a38d883" style="color: rgb(31, 35, 40)">2）实现注解驱动并不复杂，有 2 种常用的方式：</span></p><ol list="u14435452"><li fid="u50a6e864" data-lake-id="u434df90b" id="u434df90b"><span data-lake-id="u7db89a1d" id="u7db89a1d" style="color: rgb(31, 35, 40)">主动扫描：让开发者指定要扫描的路径，然后遍历所有的类文件，针对有注解的类文件，执行自定义的操作。</span></li><li fid="u50a6e864" data-lake-id="u31b3b9bd" id="u31b3b9bd"><strong><span data-lake-id="uf01605a5" id="uf01605a5" style="color: rgb(31, 35, 40)">监听 Bean 加载</span></strong><span data-lake-id="u6085418f" id="u6085418f" style="color: rgb(31, 35, 40)">：在 Spring 项目中，可以通过实现 BeanPostProcessor 接口，在 Bean 初始化后执行自定义的操作。（该项目使用的就是这种）</span></li></ol><p data-lake-id="u3957b580" id="u3957b580"><br></p><p data-lake-id="u86b4afbb" id="u86b4afbb"><span data-lake-id="ufc69357a" id="ufc69357a" style="color: rgb(31, 35, 40)">有了思路后，下面我们依次开发实现</span><strong><span data-lake-id="ua8006ee6" id="ua8006ee6" style="color: rgb(31, 35, 40)">启动机制和注解驱动</span></strong><span data-lake-id="u1bbbbbba" id="u1bbbbbba" style="color: rgb(31, 35, 40)">。</span></p><h2 data-lake-id="PRYlb" id="PRYlb"><span data-lake-id="u3d559b12" id="u3d559b12" style="color: rgba(0, 0, 0, 0.85)">三、开发实现</span></h2><h3 data-lake-id="AvEwq" id="AvEwq"><span data-lake-id="u190fb17e" id="u190fb17e" style="color: rgba(0, 0, 0, 0.85)">启动机制</span></h3><p data-lake-id="u0e2ee7ba" id="u0e2ee7ba"><span data-lake-id="u0022095b" id="u0022095b" style="color: rgb(31, 35, 40)">我们在 rpc 项目中新建包名 </span><code data-lake-id="u7eb3cfde" id="u7eb3cfde"><span data-lake-id="uf0ae6643" id="uf0ae6643" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">bootstrap</span></code><span data-lake-id="uc7e558d3" id="uc7e558d3" style="color: rgb(31, 35, 40)">，所有和框架启动初始化相关的代码都放到该包下。</span></p><h4 data-lake-id="X6roZ" id="X6roZ"><span data-lake-id="ub8c3e6fc" id="ub8c3e6fc" style="color: rgba(0, 0, 0, 0.85)">服务提供者启动类</span></h4><p data-lake-id="ucbf7c5ed" id="ucbf7c5ed"><span data-lake-id="udcfc06d5" id="udcfc06d5" style="color: rgb(31, 35, 40)">新建 </span><code data-lake-id="ub72c5192" id="ub72c5192"><span data-lake-id="ud7eb2372" id="ud7eb2372" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ProviderBootstrap</span><span data-lake-id="u32e261c2" id="u32e261c2" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u42051fc9" id="u42051fc9" style="color: rgb(31, 35, 40)">类，先直接复制之前服务提供者示例项目中的初始化代码，然后略微改造，支持用户传入自己要注册的服务。</span></p><p data-lake-id="u91c7146c" id="u91c7146c"><span data-lake-id="u8c8815f1" id="u8c8815f1" style="color: rgb(31, 35, 40)">在注册服务时，我们需要填入多个字段，比如服务名称、服务实现类，参考代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5CnString%20serviceName%20%3D%20UserService.class.getName()%3B%5CnLocalRegistry.register(serviceName%2C%20UserServiceImpl.class)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qazuA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ua0ec7038" id="ua0ec7038"><span data-lake-id="ub7c6fb7e" id="ub7c6fb7e" style="color: rgb(31, 35, 40)">我们可以将这些字段进行封装，在 </span><code data-lake-id="u20bc7342" id="u20bc7342"><span data-lake-id="u46433b36" id="u46433b36" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">model</span></code><span data-lake-id="ucfadf764" id="ucfadf764" style="color: rgb(31, 35, 40)">包下新建 </span><code data-lake-id="u06892638" id="u06892638"><span data-lake-id="u3e07621a" id="u3e07621a" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ServiceRegisterInfo</span><span data-lake-id="u4240e699" id="u4240e699" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u635030ad" id="u635030ad" style="color: rgb(31, 35, 40)">类，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.bootstrap%3B%5Cn%5Cnimport%20lombok.AllArgsConstructor%3B%5Cnimport%20lombok.Data%3B%5Cnimport%20lombok.NoArgsConstructor%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cn%40Data%5Cn%40AllArgsConstructor%5Cn%40NoArgsConstructor%5Cnpublic%20class%20ServiceRegisterInfo%20%3CT%3E%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20String%20serviceName%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20private%20Class%3C%3F%20extends%20T%3E%20implClass%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g761K%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u15911b1b" id="u15911b1b"><span data-lake-id="u289c37b1" id="u289c37b1" style="color: rgb(31, 35, 40)">这样一来，服务提供者的初始化方法只需要接受封装的注册信息列表作为参数即可，简化了方法。</span></p><p data-lake-id="uefd57766" id="uefd57766"><span data-lake-id="u83ed4d0a" id="u83ed4d0a" style="color: rgb(31, 35, 40)">服务提供者完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.bootstrap%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpServer%3B%5Cn%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E5%90%AF%E5%8A%A8%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20class%20ProviderBootstrap%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20*%20%20%EF%BC%88%E4%B8%8Ecom.yybf.example.provider.ProviderExample%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E4%B8%80%E8%87%B4%EF%BC%89%5Cn%20%20%20%20%20*%20%40param%20serviceRegisterInfoList%3A%20%E4%BC%A0%E5%85%A5%E7%9A%84%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F18%2021%3A32%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20init(List%3CServiceRegisterInfo%3E%20serviceRegisterInfoList)%20%7B%5Cn%20%20%20%20%20%20%20%20RpcApplication.init()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8A%A0%E8%BD%BD%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20final%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20for%20(ServiceRegisterInfo%3C%3F%3E%20serviceRegisterInfo%20%3A%20serviceRegisterInfoList)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20serviceRegisterInfo.getServiceName()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%AC%E5%9C%B0%E6%B3%A8%E5%86%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20LocalRegistry.register(serviceName%2CserviceRegisterInfo.getImplClass())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E5%88%B0%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(rpcConfig.getServerHost())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(rpcConfig.getServerPort())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8TCP%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20VertxTcpServer%20vertxTcpServer%20%3D%20new%20VertxTcpServer()%3B%5Cn%20%20%20%20%20%20%20%20vertxTcpServer.doStart(rpcConfig.getServerPort())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kfYGe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="udbeb2902" id="udbeb2902"><span data-lake-id="u5713a274" id="u5713a274" style="color: rgb(31, 35, 40)">现在想要在服务提供者项目中使用 RPC 框架，就非常简单了。只需要定义要注册的服务列表，然后一行代码调用 </span><code data-lake-id="u669069f6" id="u669069f6"><span data-lake-id="u82a4f0f3" id="u82a4f0f3" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ProviderBootstrap.init</span></code><span data-lake-id="ua22ede9a" id="ua22ede9a" style="color: rgb(31, 35, 40)">方法即可完成初始化。</span></p><p data-lake-id="ufa6937e1" id="ufa6937e1"><span data-lake-id="u9a912c6a" id="u9a912c6a" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.example.provider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.bootstrap.ProviderBootstrap%3B%5Cnimport%20com.yybf.chenrpc.bootstrap.ServiceRegisterInfo%3B%5Cnimport%20com.yybf.example.common.service.TicketService%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cn%5Cnimport%20java.util.ArrayList%3B%5Cnimport%20java.util.List%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%88%A9%E7%94%A8%E5%B0%81%E8%A3%85%E5%A5%BD%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F18%5Cn%20*%2F%5Cnpublic%20class%20QuickProvider%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%9C%80%E8%A6%81%E6%B3%A8%E5%86%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20List%3CServiceRegisterInfo%3E%20serviceRegisterInfoList%20%3D%20new%20ArrayList%3C%3E()%3B%5Cn%20%20%20%20%20%20%20%20ServiceRegisterInfo%20serviceRegisterInfo%20%3D%20new%20ServiceRegisterInfo(UserService.class.getName()%2C%20UserServiceImpl.class)%3B%5Cn%20%20%20%20%20%20%20%20ServiceRegisterInfo%20serviceRegisterInfo1%20%3D%20new%20ServiceRegisterInfo(TicketService.class.getName()%2C%20TicketServiceImpl.class)%3B%5Cn%20%20%20%20%20%20%20%20serviceRegisterInfoList.add(serviceRegisterInfo)%3B%5Cn%20%20%20%20%20%20%20%20serviceRegisterInfoList.add(serviceRegisterInfo1)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20%20%20%20ProviderBootstrap.init(serviceRegisterInfoList)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yNtPv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="fNnKC" id="fNnKC"><span data-lake-id="u25b2c467" id="u25b2c467" style="color: rgba(0, 0, 0, 0.85)">服务消费者启动类</span></h4><p data-lake-id="uec076672" id="uec076672"><span data-lake-id="u65367f37" id="u65367f37" style="color: rgb(31, 35, 40)">服务消费者启动类的实现就更简单了，因为它不需要注册服务、也不需要启动 Web 服务器，只需要执行 </span><span data-lake-id="u3b804361" id="u3b804361" class="lake-fontsize-10" style="color: rgb(31, 35, 40)"> </span><code data-lake-id="u9f65420b" id="u9f65420b"><span data-lake-id="u289b0da8" id="u289b0da8" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RpcApplication.init</span></code><span data-lake-id="u9733b52d" id="u9733b52d" style="color: rgb(31, 35, 40)"> 完成框架的通用初始化即可。</span></p><p data-lake-id="u93b114c9" id="u93b114c9"><span data-lake-id="ue93f9545" id="ue93f9545" style="color: rgb(31, 35, 40)">服务消费者启动类的完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.bootstrap%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cn%5Cn%2F**%5Cn%20*%20%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%90%AF%E5%8A%A8%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F20%5Cn%20*%2F%5Cnpublic%20class%20ConsumerBootstrap%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%88%9D%E5%A7%8B%E5%8C%96%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20public%20static%20void%20init()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20RPC%E6%A1%86%E6%9E%B6%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%88%E7%94%A8%E4%BA%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E5%92%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%89%20--%20%E4%BD%86%E6%98%AF%E6%88%91%E6%84%9F%E8%A7%89%E8%BF%99%E4%B8%80%E6%AD%A5%E6%B2%A1%E5%95%A5%E5%BF%85%E8%A6%81%5Cn%20%20%20%20%20%20%20%20RpcApplication.init()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22i6MKK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u5c7f8b72" id="u5c7f8b72"><span data-lake-id="u5dbb76d3" id="u5dbb76d3">现在的项目结构：</span></p><p data-lake-id="u9b10cf8a" id="u9b10cf8a"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713962963533-5cb9fc19-aa4c-478f-9e66-919d6d91feb1.png%22%2C%22taskId%22%3A%22ue015ebab-4a06-494a-a600-92b3cd6f430%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A527%2C%22height%22%3A331%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A93946%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A527%2C%22originHeight%22%3A331%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22-CHEN-RPC%20D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%20.IDEA%20CHEN-ROC-CORE%20SRC%20MAIN%20JAVA%20COM%20YYBF%20CHENRPC%20BOOTSTRAP%20CONSUMERBOOTSTRAP%20PROVIDERBOOTSTRAP%20SERVICEREGISTERLNFO%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A56%2C%22y%22%3A-1%2C%22width%22%3A432%2C%22height%22%3A22%2C%22text%22%3A%22-CHEN-RPC%20D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A27%2C%22width%22%3A36%2C%22height%22%3A16%2C%22text%22%3A%22.IDEA%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A54%2C%22width%22%3A111%2C%22height%22%3A16%2C%22text%22%3A%22CHEN-ROC-CORE%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A81%2C%22width%22%3A22%2C%22height%22%3A11%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A123%2C%22y%22%3A105%2C%22width%22%3A37%2C%22height%22%3A12%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A146%2C%22y%22%3A129%2C%22width%22%3A29%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A169%2C%22y%22%3A156%2C%22width%22%3A32%2C%22height%22%3A11%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A191%2C%22y%22%3A178%2C%22width%22%3A34%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A213%2C%22y%22%3A204%2C%22width%22%3A61%2C%22height%22%3A16%2C%22text%22%3A%22CHENRPC%22%7D%2C%7B%22x%22%3A236%2C%22y%22%3A228%2C%22width%22%3A74%2C%22height%22%3A17%2C%22text%22%3A%22BOOTSTRAP%22%7D%2C%7B%22x%22%3A260%2C%22y%22%3A253%2C%22width%22%3A146%2C%22height%22%3A17%2C%22text%22%3A%22CONSUMERBOOTSTRAP%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A279%2C%22width%22%3A136%2C%22height%22%3A15%2C%22text%22%3A%22PROVIDERBOOTSTRAP%22%7D%2C%7B%22x%22%3A258%2C%22y%22%3A303%2C%22width%22%3A144%2C%22height%22%3A16%2C%22text%22%3A%22SERVICEREGISTERLNFO%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2347525d%22%2C%22id%22%3A%22u83bd41ac%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u803fd29f" id="u803fd29f"><span data-lake-id="u703fe0d4" id="u703fe0d4" style="color: rgb(31, 35, 40)">服务消费者示例项目的代码不会有明显的变化，只不过改为调用启动类了。</span></p><p data-lake-id="uc9f1e0d8" id="uc9f1e0d8"><span data-lake-id="ub49bc67f" id="ub49bc67f" style="color: rgb(31, 35, 40)">示例代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%89%A9%E5%B1%95RPC%E5%90%8E%E7%A4%BA%E4%BE%8B%E6%B6%88%E8%B4%B9%E8%80%85%E7%B1%BB%EF%BC%8C%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%BB%E5%8F%96%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F8%5Cn%20*%2F%5Cnpublic%20class%20QuickConsumer%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20throws%20InterruptedException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%88%9D%E5%A7%8B%E5%8C%96%20%EF%BC%9F%EF%BC%9F%EF%BC%9F%EF%BC%9F%5Cn%20%20%20%20%20%20%20%20ConsumerBootstrap.init()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20%20%20%20UserService%20userService%20%3D%20ServiceProxyFactory.getProxy(UserService.class)%3B%5Cn%20%20%20%20%20%20%20%20User%20user%20%3D%20new%20User()%3B%5Cn%20%20%20%20%20%20%20%20user.setName(%5C%22yybf%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20User%20newUser%20%3D%20userService.getUser(user)%3B%5Cn%20%20%20%20%20%20%20%20if(newUser%20!%3D%20null)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(newUser.getName())%3B%5Cn%20%20%20%20%20%20%20%20%7Delse%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(%5C%22user%20%3D%3D%20null%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VSJaH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u349f4240" id="u349f4240" open="false" class="lake-collapse"><summary data-lake-id="uc2ee75af" id="uc2ee75af" class="lake-summary"><span data-lake-id="uc4420e30" id="uc4420e30">关于上面的代码的疑问</span></summary><p data-lake-id="u03bc0607" id="u03bc0607"><span data-lake-id="u763eb4d3" id="u763eb4d3">关于上面的服务提供者初始化</span><code data-lake-id="ua0894347" id="ua0894347"><span data-lake-id="ua64b10b8" id="ua64b10b8">ConsumerBootstrap.init();</span></code><span data-lake-id="u1b6d80da" id="u1b6d80da">我认为这个代码没有必要，这个应该是来初始化RPC框架（用来初始化配置和注册中心），而在代理工厂类中也会读取配置，所以这个应该是可有可无的。</span></p><p data-lake-id="u5e3cd8d4" id="u5e3cd8d4"><span data-lake-id="u1d44d7ea" id="u1d44d7ea">而且我在注释了这段代码之后，再次运行，也是可以调用到远程的服务提供者。所以这里代码的左右存疑</span></p><p data-lake-id="ucc5d0074" id="ucc5d0074"><span data-lake-id="u3a80894e" id="u3a80894e">todo</span></p></details><h3 data-lake-id="dgp16" id="dgp16"><span data-lake-id="ue404353d" id="ue404353d" style="color: rgba(0, 0, 0, 0.85)">Spring Boot Starter 注解驱动</span></h3><p data-lake-id="ua13047c8" id="ua13047c8"><span data-lake-id="uae4964ae" id="uae4964ae" style="color: rgb(31, 35, 40)">注意，</span><strong><span data-lake-id="ucf5c69be" id="ucf5c69be" style="color: rgb(31, 35, 40)">为了便于学习</span></strong><span data-lake-id="u3289865b" id="u3289865b" style="color: rgb(31, 35, 40)">，不要和已有项目的代码混淆，再来创建一个新的项目模块，专门用于实现 Spring Boot Starter 注解驱动的 RPC 框架。</span></p><p data-lake-id="ucafd4006" id="ucafd4006"><span data-lake-id="u46a033b3" id="u46a033b3" style="color: rgb(31, 35, 40)">Dubbo 是在框架内引入了 spring-context，会让整个框架更内聚，但是不利于学习理解。</span></p><h4 data-lake-id="Bwgb9" id="Bwgb9"><span data-lake-id="u8899d886" id="u8899d886" style="color: rgba(0, 0, 0, 0.85)">1、Spring Boot Starter 项目初始化</span></h4><p data-lake-id="u367af41a" id="u367af41a"><span data-lake-id="ub42a2689" id="ub42a2689" style="color: rgb(31, 35, 40)">在项目根目录（chen-rpc）处右键新建模块：</span></p><p data-lake-id="u585fea54" id="u585fea54"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713963449129-f05a6473-b31e-45b2-9cbf-30098d493f59.png%22%2C%22taskId%22%3A%22ueaf20447-ce05-4b2a-827f-cbae728b701%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221710126454021-0faa783f-a87d-403b-a9ec-617eeaba237e.png%22%2C%22size%22%3A405456%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A2424%2C%22originHeight%22%3A948%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NEW%20CLASS%20JAVA%20MODULE%20X%20CUT%20YU-RPC%20X%24%20-KOTLIN%20CLASS%2FFILE%20%E7%9B%BE%20COPY%209GC%20PROJECT%20FILE%20PROJE%20COPY%20PATH%2FREFERENCE...%20YU-RPC~%2FCODE%2FYU-RPC%20SCRATCH%20FILE%20%E4%BB%8BN%20GV%20PASTE%20IDEA%20DIRECTORY%20EXAMPLE-COMMON%20LF7%20FIND%20USAGES%20PULL%20REQUESTS%20HTML%20FILE%20EXAMPLE-CONSUMER%20%E4%BB%8B%E9%BC%8EF%20FIND%20IN%20FILES...%20STYLESHEET%20EXAMPLE-PROVIDER%20CSS%20REPLACE%20IN%20FILES...%20%E4%BB%8B%E7%BB%8DR%20JAVASCRIPT%20FILE%20EXAMPLE-SPRINGBOOT-CONSUMER%20JS%20ANALYZE%20EXAMPLE-SPRINGBOOT-PROVIDER%20TYPESCRIPT%20FILE%20REFACTOR%20YU-RPC-CORE%20PACKAGE.JSON%20YU-RPC-EASY%20DOCKERFILE%20BOOKMARKS%20YU-RPC-SPRING-BOOT-STARTER%20HTTPREQUEST%207981%20REFORMAT%20CODE%20IDEA%20OPENAPI%20SPECIFICATION%200%E7%AC%AC1%20SRC%20OPTIMIZE%20LMPORTS%20RESOURCE%20BUNDLE%20MAIN%20%E5%9B%AD%20REMOVE%20MODULE%20EDITORCONFIG%20FILE%20JAVA%20OPEN%20TERMINAL%20AT%20THE%20CURRENT%20MAVEN%20MODULE%20PATH%20GENERATE%20POJO%20FROM%20JSON%20POJO%20I%20COM%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1091%2C%22y%22%3A12%2C%22width%22%3A69%2C%22height%22%3A28%2C%22text%22%3A%22NEW%22%7D%2C%7B%22x%22%3A2072%2C%22y%22%3A15%2C%22width%22%3A75%2C%22height%22%3A27%2C%22text%22%3A%22CLASS%22%7D%2C%7B%22x%22%3A1992%2C%22y%22%3A15%2C%22width%22%3A67%2C%22height%22%3A26%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A1990%2C%22y%22%3A64%2C%22width%22%3A112%2C%22height%22%3A29%2C%22text%22%3A%22MODULE%22%7D%2C%7B%22x%22%3A1044%2C%22y%22%3A85%2C%22width%22%3A108%2C%22height%22%3A34%2C%22text%22%3A%22X%20CUT%22%7D%2C%7B%22x%22%3A62%2C%22y%22%3A87%2C%22width%22%3A113%2C%22height%22%3A29%2C%22text%22%3A%22YU-RPC%22%7D%2C%7B%22x%22%3A1831%2C%22y%22%3A89%2C%22width%22%3A56%2C%22height%22%3A26%2C%22text%22%3A%22X%24%22%7D%2C%7B%22x%22%3A1949%2C%22y%22%3A118%2C%22width%22%3A297%2C%22height%22%3A33%2C%22text%22%3A%22-KOTLIN%20CLASS%2FFILE%22%7D%2C%7B%22x%22%3A1041%2C%22y%22%3A131%2C%22width%22%3A132%2C%22height%22%3A44%2C%22text%22%3A%22%E7%9B%BE%20COPY%22%7D%2C%7B%22x%22%3A1830%2C%22y%22%3A141%2C%22width%22%3A56%2C%22height%22%3A31%2C%22text%22%3A%229GC%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A151%2C%22width%22%3A111%2C%22height%22%3A33%2C%22text%22%3A%22PROJECT%22%7D%2C%7B%22x%22%3A1947%2C%22y%22%3A169%2C%22width%22%3A97%2C%22height%22%3A34%2C%22text%22%3A%22FILE%22%7D%2C%7B%22x%22%3A10%2C%22y%22%3A180%2C%22width%22%3A26%2C%22height%22%3A70%2C%22text%22%3A%22PROJE%22%7D%2C%7B%22x%22%3A1095%2C%22y%22%3A192%2C%22width%22%3A347%2C%22height%22%3A37%2C%22text%22%3A%22COPY%20PATH%2FREFERENCE...%22%7D%2C%7B%22x%22%3A145%2C%22y%22%3A217%2C%22width%22%3A383%2C%22height%22%3A28%2C%22text%22%3A%22YU-RPC~%2FCODE%2FYU-RPC%22%7D%2C%7B%22x%22%3A1991%2C%22y%22%3A226%2C%22width%22%3A179%2C%22height%22%3A31%2C%22text%22%3A%22SCRATCH%20FILE%22%7D%2C%7B%22x%22%3A2364%2C%22y%22%3A227%2C%22width%22%3A51%2C%22height%22%3A30%2C%22text%22%3A%22%E4%BB%8BN%22%7D%2C%7B%22x%22%3A1830%2C%22y%22%3A247%2C%22width%22%3A59%2C%22height%22%3A31%2C%22text%22%3A%22GV%22%7D%2C%7B%22x%22%3A1086%2C%22y%22%3A249%2C%22width%22%3A89%2C%22height%22%3A31%2C%22text%22%3A%22PASTE%22%7D%2C%7B%22x%22%3A209%2C%22y%22%3A263%2C%22width%22%3A74%2C%22height%22%3A29%2C%22text%22%3A%22IDEA%22%7D%2C%7B%22x%22%3A1994%2C%22y%22%3A280%2C%22width%22%3A141%2C%22height%22%3A34%2C%22text%22%3A%22DIRECTORY%22%7D%2C%7B%22x%22%3A202%2C%22y%22%3A317%2C%22width%22%3A300%2C%22height%22%3A27%2C%22text%22%3A%22EXAMPLE-COMMON%22%7D%2C%7B%22x%22%3A1814%2C%22y%22%3A322%2C%22width%22%3A69%2C%22height%22%3A32%2C%22text%22%3A%22LF7%22%7D%2C%7B%22x%22%3A1087%2C%22y%22%3A323%2C%22width%22%3A197%2C%22height%22%3A37%2C%22text%22%3A%22FIND%20USAGES%22%7D%2C%7B%22x%22%3A4%2C%22y%22%3A337%2C%22width%22%3A36%2C%22height%22%3A231%2C%22text%22%3A%22PULL%20REQUESTS%22%7D%2C%7B%22x%22%3A1991%2C%22y%22%3A354%2C%22width%22%3A151%2C%22height%22%3A34%2C%22text%22%3A%22HTML%20FILE%22%7D%2C%7B%22x%22%3A202%2C%22y%22%3A366%2C%22width%22%3A320%2C%22height%22%3A32%2C%22text%22%3A%22EXAMPLE-CONSUMER%22%7D%2C%7B%22x%22%3A1804%2C%22y%22%3A375%2C%22width%22%3A80%2C%22height%22%3A33%2C%22text%22%3A%22%E4%BB%8B%E9%BC%8EF%22%7D%2C%7B%22x%22%3A1087%2C%22y%22%3A376%2C%22width%22%3A217%2C%22height%22%3A37%2C%22text%22%3A%22FIND%20IN%20FILES...%22%7D%2C%7B%22x%22%3A1990%2C%22y%22%3A411%2C%22width%22%3A160%2C%22height%22%3A30%2C%22text%22%3A%22STYLESHEET%22%7D%2C%7B%22x%22%3A196%2C%22y%22%3A413%2C%22width%22%3A306%2C%22height%22%3A32%2C%22text%22%3A%22EXAMPLE-PROVIDER%22%7D%2C%7B%22x%22%3A1938%2C%22y%22%3A423%2C%22width%22%3A40%2C%22height%22%3A25%2C%22text%22%3A%22CSS%22%7D%2C%7B%22x%22%3A1087%2C%22y%22%3A424%2C%22width%22%3A286%2C%22height%22%3A45%2C%22text%22%3A%22REPLACE%20IN%20FILES...%22%7D%2C%7B%22x%22%3A1802%2C%22y%22%3A428%2C%22width%22%3A82%2C%22height%22%3A34%2C%22text%22%3A%22%E4%BB%8B%E7%BB%8DR%22%7D%2C%7B%22x%22%3A1989%2C%22y%22%3A465%2C%22width%22%3A215%2C%22height%22%3A31%2C%22text%22%3A%22JAVASCRIPT%20FILE%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A466%2C%22width%22%3A525%2C%22height%22%3A33%2C%22text%22%3A%22EXAMPLE-SPRINGBOOT-CONSUMER%22%7D%2C%7B%22x%22%3A1937%2C%22y%22%3A475%2C%22width%22%3A34%2C%22height%22%3A25%2C%22text%22%3A%22JS%22%7D%2C%7B%22x%22%3A1087%2C%22y%22%3A486%2C%22width%22%3A130%2C%22height%22%3A35%2C%22text%22%3A%22ANALYZE%22%7D%2C%7B%22x%22%3A200%2C%22y%22%3A509%2C%22width%22%3A503%2C%22height%22%3A36%2C%22text%22%3A%22EXAMPLE-SPRINGBOOT-PROVIDER%22%7D%2C%7B%22x%22%3A1989%2C%22y%22%3A518%2C%22width%22%3A229%2C%22height%22%3A32%2C%22text%22%3A%22TYPESCRIPT%20FILE%22%7D%2C%7B%22x%22%3A1087%2C%22y%22%3A561%2C%22width%22%3A136%2C%22height%22%3A32%2C%22text%22%3A%22REFACTOR%22%7D%2C%7B%22x%22%3A197%2C%22y%22%3A564%2C%22width%22%3A209%2C%22height%22%3A30%2C%22text%22%3A%22YU-RPC-CORE%22%7D%2C%7B%22x%22%3A1988%2C%22y%22%3A574%2C%22width%22%3A207%2C%22height%22%3A32%2C%22text%22%3A%22PACKAGE.JSON%22%7D%2C%7B%22x%22%3A197%2C%22y%22%3A614%2C%22width%22%3A213%2C%22height%22%3A33%2C%22text%22%3A%22YU-RPC-EASY%22%7D%2C%7B%22x%22%3A1989%2C%22y%22%3A625%2C%22width%22%3A162%2C%22height%22%3A33%2C%22text%22%3A%22DOCKERFILE%22%7D%2C%7B%22x%22%3A1089%2C%22y%22%3A639%2C%22width%22%3A176%2C%22height%22%3A31%2C%22text%22%3A%22BOOKMARKS%22%7D%2C%7B%22x%22%3A198%2C%22y%22%3A662%2C%22width%22%3A473%2C%22height%22%3A37%2C%22text%22%3A%22YU-RPC-SPRING-BOOT-STARTER%22%7D%2C%7B%22x%22%3A1939%2C%22y%22%3A675%2C%22width%22%3A274%2C%22height%22%3A42%2C%22text%22%3A%22HTTPREQUEST%22%7D%2C%7B%22x%22%3A1803%2C%22y%22%3A713%2C%22width%22%3A80%2C%22height%22%3A33%2C%22text%22%3A%227981%22%7D%2C%7B%22x%22%3A1088%2C%22y%22%3A714%2C%22width%22%3A237%2C%22height%22%3A33%2C%22text%22%3A%22REFORMAT%20CODE%22%7D%2C%7B%22x%22%3A253%2C%22y%22%3A715%2C%22width%22%3A72%2C%22height%22%3A28%2C%22text%22%3A%22IDEA%22%7D%2C%7B%22x%22%3A1990%2C%22y%22%3A735%2C%22width%22%3A342%2C%22height%22%3A33%2C%22text%22%3A%22OPENAPI%20SPECIFICATION%22%7D%2C%7B%22x%22%3A1803%2C%22y%22%3A765%2C%22width%22%3A83%2C%22height%22%3A35%2C%22text%22%3A%220%E7%AC%AC1%22%7D%2C%7B%22x%22%3A245%2C%22y%22%3A769%2C%22width%22%3A50%2C%22height%22%3A25%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A1089%2C%22y%22%3A769%2C%22width%22%3A276%2C%22height%22%3A32%2C%22text%22%3A%22OPTIMIZE%20LMPORTS%22%7D%2C%7B%22x%22%3A1985%2C%22y%22%3A789%2C%22width%22%3A266%2C%22height%22%3A34%2C%22text%22%3A%22RESOURCE%20BUNDLE%22%7D%2C%7B%22x%22%3A290%2C%22y%22%3A816%2C%22width%22%3A78%2C%22height%22%3A27%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A1846%2C%22y%22%3A821%2C%22width%22%3A35%2C%22height%22%3A32%2C%22text%22%3A%22%E5%9B%AD%22%7D%2C%7B%22x%22%3A1088%2C%22y%22%3A824%2C%22width%22%3A254%2C%22height%22%3A31%2C%22text%22%3A%22REMOVE%20MODULE%22%7D%2C%7B%22x%22%3A1984%2C%22y%22%3A838%2C%22width%22%3A268%2C%22height%22%3A40%2C%22text%22%3A%22EDITORCONFIG%20FILE%22%7D%2C%7B%22x%22%3A333%2C%22y%22%3A863%2C%22width%22%3A67%2C%22height%22%3A31%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A1035%2C%22y%22%3A892%2C%22width%22%3A830%2C%22height%22%3A54%2C%22text%22%3A%22OPEN%20TERMINAL%20AT%20THE%20CURRENT%20MAVEN%20MODULE%20PATH%22%7D%2C%7B%22x%22%3A1990%2C%22y%22%3A896%2C%22width%22%3A407%2C%22height%22%3A36%2C%22text%22%3A%22GENERATE%20POJO%20FROM%20JSON%22%7D%2C%7B%22x%22%3A1935%2C%22y%22%3A907%2C%22width%22%3A60%2C%22height%22%3A27%2C%22text%22%3A%22POJO%22%7D%2C%7B%22x%22%3A371%2C%22y%22%3A915%2C%22width%22%3A77%2C%22height%22%3A27%2C%22text%22%3A%22I%20COM%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233c4247%22%2C%22id%22%3A%22u90403790%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u14bee02b" id="u14bee02b"><span data-lake-id="ua2d5fbd3" id="ua2d5fbd3" style="color: rgb(31, 35, 40)">选择 Spring Initializr，将 Server URL 更改为 </span><code data-lake-id="u78e588c8" id="u78e588c8"><span data-lake-id="u7efa9368" id="u7efa9368" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">start.aliyun.com</span></code><span data-lake-id="u976cf200" id="u976cf200" style="color: rgb(31, 35, 40)">，然后创建一个名为 </span><code data-lake-id="u14c208c8" id="u14c208c8"><span data-lake-id="u20daed53" id="u20daed53" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">yu-rpc-spring-boot-starter</span></code><span data-lake-id="uaefacdf6" id="uaefacdf6" style="color: rgb(31, 35, 40)"> 的模块，JDK 和 Java 版本选择 </span><strong><span data-lake-id="u94da3721" id="u94da3721" style="color: rgb(31, 35, 40)">&gt;= 8</span></strong><span data-lake-id="uf375ca17" id="uf375ca17" style="color: rgb(31, 35, 40)"> 即可。</span></p><p data-lake-id="ubc7b4b17" id="ubc7b4b17"><span data-lake-id="uf73499a8" id="uf73499a8" style="color: rgb(31, 35, 40)">如下图：</span></p><p data-lake-id="uafd096f8" id="uafd096f8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713963468994-51a2221c-c513-47ad-b141-eb3b0283d236.png%22%2C%22taskId%22%3A%22ua48254cb-7b88-434a-a019-c3e37adfe7f%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709375992074-84b67ae2-8345-436d-9355-718601e2a701.png%22%2C%22size%22%3A266450%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A1536%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NEW%20MODULE%20SERVER%20URL%3A%20START.ALIYUN.COM%20NEW%20MODULE%20NAME%3A%20YU-RPC-SPRING-BOOT-STARTER%20GENERATORS%20MMAVEN%20ARCHETYPE%20~%2FCODE%2FYU-RPC%20LOCATION%3A%20JAKARTA%20EE%20MODULE%20WILL%20BE%20CREATED%20IN%3A~%2FCODE%2FYU-RPC%2FYU-RPC-SPRING-BOOT-STARTER%20SPRING%20LNITIALIZR%20GROOVY%20KOTLIN%20JAVA%20LANGUAGE%3A%20JAVAFX%20QUARKUS%20GRADLE%20TYPE%3A%20MAVEN%20MICRONAUT%20GROUP%3A%20COM.YUPI%20KTOR%20COMPOSEMULTIPLATFO%20ARTIFACT%3A%20YU-RPC-SPRING-BOOT-STARTER%20HTML%20REACT%20COM.YUPI.YURPCSPRINGBOOTSTARTER%20PACKAGE%20NAME%3A%20EXPRESS%20JDK%3A%20PROJECTSDK%20CORRETTO-11%20ANGULAR%20CLI%20IDE%20PLUGIN%2017%20JAVA%3A%20ANDROID%20VUE.JS%20PACKAGING%3A%20WAR%20JAR%20VITE%20CANCEL%20NEXT%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A716%2C%22y%22%3A13%2C%22width%22%3A164%2C%22height%22%3A26%2C%22text%22%3A%22NEW%20MODULE%22%7D%2C%7B%22x%22%3A451%2C%22y%22%3A134%2C%22width%22%3A472%2C%22height%22%3A31%2C%22text%22%3A%22SERVER%20URL%3A%20START.ALIYUN.COM%22%7D%2C%7B%22x%22%3A38%2C%22y%22%3A166%2C%22width%22%3A194%2C%22height%22%3A31%2C%22text%22%3A%22NEW%20MODULE%22%7D%2C%7B%22x%22%3A451%2C%22y%22%3A236%2C%22width%22%3A101%2C%22height%22%3A29%2C%22text%22%3A%22NAME%3A%22%7D%2C%7B%22x%22%3A714%2C%22y%22%3A238%2C%22width%22%3A436%2C%22height%22%3A31%2C%22text%22%3A%22YU-RPC-SPRING-BOOT-STARTER%22%7D%2C%7B%22x%22%3A26%2C%22y%22%3A273%2C%22width%22%3A147%2C%22height%22%3A23%2C%22text%22%3A%22GENERATORS%22%7D%2C%7B%22x%22%3A24%2C%22y%22%3A331%2C%22width%22%3A323%2C%22height%22%3A31%2C%22text%22%3A%22MMAVEN%20ARCHETYPE%22%7D%2C%7B%22x%22%3A713%2C%22y%22%3A350%2C%22width%22%3A246%2C%22height%22%3A35%2C%22text%22%3A%22~%2FCODE%2FYU-RPC%22%7D%2C%7B%22x%22%3A450%2C%22y%22%3A351%2C%22width%22%3A143%2C%22height%22%3A25%2C%22text%22%3A%22LOCATION%3A%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A398%2C%22width%22%3A158%2C%22height%22%3A32%2C%22text%22%3A%22JAKARTA%20EE%22%7D%2C%7B%22x%22%3A698%2C%22y%22%3A412%2C%22width%22%3A895%2C%22height%22%3A26%2C%22text%22%3A%22MODULE%20WILL%20BE%20CREATED%20IN%3A~%2FCODE%2FYU-RPC%2FYU-RPC-SPRING-BOOT-STARTER%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A468%2C%22width%22%3A240%2C%22height%22%3A32%2C%22text%22%3A%22SPRING%20LNITIALIZR%22%7D%2C%7B%22x%22%3A1054%2C%22y%22%3A505%2C%22width%22%3A111%2C%22height%22%3A37%2C%22text%22%3A%22GROOVY%22%7D%2C%7B%22x%22%3A881%2C%22y%22%3A506%2C%22width%22%3A96%2C%22height%22%3A33%2C%22text%22%3A%22KOTLIN%22%7D%2C%7B%22x%22%3A736%2C%22y%22%3A509%2C%22width%22%3A69%2C%22height%22%3A29%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A452%2C%22y%22%3A510%2C%22width%22%3A161%2C%22height%22%3A33%2C%22text%22%3A%22LANGUAGE%3A%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A535%2C%22width%22%3A105%2C%22height%22%3A30%2C%22text%22%3A%22JAVAFX%22%7D%2C%7B%22x%22%3A81%2C%22y%22%3A606%2C%22width%22%3A129%2C%22height%22%3A29%2C%22text%22%3A%22QUARKUS%22%7D%2C%7B%22x%22%3A920%2C%22y%22%3A615%2C%22width%22%3A106%2C%22height%22%3A34%2C%22text%22%3A%22GRADLE%22%7D%2C%7B%22x%22%3A449%2C%22y%22%3A617%2C%22width%22%3A91%2C%22height%22%3A39%2C%22text%22%3A%22TYPE%3A%22%7D%2C%7B%22x%22%3A741%2C%22y%22%3A619%2C%22width%22%3A101%2C%22height%22%3A30%2C%22text%22%3A%22MAVEN%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A672%2C%22width%22%3A158%2C%22height%22%3A28%2C%22text%22%3A%22MICRONAUT%22%7D%2C%7B%22x%22%3A450%2C%22y%22%3A729%2C%22width%22%3A109%2C%22height%22%3A37%2C%22text%22%3A%22GROUP%3A%22%7D%2C%7B%22x%22%3A716%2C%22y%22%3A734%2C%22width%22%3A142%2C%22height%22%3A32%2C%22text%22%3A%22COM.YUPI%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A742%2C%22width%22%3A68%2C%22height%22%3A26%2C%22text%22%3A%22KTOR%22%7D%2C%7B%22x%22%3A80%2C%22y%22%3A804%2C%22width%22%3A323%2C%22height%22%3A38%2C%22text%22%3A%22COMPOSEMULTIPLATFO%22%7D%2C%7B%22x%22%3A451%2C%22y%22%3A843%2C%22width%22%3A126%2C%22height%22%3A29%2C%22text%22%3A%22ARTIFACT%3A%22%7D%2C%7B%22x%22%3A711%2C%22y%22%3A843%2C%22width%22%3A442%2C%22height%22%3A35%2C%22text%22%3A%22YU-RPC-SPRING-BOOT-STARTER%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A876%2C%22width%22%3A93%2C%22height%22%3A29%2C%22text%22%3A%22HTML%22%7D%2C%7B%22x%22%3A81%2C%22y%22%3A946%2C%22width%22%3A86%2C%22height%22%3A27%2C%22text%22%3A%22REACT%22%7D%2C%7B%22x%22%3A714%2C%22y%22%3A953%2C%22width%22%3A518%2C%22height%22%3A37%2C%22text%22%3A%22COM.YUPI.YURPCSPRINGBOOTSTARTER%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A956%2C%22width%22%3A231%2C%22height%22%3A29%2C%22text%22%3A%22PACKAGE%20NAME%3A%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A1016%2C%22width%22%3A124%2C%22height%22%3A26%2C%22text%22%3A%22EXPRESS%22%7D%2C%7B%22x%22%3A450%2C%22y%22%3A1068%2C%22width%22%3A67%2C%22height%22%3A32%2C%22text%22%3A%22JDK%3A%22%7D%2C%7B%22x%22%3A776%2C%22y%22%3A1067%2C%22width%22%3A374%2C%22height%22%3A33%2C%22text%22%3A%22PROJECTSDK%20CORRETTO-11%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A1078%2C%22width%22%3A186%2C%22height%22%3A36%2C%22text%22%3A%22ANGULAR%20CLI%22%7D%2C%7B%22x%22%3A80%2C%22y%22%3A1148%2C%22width%22%3A158%2C%22height%22%3A33%2C%22text%22%3A%22IDE%20PLUGIN%22%7D%2C%7B%22x%22%3A710%2C%22y%22%3A1177%2C%22width%22%3A42%2C%22height%22%3A32%2C%22text%22%3A%2217%22%7D%2C%7B%22x%22%3A450%2C%22y%22%3A1181%2C%22width%22%3A75%2C%22height%22%3A29%2C%22text%22%3A%22JAVA%3A%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A1215%2C%22width%22%3A127%2C%22height%22%3A30%2C%22text%22%3A%22ANDROID%22%7D%2C%7B%22x%22%3A79%2C%22y%22%3A1284%2C%22width%22%3A95%2C%22height%22%3A31%2C%22text%22%3A%22VUE.JS%22%7D%2C%7B%22x%22%3A450%2C%22y%22%3A1290%2C%22width%22%3A172%2C%22height%22%3A40%2C%22text%22%3A%22PACKAGING%3A%22%7D%2C%7B%22x%22%3A859%2C%22y%22%3A1291%2C%22width%22%3A65%2C%22height%22%3A32%2C%22text%22%3A%22WAR%22%7D%2C%7B%22x%22%3A738%2C%22y%22%3A1294%2C%22width%22%3A46%2C%22height%22%3A29%2C%22text%22%3A%22JAR%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A1351%2C%22width%22%3A64%2C%22height%22%3A30%2C%22text%22%3A%22VITE%22%7D%2C%7B%22x%22%3A167%2C%22y%22%3A1462%2C%22width%22%3A105%2C%22height%22%3A34%2C%22text%22%3A%22CANCEL%22%7D%2C%7B%22x%22%3A1434%2C%22y%22%3A1465%2C%22width%22%3A78%2C%22height%22%3A30%2C%22text%22%3A%22NEXT%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233e4245%22%2C%22id%22%3A%22u98f18c45%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u80156bb0" id="u80156bb0"><span data-lake-id="u79b052ca" id="u79b052ca" style="color: rgb(31, 35, 40)">选择 Spring Boot 版本为 2.6，项目依赖如下：</span></p><p data-lake-id="ud6420b2d" id="ud6420b2d"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713963478730-882eb483-33d8-4a8f-a151-af590bf8c324.png%22%2C%22taskId%22%3A%22u10a3d616-9f0b-4eec-ac0a-137c0e1b4fb%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%221709376020701-a46c9df5-1097-4c47-9c87-a87897aced0c.png%22%2C%22size%22%3A245444%2C%22from%22%3A%22drop%22%2C%22originWidth%22%3A1600%2C%22originHeight%22%3A1536%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22NEW%20MODULE%202.6.13%20SPRING%20BOOT%3A%20I%20PRE-BUILT%20SHARED%20INDEXES%20FOR%20JDK%20AND%20MAVEN%20LIBRARIES%20DOWNLOAD%20PRE%20DEPENDENCIES%3A%20SPRING%20CONFIGURATION%20PROCESSOR%20PROCES%20GENERATE%20METADATA%20FOR%20DEVELOPERS%20TO%20OFFER%20DEVELOPER%20TOOLS%20CONTEXTUAL%20HELP%20AND%20%5C%22CODE%20COMPLETION%5C%22%20SPRING%20CONFIGURATION%20PROCESSOR%20WHEN%20WORKING%20WITH%20CUSTOM%20CONFIGURATION%20KEYS(EX.APPLICATION.PROPERTIES%2F.YML%20FILES).%20NOSQL%20SPRING%20DATA%20REACTIVE%20MONGODB%20MESSAGING%20SPRING%20FOR%20APACHE%20KAFKA%20SPRING%20FOR%20APACHE%20KAFKA%20STREAMS%20ADDED%20DEPENDENCIES%3A%20I%2FO%20XSPRING%20CONFIGURATION%20PROCESSOR%20SPRING%20BATCH%20OBSERVABILITY%20INFLUX%20CREATE%20CANCEL%20PREVIOUS%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A716%2C%22y%22%3A11%2C%22width%22%3A166%2C%22height%22%3A27%2C%22text%22%3A%22NEW%20MODULE%22%7D%2C%7B%22x%22%3A267%2C%22y%22%3A141%2C%22width%22%3A102%2C%22height%22%3A29%2C%22text%22%3A%222.6.13%22%7D%2C%7B%22x%22%3A47%2C%22y%22%3A141%2C%22width%22%3A193%2C%22height%22%3A34%2C%22text%22%3A%22SPRING%20BOOT%3A%22%7D%2C%7B%22x%22%3A265%2C%22y%22%3A242%2C%22width%22%3A823%2C%22height%22%3A32%2C%22text%22%3A%22I%20PRE-BUILT%20SHARED%20INDEXES%20FOR%20JDK%20AND%20MAVEN%20LIBRARIES%22%7D%2C%7B%22x%22%3A101%2C%22y%22%3A243%2C%22width%22%3A207%2C%22height%22%3A32%2C%22text%22%3A%22DOWNLOAD%20PRE%22%7D%2C%7B%22x%22%3A50%2C%22y%22%3A337%2C%22width%22%3A229%2C%22height%22%3A31%2C%22text%22%3A%22DEPENDENCIES%3A%22%7D%2C%7B%22x%22%3A857%2C%22y%22%3A405%2C%22width%22%3A524%2C%22height%22%3A42%2C%22text%22%3A%22SPRING%20CONFIGURATION%20PROCESSOR%22%7D%2C%7B%22x%22%3A127%2C%22y%22%3A415%2C%22width%22%3A105%2C%22height%22%3A26%2C%22text%22%3A%22PROCES%22%7D%2C%7B%22x%22%3A859%2C%22y%22%3A468%2C%22width%22%3A658%2C%22height%22%3A34%2C%22text%22%3A%22GENERATE%20METADATA%20FOR%20DEVELOPERS%20TO%20OFFER%22%7D%2C%7B%22x%22%3A112%2C%22y%22%3A479%2C%22width%22%3A254%2C%22height%22%3A31%2C%22text%22%3A%22DEVELOPER%20TOOLS%22%7D%2C%7B%22x%22%3A859%2C%22y%22%3A510%2C%22width%22%3A600%2C%22height%22%3A37%2C%22text%22%3A%22CONTEXTUAL%20HELP%20AND%20%5C%22CODE%20COMPLETION%5C%22%22%7D%2C%7B%22x%22%3A203%2C%22y%22%3A539%2C%22width%22%3A487%2C%22height%22%3A35%2C%22text%22%3A%22SPRING%20CONFIGURATION%20PROCESSOR%22%7D%2C%7B%22x%22%3A866%2C%22y%22%3A550%2C%22width%22%3A633%2C%22height%22%3A33%2C%22text%22%3A%22WHEN%20WORKING%20WITH%20CUSTOM%20CONFIGURATION%22%7D%2C%7B%22x%22%3A857%2C%22y%22%3A592%2C%22width%22%3A659%2C%22height%22%3A33%2C%22text%22%3A%22KEYS(EX.APPLICATION.PROPERTIES%2F.YML%20FILES).%22%7D%2C%7B%22x%22%3A113%2C%22y%22%3A600%2C%22width%22%3A102%2C%22height%22%3A29%2C%22text%22%3A%22NOSQL%22%7D%2C%7B%22x%22%3A205%2C%22y%22%3A657%2C%22width%22%3A483%2C%22height%22%3A36%2C%22text%22%3A%22SPRING%20DATA%20REACTIVE%20MONGODB%22%7D%2C%7B%22x%22%3A113%2C%22y%22%3A720%2C%22width%22%3A168%2C%22height%22%3A35%2C%22text%22%3A%22MESSAGING%22%7D%2C%7B%22x%22%3A207%2C%22y%22%3A779%2C%22width%22%3A376%2C%22height%22%3A37%2C%22text%22%3A%22SPRING%20FOR%20APACHE%20KAFKA%22%7D%2C%7B%22x%22%3A207%2C%22y%22%3A840%2C%22width%22%3A510%2C%22height%22%3A35%2C%22text%22%3A%22SPRING%20FOR%20APACHE%20KAFKA%20STREAMS%22%7D%2C%7B%22x%22%3A847%2C%22y%22%3A884%2C%22width%22%3A339%2C%22height%22%3A35%2C%22text%22%3A%22ADDED%20DEPENDENCIES%3A%22%7D%2C%7B%22x%22%3A112%2C%22y%22%3A897%2C%22width%22%3A51%2C%22height%22%3A32%2C%22text%22%3A%22I%2FO%22%7D%2C%7B%22x%22%3A870%2C%22y%22%3A958%2C%22width%22%3A533%2C%22height%22%3A34%2C%22text%22%3A%22XSPRING%20CONFIGURATION%20PROCESSOR%22%7D%2C%7B%22x%22%3A205%2C%22y%22%3A956%2C%22width%22%3A198%2C%22height%22%3A37%2C%22text%22%3A%22SPRING%20BATCH%22%7D%2C%7B%22x%22%3A113%2C%22y%22%3A1018%2C%22width%22%3A208%2C%22height%22%3A35%2C%22text%22%3A%22OBSERVABILITY%22%7D%2C%7B%22x%22%3A204%2C%22y%22%3A1080%2C%22width%22%3A93%2C%22height%22%3A30%2C%22text%22%3A%22INFLUX%22%7D%2C%7B%22x%22%3A1420%2C%22y%22%3A1461%2C%22width%22%3A105%2C%22height%22%3A35%2C%22text%22%3A%22CREATE%22%7D%2C%7B%22x%22%3A168%2C%22y%22%3A1463%2C%22width%22%3A103%2C%22height%22%3A33%2C%22text%22%3A%22CANCEL%22%7D%2C%7B%22x%22%3A1190%2C%22y%22%3A1465%2C%22width%22%3A132%2C%22height%22%3A29%2C%22text%22%3A%22PREVIOUS%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233d4145%22%2C%22id%22%3A%22uf8f0643c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ue7393fd5" id="ue7393fd5"><span data-lake-id="u76819538" id="u76819538" style="color: rgb(31, 35, 40)">创建好模块后，修改 pom.xml 文件，移除无用的插件代码：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%3Cplugin%3E%5Cn%20%20%20%20%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Espring-boot-maven-plugin%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E%24%7Bspring-boot.version%7D%3C%2Fversion%3E%5Cn%20%20%20%20%3Cconfiguration%3E%5Cn%20%20%20%20%20%20%20%20%3CmainClass%3Ecom.yupi.yurpc.springboot.starter.YuRpcSpringBootStarterApplication%3C%2FmainClass%3E%5Cn%20%20%20%20%20%20%20%20%3Cskip%3Etrue%3C%2Fskip%3E%5Cn%20%20%20%20%3C%2Fconfiguration%3E%5Cn%20%20%20%20%3Cexecutions%3E%5Cn%20%20%20%20%20%20%20%20%3Cexecution%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cid%3Erepackage%3C%2Fid%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cgoals%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cgoal%3Erepackage%3C%2Fgoal%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fgoals%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fexecution%3E%5Cn%20%20%20%20%3C%2Fexecutions%3E%5Cn%3C%2Fplugin%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hHirL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uaefa5989" id="uaefa5989"><span data-lake-id="u53fd48a7" id="u53fd48a7" style="color: rgb(31, 35, 40)">引入我们开发的 RPC 框架：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependency%3E%5Cn%20%20%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Echen-rpc-core%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xloCG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="ub09b1435" id="ub09b1435"><strong><span data-lake-id="u2d7de1e4" id="u2d7de1e4" style="color: rgb(31, 35, 40)">至此，Spring Boot Starter 项目已经完成初始化。</span></strong></p><h4 data-lake-id="oT5Hy" id="oT5Hy"><span data-lake-id="u90dde2ed" id="u90dde2ed" style="color: rgba(0, 0, 0, 0.85)">2、定义注解</span></h4><p data-lake-id="u8d32fa33" id="u8d32fa33"><span data-lake-id="u1ba08d1f" id="u1ba08d1f" style="color: rgb(31, 35, 40)">实现注解驱动的第一步是定义注解，要定义哪些注解呢？我们怎么知道应该定义哪些注解呢？</span></p><p data-lake-id="uad977714" id="uad977714"><span data-lake-id="u515379c7" id="u515379c7" style="color: rgb(31, 35, 40)">还是那句话，有样学样，可以参考知名框架 Dubbo 的注解。</span></p><p data-lake-id="u8c71e859" id="u8c71e859"><span data-lake-id="ubd880d54" id="ubd880d54" style="color: rgb(31, 35, 40)">比如：</span></p><p data-lake-id="u3a8df35d" id="u3a8df35d"><span data-lake-id="u9c54d8f4" id="u9c54d8f4" style="color: rgb(31, 35, 40)">​</span><br></p><ol list="u66e5dcd4"><li fid="u59cd4162" data-lake-id="u30511ec1" id="u30511ec1"><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u1783cffa" id="u1783cffa">@EnableDubbo：在 Spring Boot 主应用类上使用，用于启用 Dubbo 功能。</span></u></span></li><li fid="u59cd4162" data-lake-id="u7fd6b3c5" id="u7fd6b3c5"><span data-lake-id="u7cc63a8c" id="u7cc63a8c" style="color: rgb(31, 35, 40)">@DubboComponentScan：在 Spring Boot 主应用类上使用，用于指定 Dubbo 组件扫描的包路径。</span></li><li fid="u59cd4162" data-lake-id="u1c8476fb" id="u1c8476fb"><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="ubf85bb2c" id="ubf85bb2c">@DubboReference：在消费者中使用，用于声明 Dubbo 服务引用。</span></u></span></li><li fid="u59cd4162" data-lake-id="u346f0861" id="u346f0861"><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u263405c5" id="u263405c5">@DubboService：在提供者中使用，用于声明 Dubbo 服务。</span></u></span></li><li fid="u59cd4162" data-lake-id="uf1b8c637" id="uf1b8c637"><span data-lake-id="u04527fd6" id="u04527fd6" style="color: rgb(31, 35, 40)">@DubboMethod：在提供者和消费者中使用，用于配置 Dubbo 方法的参数、超时时间等。</span></li><li fid="u59cd4162" data-lake-id="ub89b8e2e" id="ub89b8e2e"><span data-lake-id="ua294422b" id="ua294422b" style="color: rgb(31, 35, 40)">@DubboTransported：在 Dubbo 提供者和消费者中使用，用于指定传输协议和参数，例如传输协议的类型、端口等。</span></li></ol><p data-lake-id="u7c158741" id="u7c158741"><span data-lake-id="u2606c9cf" id="u2606c9cf" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u0a66b6ad" id="u0a66b6ad"><span data-lake-id="ub3edb0c7" id="ub3edb0c7" style="color: rgb(31, 35, 40)">当然，这些注解我们不需要全部用到，遵循最小可用化原则，我们只需要定义 3 个注解。（划线的三个注解）</span></p><p data-lake-id="ufb815e85" id="ufb815e85"><span data-lake-id="u942a170f" id="u942a170f" style="color: rgb(31, 35, 40)">在 </span><code data-lake-id="uadf5135e" id="uadf5135e"><span data-lake-id="u544864cd" id="u544864cd" style="color: rgb(31, 35, 40)">chen</span><span data-lake-id="ub9f50bb6" id="ub9f50bb6" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">-rpc-spring-boot-starter</span></code><span data-lake-id="ue4895138" id="ue4895138" style="color: rgb(31, 35, 40)"> 项目下新建 </span><code data-lake-id="ub6e65dd2" id="ub6e65dd2"><span data-lake-id="u01041bb7" id="u01041bb7" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">annotation</span></code><span data-lake-id="ua6a3c61a" id="ua6a3c61a" style="color: rgb(31, 35, 40)"> 包，将所有注解代码放到该包下。</span></p><p data-lake-id="u14177360" id="u14177360"><span data-lake-id="u00cee5f5" id="u00cee5f5" style="color: rgb(31, 35, 40)">如下图：</span></p><p data-lake-id="u66e0fab2" id="u66e0fab2"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713963688315-3515832e-5781-4ea6-9962-2f727c8f4217.png%22%2C%22taskId%22%3A%22uf9ffccb9-e906-4edc-a59b-8bdf0be9492%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A505%2C%22height%22%3A334%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A82247%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A505%2C%22originHeight%22%3A334%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CHEN-RPC-SPRING-BOOT-SARTER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20CHENRPC%20SPRINGBOOT%20STARTER%20ANNOTATION%20ENABLERPC%20RPCREFERENCE%20RPCSERVICE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A73%2C%22y%22%3A9%2C%22width%22%3A217%2C%22height%22%3A16%2C%22text%22%3A%22CHEN-RPC-SPRING-BOOT-SARTER%22%7D%2C%7B%22x%22%3A94%2C%22y%22%3A36%2C%22width%22%3A23%2C%22height%22%3A12%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A116%2C%22y%22%3A60%2C%22width%22%3A36%2C%22height%22%3A14%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A135%2C%22y%22%3A82%2C%22width%22%3A35%2C%22height%22%3A17%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A162%2C%22y%22%3A112%2C%22width%22%3A32%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A182%2C%22y%22%3A134%2C%22width%22%3A36%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A205%2C%22y%22%3A160%2C%22width%22%3A61%2C%22height%22%3A14%2C%22text%22%3A%22CHENRPC%22%7D%2C%7B%22x%22%3A228%2C%22y%22%3A184%2C%22width%22%3A86%2C%22height%22%3A18%2C%22text%22%3A%22SPRINGBOOT%22%7D%2C%7B%22x%22%3A251%2C%22y%22%3A211%2C%22width%22%3A49%2C%22height%22%3A13%2C%22text%22%3A%22STARTER%22%7D%2C%7B%22x%22%3A274%2C%22y%22%3A236%2C%22width%22%3A81%2C%22height%22%3A13%2C%22text%22%3A%22ANNOTATION%22%7D%2C%7B%22x%22%3A296%2C%22y%22%3A259%2C%22width%22%3A78%2C%22height%22%3A18%2C%22text%22%3A%22ENABLERPC%22%7D%2C%7B%22x%22%3A296%2C%22y%22%3A283%2C%22width%22%3A105%2C%22height%22%3A18%2C%22text%22%3A%22RPCREFERENCE%22%7D%2C%7B%22x%22%3A297%2C%22y%22%3A309%2C%22width%22%3A83%2C%22height%22%3A15%2C%22text%22%3A%22RPCSERVICE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23444e59%22%2C%22id%22%3A%22u71bf8ea5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h5 data-lake-id="BKq6r" id="BKq6r"><span data-lake-id="ua983baa9" id="ua983baa9" style="color: rgb(31, 35, 40)">1）@EnableRpc</span></h5><p data-lake-id="u4c0f073e" id="u4c0f073e"><strong><span data-lake-id="u04aaff83" id="u04aaff83" style="color: rgb(31, 35, 40)">用于全局标识项目需要引入 RPC 框架、执行初始化方法。</span></strong></p><p data-lake-id="ua8c3da8a" id="ua8c3da8a"><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u20c4eee0" id="u20c4eee0">由于服务消费者和服务提供者初始化的模块不同，我们需要在 EnableRpc 注解中，指定是否需要启动服务器等属性。</span></u></span></p><p data-lake-id="u1135bfbb" id="u1135bfbb"><span data-lake-id="u807b83d4" id="u807b83d4" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.annotation%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcConsumerBootStrap%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcInitBootStrap%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcProviderBootStrap%3B%5Cnimport%20org.springframework.context.annotation.Import%3B%5Cn%5Cnimport%20java.lang.annotation.ElementType%3B%5Cnimport%20java.lang.annotation.Retention%3B%5Cnimport%20java.lang.annotation.RetentionPolicy%3B%5Cnimport%20java.lang.annotation.Target%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E5%90%AF%E7%94%A8%20RPC%20%E6%B3%A8%E8%A7%A3%5Cn%20*%20%40date%202024%2F4%2F20-11%3A36%5Cn%20*%2F%5Cn%40Target(%7BElementType.TYPE%7D)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Import(%7BRpcInitBootStrap.class%2C%20RpcProviderBootStrap.class%2C%20RpcConsumerBootStrap.class%7D)%5Cnpublic%20%40interface%20EnableRpc%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%9C%80%E8%A6%81%E5%90%AF%E5%8A%A8%20server%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20boolean%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F20%2011%3A38%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20boolean%20needServer()%20default%20true%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uOqJC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9bd82cf4" id="u9bd82cf4"><span data-lake-id="ua00c6ebf" id="ua00c6ebf" style="color: rgb(31, 35, 40)">当然，也可以将 EnableRpc 注解拆分为两个注解（比如 EnableRpcProvider、EnableRpcConsumer），分别用于标识服务提供者和消费者，但可能存在模块重复初始化的可能性。（因为这里仅是provide和consumer对于server的启动要求不同，所以就用这一个注解，在该注解驱动里再进行区分即可）</span></p><p data-lake-id="u769b8336" id="u769b8336"><span data-lake-id="u0734a252" id="u0734a252" style="color: rgb(31, 35, 40)">​</span><br></p><h5 data-lake-id="LsQ6V" id="LsQ6V"><span data-lake-id="u248ca1ba" id="u248ca1ba" style="color: rgb(31, 35, 40)">2）@RpcService -- 在类上使用</span></h5><p data-lake-id="ufc88875c" id="ufc88875c"><strong><span data-lake-id="u5ea50e03" id="u5ea50e03" style="color: rgb(31, 35, 40)">服务提供者注解，在需要注册和提供的服务类上使用。</span></strong></p><p data-lake-id="uf84ea884" id="uf84ea884"><span data-lake-id="ufd711b47" id="ufd711b47" style="color: rgb(31, 35, 40)">RpcService 注解中，需要指定服务注册信息属性，比如服务接口实现类、版本号等（也可以包括服务名称）。</span></p><p data-lake-id="ue3dc3a68" id="ue3dc3a68"><span data-lake-id="ue365eb48" id="ue365eb48" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.annotation%3B%5Cn%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.lang.annotation.ElementType%3B%5Cnimport%20java.lang.annotation.Retention%3B%5Cnimport%20java.lang.annotation.RetentionPolicy%3B%5Cnimport%20java.lang.annotation.Target%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E6%B3%A8%E8%A7%A3%EF%BC%88%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%EF%BC%89%5Cn%20*%20%40date%202024%2F4%2F20-11%3A36%5Cn%20*%2F%5Cn%40Target(%7BElementType.TYPE%7D)%20%2F%2F%20%E8%A1%A8%E7%A4%BA%E5%9C%A8Java%E7%B1%BB%E4%B8%8A%E9%9D%A2%E8%BF%9B%E8%A1%8C%E4%BD%BF%E7%94%A8%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Component%5Cnpublic%20%40interface%20RpcService%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%B1%BB%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20Class%3C%3F%3E%20interfaceClass()%20default%20void.class%3B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20serviceVersion()%20default%20RpcConstant.DEFAULT_SERVICE_VERSION%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tsr0e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h5 data-lake-id="vlglD" id="vlglD"><span data-lake-id="u01131e38" id="u01131e38" style="color: rgb(31, 35, 40)">3）@RpcReference</span></h5><p data-lake-id="u1826af76" id="u1826af76"><strong><span data-lake-id="u7a876673" id="u7a876673" style="color: rgb(31, 35, 40)">服务消费者注解，在需要注入服务代理对象的属性上使用，类似 Spring 中的 @Resource 注解。</span></strong></p><p data-lake-id="uac9edabf" id="uac9edabf"><span data-lake-id="ua56264d6" id="ua56264d6" style="color: rgb(31, 35, 40)">RpcReference 注解中，需要指定调用服务相关的属性，比如服务接口类（可能存在多个接口）、版本号、负载均衡器、重试策略、是否 Mock 模拟调用等。</span></p><p data-lake-id="u5a855e49" id="u5a855e49"><span data-lake-id="ud8d1da12" id="ud8d1da12" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.annotation%3B%5Cn%5Cnimport%20com.yybf.chenrpc.constant.RpcConstant%3B%5Cnimport%20com.yybf.chenrpc.fault.retry.RetryStrategyKeys%3B%5Cnimport%20com.yybf.chenrpc.fault.tolerant.TolerantStrategyKeys%3B%5Cnimport%20com.yybf.chenrpc.loadbalancer.LoadBalancerKeys%3B%5Cnimport%20org.springframework.stereotype.Component%3B%5Cn%5Cnimport%20java.lang.annotation.ElementType%3B%5Cnimport%20java.lang.annotation.Retention%3B%5Cnimport%20java.lang.annotation.RetentionPolicy%3B%5Cnimport%20java.lang.annotation.Target%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%E6%B3%A8%E8%A7%A3%EF%BC%88%E7%94%A8%E4%BA%8E%E6%B3%A8%E5%85%A5%E6%9C%8D%E5%8A%A1%EF%BC%89%5Cn%20*%20%40date%202024%2F4%2F20-11%3A36%5Cn%20*%2F%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Target(ElementType.FIELD)%5Cn%40Component%5Cnpublic%20%40interface%20RpcReference%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%B1%BB%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20Class%3C%3F%3E%20interfaceClass()%20default%20void.class%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E7%89%88%E6%9C%AC%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20serviceVersion()%20default%20RpcConstant.DEFAULT_SERVICE_VERSION%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20loadBalancer()%20default%20LoadBalancerKeys.ROUND_ROBIN%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20retryStrategy()%20default%20RetryStrategyKeys.NO%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20String%20tolerantStrategy()%20default%20TolerantStrategyKeys.FAIL_SAFE%3B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E6%A8%A1%E6%8B%9F%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20boolean%20mock()%20default%20false%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yXx2k%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h4 data-lake-id="RA6Nj" id="RA6Nj"><span data-lake-id="u854e7bf5" id="u854e7bf5" style="color: rgba(0, 0, 0, 0.85)">3、注解驱动</span></h4><p data-lake-id="u5d74d815" id="u5d74d815"><span data-lake-id="ua3c2ee87" id="ua3c2ee87" style="color: rgb(31, 35, 40)">在 starter 项目中新建</span><span data-lake-id="u1039745e" id="u1039745e" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u89a56eaf" id="u89a56eaf" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">bootstrap</span><span data-lake-id="u371e609c" id="u371e609c" style="color: rgb(31, 35, 40)"> </span><span data-lake-id="u7d61c10a" id="u7d61c10a" style="color: rgb(31, 35, 40)">包，并且分别针对上面定义的 3 个注解新建启动类。</span></p><p data-lake-id="uba9d493a" id="uba9d493a"><span data-lake-id="u459897e5" id="u459897e5" style="color: rgb(31, 35, 40)">项目的目录结构如图：</span></p><p data-lake-id="u4009c418" id="u4009c418"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713964110766-9409352c-8417-4e61-852f-1fc8fe94d9ce.png%22%2C%22taskId%22%3A%22u6898c4c5-a7fb-42a2-a323-f512338a801%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A497%2C%22height%22%3A446%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A131264%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A497%2C%22originHeight%22%3A446%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CHEN-RPC-SPRING-BOOT-SARTER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20CHENRPC%20SPRINGBOOT%20STARTER%20ANNOTATION%20ENABLERPC%20RPCREFERENCE%20RPCSERVICE%20BOOTSTRAP%20RPCCONSUMERBOOTSTRAP%20RPCLNITBOOTSTRAP%20RPCPROVIDERBOOTSTRAP%20TEST%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A60%2C%22y%22%3A4%2C%22width%22%3A219%2C%22height%22%3A15%2C%22text%22%3A%22CHEN-RPC-SPRING-BOOT-SARTER%22%7D%2C%7B%22x%22%3A83%2C%22y%22%3A32%2C%22width%22%3A23%2C%22height%22%3A12%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A104%2C%22y%22%3A55%2C%22width%22%3A37%2C%22height%22%3A13%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A128%2C%22y%22%3A80%2C%22width%22%3A29%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A150%2C%22y%22%3A106%2C%22width%22%3A33%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A171%2C%22y%22%3A127%2C%22width%22%3A37%2C%22height%22%3A19%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A195%2C%22y%22%3A155%2C%22width%22%3A62%2C%22height%22%3A16%2C%22text%22%3A%22CHENRPC%22%7D%2C%7B%22x%22%3A217%2C%22y%22%3A178%2C%22width%22%3A86%2C%22height%22%3A19%2C%22text%22%3A%22SPRINGBOOT%22%7D%2C%7B%22x%22%3A240%2C%22y%22%3A205%2C%22width%22%3A49%2C%22height%22%3A13%2C%22text%22%3A%22STARTER%22%7D%2C%7B%22x%22%3A262%2C%22y%22%3A231%2C%22width%22%3A81%2C%22height%22%3A13%2C%22text%22%3A%22ANNOTATION%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A254%2C%22width%22%3A76%2C%22height%22%3A16%2C%22text%22%3A%22ENABLERPC%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A280%2C%22width%22%3A103%2C%22height%22%3A15%2C%22text%22%3A%22RPCREFERENCE%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A303%2C%22width%22%3A82%2C%22height%22%3A15%2C%22text%22%3A%22RPCSERVICE%22%7D%2C%7B%22x%22%3A261%2C%22y%22%3A329%2C%22width%22%3A77%2C%22height%22%3A19%2C%22text%22%3A%22BOOTSTRAP%22%7D%2C%7B%22x%22%3A283%2C%22y%22%3A353%2C%22width%22%3A181%2C%22height%22%3A19%2C%22text%22%3A%22RPCCONSUMERBOOTSTRAP%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A379%2C%22width%22%3A127%2C%22height%22%3A17%2C%22text%22%3A%22RPCLNITBOOTSTRAP%22%7D%2C%7B%22x%22%3A285%2C%22y%22%3A404%2C%22width%22%3A166%2C%22height%22%3A16%2C%22text%22%3A%22RPCPROVIDERBOOTSTRAP%22%7D%2C%7B%22x%22%3A105%2C%22y%22%3A431%2C%22width%22%3A29%2C%22height%22%3A13%2C%22text%22%3A%22TEST%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23434c57%22%2C%22id%22%3A%22u1cd727bc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><h5 data-lake-id="AV72P" id="AV72P"><span data-lake-id="ud8fc2f3a" id="ud8fc2f3a" style="color: rgb(31, 35, 40)">1）Rpc 框架全局启动类 </span><span data-lake-id="ubf98c835" id="ubf98c835" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">RpcInitBootstrap</span><span data-lake-id="ue20bb3ef" id="ue20bb3ef" style="color: rgb(31, 35, 40)">​</span></h5><p data-lake-id="u8e7f5e77" id="u8e7f5e77"><span data-lake-id="u9e6b2d7f" id="u9e6b2d7f" style="color: rgb(31, 35, 40)">我们的需求是，在 Spring 框架初始化时，获取 </span><code data-lake-id="u56bb863e" id="u56bb863e"><span data-lake-id="u7253187c" id="u7253187c" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@EnableRpc</span></code><span data-lake-id="u27e44417" id="u27e44417" style="color: rgb(31, 35, 40)"> 注解的属性，并初始化 RPC 框架。</span></p><p data-lake-id="ufc22fdbb" id="ufc22fdbb"><span data-lake-id="ucd80911e" id="ucd80911e" style="color: rgb(31, 35, 40)">怎么获取到注解的属性呢？</span></p><p data-lake-id="u54fb3079" id="u54fb3079"><span data-lake-id="uda21150b" id="uda21150b" style="color: rgb(31, 35, 40)">可以实现 Spring 的 </span><code data-lake-id="ue27bc42c" id="ue27bc42c"><span data-lake-id="u104bd718" id="u104bd718" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">ImportBeanDefinitionRegistrar</span></code><span data-lake-id="u6e7daf46" id="u6e7daf46" style="color: rgb(31, 35, 40)"> 接口，并且在 </span><code data-lake-id="u5d49a09b" id="u5d49a09b"><span data-lake-id="u57e73615" id="u57e73615" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">registerBeanDefinitions</span></code><span data-lake-id="u31ae4dfc" id="u31ae4dfc" style="color: rgb(31, 35, 40)"> 方法中，获取到项目的注解和注解属性。</span></p><p data-lake-id="u2dd61105" id="u2dd61105"><span data-lake-id="ue110226c" id="ue110226c" style="color: rgb(31, 35, 40)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.bootstrap%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.server.tcp.VertxTcpServer%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.EnableRpc%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.beans.factory.support.BeanDefinitionRegistry%3B%5Cnimport%20org.springframework.context.annotation.ImportBeanDefinitionRegistrar%3B%5Cnimport%20org.springframework.core.type.AnnotationMetadata%3B%5Cn%5Cn%2F**%5Cn%20*%20%E5%90%AF%E5%8A%A8%20RPC%20%E6%A1%86%E6%9E%B6%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F20%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20RpcInitBootStrap%20implements%20ImportBeanDefinitionRegistrar%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E5%9C%A8spring%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%97%B6%E6%89%A7%E8%A1%8C%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%88%9D%E5%A7%8B%E5%8C%96RPC%E6%A1%86%E6%9E%B6%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20importingClassMetadata%3A%5Cn%20%20%20%20%20*%20%40param%20registry%3A%5Cn%20%20%20%20%20*%20%40return%20void%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F20%2012%3A08%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20void%20registerBeanDefinitions(AnnotationMetadata%20importingClassMetadata%2C%20BeanDefinitionRegistry%20registry)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96EnableRpc%E6%B3%A8%E8%A7%A3%E4%B8%AD%E7%9A%84%E2%80%9CneedServer%E2%80%9D%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%5Cn%20%20%20%20%20%20%20%20boolean%20needServer%20%3D%20(boolean)%20importingClassMetadata%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.getAnnotationAttributes(EnableRpc.class.getName())%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20.get(%5C%22needServer%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96RPC%E6%A1%86%E6%9E%B6%20%EF%BC%88%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE%E5%92%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%89%5Cn%20%20%20%20%20%20%20%20RpcApplication.init()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20final%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cn%20%20%20%20%20%20%20%20if%20(needServer)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20VertxTcpServer%20vertxTcpServer%20%3D%20new%20VertxTcpServer()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20vertxTcpServer.doStart(rpcConfig.getServerPort())%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E4%B8%8D%E5%90%AF%E5%8A%A8%20server%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZMx4w%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><details data-lake-id="u15aab04c" id="u15aab04c" open="false" class="lake-collapse"><summary data-lake-id="u2d795445" id="u2d795445" class="lake-summary"><span data-lake-id="uc1fa55b5" id="uc1fa55b5">关于上面代码的解释</span></summary><h3 data-lake-id="WRnTO" id="WRnTO"><span data-lake-id="u130719c9" id="u130719c9">关于两个参数</span><code data-lake-id="u26985fd2" id="u26985fd2"><strong><span data-lake-id="u3e473eb4" id="u3e473eb4" class="lake-fontsize-12" style="color: var(--tw-prose-code)">importingClassMetadata</span></strong></code><strong><span data-lake-id="u6eac876d" id="u6eac876d" class="lake-fontsize-12" style="color: var(--tw-prose-code)">和</span></strong><code data-lake-id="uc41370e1" id="uc41370e1"><strong><span data-lake-id="u28aec18a" id="u28aec18a" class="lake-fontsize-12" style="color: var(--tw-prose-code)">registry</span></strong></code></h3><p data-lake-id="u8ed5b81a" id="u8ed5b81a"><span data-lake-id="ud631feee" id="ud631feee" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">在 Spring 框架中，</span><strong><span data-lake-id="u8d0af228" id="u8d0af228" class="lake-fontsize-12" style="color: var(--tw-prose-code)">ImportBeanDefinitionRegistrar</span></strong><span data-lake-id="uc33ec483" id="uc33ec483" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 接口用于在 Spring 容器初始化过程中动态注册 BeanDefinition。这个接口的 </span><strong><span data-lake-id="u372de254" id="u372de254" class="lake-fontsize-12" style="color: var(--tw-prose-code)">registerBeanDefinitions</span></strong><span data-lake-id="u3a6297df" id="u3a6297df" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 方法在 Spring 初始化过程中被调用，用于注册 BeanDefinition。</span></p><p data-lake-id="uc1122536" id="uc1122536"><span data-lake-id="uad548d5f" id="uad548d5f" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">让我们来看看这两个参数的含义：</span></p><ol list="u43c9f301"><li fid="u0c9f944e" data-lake-id="ue0b63160" id="ue0b63160"><strong><span data-lake-id="uadadc3c5" id="uadadc3c5" class="lake-fontsize-12" style="color: var(--tw-prose-code)">AnnotationMetadata importingClassMetadata</span></strong><span data-lake-id="u616a0af1" id="u616a0af1" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">：</span></li></ol><ul list="ua102e1b4" data-lake-indent="1"><li fid="u12199f98" data-lake-id="u44cd1dbe" id="u44cd1dbe"><span data-lake-id="u20833f85" id="u20833f85" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">这个参数是一个接口，用于表示当前被 </span><strong><span data-lake-id="u6b9fb7d2" id="u6b9fb7d2" class="lake-fontsize-12" style="color: var(--tw-prose-code)">@Import</span></strong><span data-lake-id="u48b6b60e" id="u48b6b60e" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 注解标记的类的元数据信息。</span></li><li fid="u12199f98" data-lake-id="u2c6b390d" id="u2c6b390d"><span data-lake-id="udfa2e5d3" id="udfa2e5d3" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">它提供了一系列方法，可以获取到被标记类上的注解信息、类的全限定名、类的父类、类实现的接口等。</span></li><li fid="u12199f98" data-lake-id="u7d259b9a" id="u7d259b9a"><span data-lake-id="u7133255e" id="u7133255e" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">在这段代码中，使用 </span><strong><span data-lake-id="u7027fe2f" id="u7027fe2f" class="lake-fontsize-12" style="color: var(--tw-prose-code)">importingClassMetadata</span></strong><span data-lake-id="u5d7243c3" id="u5d7243c3" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 获取了 </span><strong><span data-lake-id="u30c6f946" id="u30c6f946" class="lake-fontsize-12" style="color: var(--tw-prose-code)">EnableRpc</span></strong><span data-lake-id="u8273d165" id="u8273d165" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 注解中的 </span><strong><span data-lake-id="u71638df6" id="u71638df6" class="lake-fontsize-12" style="color: var(--tw-prose-code)">needServer</span></strong><span data-lake-id="u00cfb932" id="u00cfb932" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 属性的值。</span></li></ul><ol list="u43c9f301" start="2"><li fid="u0c9f944e" data-lake-id="ua3a2c1fc" id="ua3a2c1fc"><strong><span data-lake-id="u4f4a8659" id="u4f4a8659" class="lake-fontsize-12" style="color: var(--tw-prose-code)">BeanDefinitionRegistry registry</span></strong><span data-lake-id="uac85d7fe" id="uac85d7fe" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">：</span></li></ol><ul list="u0ad7112a" data-lake-indent="1"><li fid="u42f9228a" data-lake-id="ue3d6c699" id="ue3d6c699"><span data-lake-id="ud2f4d165" id="ud2f4d165" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">这个参数是一个接口，用于在 Spring 容器中注册 BeanDefinition。</span></li><li fid="u42f9228a" data-lake-id="u671af7b1" id="u671af7b1"><span data-lake-id="u0b676398" id="u0b676398" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">它定义了一系列方法，可以用来注册、移除、检查和获取 BeanDefinition。</span></li><li fid="u42f9228a" data-lake-id="uc38dbbf6" id="uc38dbbf6"><span data-lake-id="ud38de70b" id="ud38de70b" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">在这段代码中，</span><strong><span data-lake-id="u629107fa" id="u629107fa" class="lake-fontsize-12" style="color: var(--tw-prose-code)">registry</span></strong><span data-lake-id="u5071b7cf" id="u5071b7cf" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 参数用于注册 RPC 框架中需要的 BeanDefinition，例如配置信息、服务接口等。</span></li></ul><p data-lake-id="ua94b0064" id="ua94b0064"><span data-lake-id="u023e3905" id="u023e3905" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">综上所述，</span><strong><span data-lake-id="ue55347b5" id="ue55347b5" class="lake-fontsize-12" style="color: var(--tw-prose-code)">AnnotationMetadata</span></strong><span data-lake-id="ud12f93d2" id="ud12f93d2" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 和 </span><strong><span data-lake-id="u358fea7f" id="u358fea7f" class="lake-fontsize-12" style="color: var(--tw-prose-code)">BeanDefinitionRegistry</span></strong><span data-lake-id="u1a25c479" id="u1a25c479" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 这两个参数分别用于获取被 </span><strong><span data-lake-id="u352a8694" id="u352a8694" class="lake-fontsize-12" style="color: var(--tw-prose-code)">@Import</span></strong><span data-lake-id="u006af9fe" id="u006af9fe" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 注解标记类的元数据信息和在 Spring 容器中注册 BeanDefinition。</span></p><p data-lake-id="uc13c0e39" id="uc13c0e39"><span data-lake-id="u4fb5675d" id="u4fb5675d" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">​</span><br></p><h3 data-lake-id="ntxPT" id="ntxPT"><span data-lake-id="u3358700a" id="u3358700a" style="color: rgb(13, 13, 13)">关于第一行代码的解释</span></h3><p data-lake-id="ubc5d4d5a" id="ubc5d4d5a"><span data-lake-id="ud0c626b1" id="ud0c626b1">这行代码的作用是从 </span><code data-lake-id="u9c48399a" id="u9c48399a"><span data-lake-id="u22f2e1ae" id="u22f2e1ae">importingClassMetadata</span></code><span data-lake-id="u27a68649" id="u27a68649"> 中获取 </span><code data-lake-id="ud5d41c16" id="ud5d41c16"><span data-lake-id="u4ddf2214" id="u4ddf2214">@EnableRpc</span></code><span data-lake-id="u8cf231d9" id="u8cf231d9"> 注解的属性值 </span><code data-lake-id="uefa60bbc" id="uefa60bbc"><span data-lake-id="ue93dd875" id="ue93dd875">needServer</span></code><span data-lake-id="u47efc840" id="u47efc840">。</span></p><p data-lake-id="uf7ef8ce7" id="uf7ef8ce7"><br></p><p data-lake-id="ucdd5cbb6" id="ucdd5cbb6"><span data-lake-id="u33adc7af" id="u33adc7af" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">具体解释如下：</span></p><p data-lake-id="u9457c6ae" id="u9457c6ae"><br></p><ol list="u2de2ffad"><li fid="u4a8747f7" data-lake-id="u53cf82e0" id="u53cf82e0"><span data-lake-id="uc19eed12" id="uc19eed12" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> </span><code data-lake-id="u37dd18b9" id="u37dd18b9"><span data-lake-id="ub18f4ba9" id="ub18f4ba9" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">importingClassMetadata.getAnnotationAttributes(EnableRpc.class.getName())</span></code><span data-lake-id="ucf705dc7" id="ucf705dc7" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">：这个方法通过注解的全限定名（即类的完整路径名）获取 </span><code data-lake-id="u9cda3e0a" id="u9cda3e0a"><span data-lake-id="uf694cbe8" id="uf694cbe8" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">@EnableRpc</span></code><span data-lake-id="u8c21c795" id="u8c21c795" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 注解的所有属性和属性值。这个方法返回的是一个 </span><code data-lake-id="uc3825267" id="uc3825267"><span data-lake-id="uc140e540" id="uc140e540" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">Map&lt;String, Object&gt;</span></code><span data-lake-id="ua6fa3249" id="ua6fa3249" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">，其中键是属性名，值是属性值。 </span></li><li fid="u4a8747f7" data-lake-id="u374b922f" id="u374b922f"><span data-lake-id="u1f8da781" id="u1f8da781" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> </span><code data-lake-id="u7e900343" id="u7e900343"><span data-lake-id="u8692fa0d" id="u8692fa0d" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">.get(&quot;needServer&quot;)</span></code><span data-lake-id="ua8116e86" id="ua8116e86" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">：从获取到的属性和属性值的 Map 中，根据属性名 </span><code data-lake-id="u918695ad" id="u918695ad"><span data-lake-id="ucbdd8850" id="ucbdd8850" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">&quot;needServer&quot;</span></code><span data-lake-id="ufb0fe543" id="ufb0fe543" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 获取属性值。这个属性值的类型是 </span><code data-lake-id="uc2cb66ec" id="uc2cb66ec"><span data-lake-id="u3cf819eb" id="u3cf819eb" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">Object</span></code><span data-lake-id="u349a3823" id="u349a3823" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">，因此需要进行强制类型转换。 </span></li><li fid="u4a8747f7" data-lake-id="u5d6c8ac5" id="u5d6c8ac5"><span data-lake-id="ub98fa48d" id="ub98fa48d" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> </span><code data-lake-id="u4e4c9e3e" id="u4e4c9e3e"><span data-lake-id="u8c03ce8e" id="u8c03ce8e" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">(boolean)</span></code><span data-lake-id="uc0cc67f0" id="uc0cc67f0" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">：将属性值进行强制类型转换为 </span><code data-lake-id="ucfcd806f" id="ucfcd806f"><span data-lake-id="u7f0a5b9a" id="u7f0a5b9a" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">boolean</span></code><span data-lake-id="ucd613b92" id="ucd613b92" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 类型。因为我们知道 </span><code data-lake-id="u0a74d45a" id="u0a74d45a"><span data-lake-id="u40421565" id="u40421565" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">needServer</span></code><span data-lake-id="ud3c2bf34" id="ud3c2bf34" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 属性的类型是 </span><code data-lake-id="ubdc2a251" id="ubdc2a251"><span data-lake-id="u66d8045f" id="u66d8045f" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">boolean</span></code><span data-lake-id="uc17c6eec" id="uc17c6eec" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">，所以可以进行这样的类型转换。 </span></li></ol><p data-lake-id="u86cd5d18" id="u86cd5d18"><br></p><p data-lake-id="ud5dcd8bc" id="ud5dcd8bc"><span data-lake-id="u90f828e7" id="u90f828e7" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">综上所述，这行代码的作用是从 </span><code data-lake-id="u704670cc" id="u704670cc"><span data-lake-id="u9eec7e5b" id="u9eec7e5b" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">@EnableRpc</span></code><span data-lake-id="ufb6ec489" id="ufb6ec489" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 注解中获取 </span><code data-lake-id="ua704871f" id="ua704871f"><span data-lake-id="u96af86a8" id="u96af86a8" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">needServer</span></code><span data-lake-id="u181f3ac8" id="u181f3ac8" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 属性的值，并将其转换为 </span><code data-lake-id="u9a7c24bb" id="u9a7c24bb"><span data-lake-id="u4b49be74" id="u4b49be74" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">boolean</span></code><span data-lake-id="ud35f5743" id="ud35f5743" class="lake-fontsize-12" style="color: rgb(13, 13, 13)"> 类型，赋值给变量 </span><code data-lake-id="u939c3a80" id="u939c3a80"><span data-lake-id="u1faba6e4" id="u1faba6e4" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">needServer</span></code><span data-lake-id="u78dd98f2" id="u78dd98f2" class="lake-fontsize-12" style="color: rgb(13, 13, 13)">。</span></p></details><p data-lake-id="u7ad3ed10" id="u7ad3ed10"><span data-lake-id="ud7bd0578" id="ud7bd0578" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="ue3163b2d" id="ue3163b2d"><span data-lake-id="u77f26e28" id="u77f26e28" style="color: rgb(31, 35, 40)">上述代码中，从 Spring 元信息中获取到了 EnableRpc 注解的 needServer 属性，并通过它来判断是否要启动服务器。</span></p><h5 data-lake-id="OChlO" id="OChlO"><span data-lake-id="u5a9f6a5a" id="u5a9f6a5a" style="color: rgb(31, 35, 40)">2）Rpc 服务提供者启动类 </span><code data-lake-id="u42eb3556" id="u42eb3556"><span data-lake-id="u4bfcdc32" id="u4bfcdc32" style="color: rgb(31, 35, 40)">RpcProviderBootstrap</span></code><span data-lake-id="uc84e868e" id="uc84e868e" style="color: rgb(31, 35, 40)">。</span></h5><p data-lake-id="u93c79967" id="u93c79967"><strong><span data-lake-id="ub7bc3b19" id="ub7bc3b19" style="color: rgb(31, 35, 40)">服务提供者启动类的作用是，获取到所有包含 </span></strong><code data-lake-id="uddd036f7" id="uddd036f7"><strong><span data-lake-id="u84059913" id="u84059913" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@RpcService</span></strong></code><strong><span data-lake-id="uf99d9049" id="uf99d9049" style="color: rgb(31, 35, 40)"> 注解的类，并且通过注解的属性和反射机制，获取到要注册的服务信息，并且完成服务注册。</span></strong></p><p data-lake-id="u76d65525" id="u76d65525"><strong><span data-lake-id="u72c9390e" id="u72c9390e" style="color: rgb(31, 35, 40)">​</span></strong><br></p><p data-lake-id="u7e82e972" id="u7e82e972"><span data-lake-id="u06f00934" id="u06f00934" style="color: rgb(31, 35, 40)">怎么获取到所有包含 </span><code data-lake-id="ua3a67eee" id="ua3a67eee"><span data-lake-id="u2999cdd4" id="u2999cdd4" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@RpcService</span></code><span data-lake-id="u2d65b404" id="u2d65b404" style="color: rgb(31, 35, 40)"> 注解的类呢？</span></p><p data-lake-id="u50f08615" id="u50f08615"><span data-lake-id="uf3f62e6b" id="uf3f62e6b" style="color: rgb(31, 35, 40)">像前面设计方案中提到的，可以主动扫描包，也可以</span><span style="color: rgb(31, 35, 40)"><u><strong><span data-lake-id="ud707ea93" id="ud707ea93">利用 Spring 的特性监听 Bean 的加载</span></strong></u></span><span data-lake-id="ua87da463" id="ua87da463" style="color: rgb(31, 35, 40)">。</span></p><p data-lake-id="uefeba0e6" id="uefeba0e6"><span data-lake-id="u3c374ac9" id="u3c374ac9" style="color: rgb(31, 35, 40)">​</span><br></p><p data-lake-id="u557d11fb" id="u557d11fb"><span data-lake-id="u4e87819c" id="u4e87819c" style="color: rgb(31, 35, 40)">此处我们选择后者，实现更简单，而且能直接获取到服务提供者类的 Bean 对象。</span></p><p data-lake-id="u2de3a9f7" id="u2de3a9f7"><span data-lake-id="u8644c1fa" id="u8644c1fa" style="color: rgb(31, 35, 40)">只需要让启动类实现 </span><code data-lake-id="uf61f23c9" id="uf61f23c9"><span data-lake-id="u6471a4b4" id="u6471a4b4" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">BeanPostProcessor</span></code><span data-lake-id="u86e0bba2" id="u86e0bba2" style="color: rgb(31, 35, 40)">接口的 </span><code data-lake-id="ue9285d8c" id="ue9285d8c"><span data-lake-id="u6ea0ea0e" id="u6ea0ea0e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">postProcessAfterInitialization</span><span data-lake-id="u348068cd" id="u348068cd" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u877fb405" id="u877fb405" style="color: rgb(31, 35, 40)">方法，就可以在某个服务提供者 Bean 初始化后，执行注册服务等操作了。</span></p><p data-lake-id="u745b0259" id="u745b0259"><span data-lake-id="u79632a49" id="u79632a49" style="color: rgb(31, 35, 40)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.bootstrap%3B%5Cn%5Cnimport%20com.yybf.chenrpc.RpcApplication%3B%5Cnimport%20com.yybf.chenrpc.config.RegistryConfig%3B%5Cnimport%20com.yybf.chenrpc.config.RpcConfig%3B%5Cnimport%20com.yybf.chenrpc.model.ServiceMetaInfo%3B%5Cnimport%20com.yybf.chenrpc.registry.LocalRegistry%3B%5Cnimport%20com.yybf.chenrpc.registry.Registry%3B%5Cnimport%20com.yybf.chenrpc.registry.RegistryFactory%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.RpcService%3B%5Cnimport%20org.springframework.beans.BeansException%3B%5Cnimport%20org.springframework.beans.factory.config.BeanPostProcessor%3B%5Cn%5Cn%2F**%5Cn%20*%20Rpc%20%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%90%AF%E5%8A%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F20%5Cn%20*%2F%5Cnpublic%20class%20RpcProviderBootStrap%20implements%20BeanPostProcessor%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20Bean%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%89%A7%E8%A1%8C%EF%BC%8C%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20*%20%E5%AE%83%E4%BC%9A%E6%A3%80%E6%9F%A5%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%20Bean%20%E6%98%AF%E5%90%A6%E5%B8%A6%E6%9C%89%20%40RpcService%20%E6%B3%A8%E8%A7%A3%EF%BC%8C%5Cn%20%20%20%20%20*%20%E5%A6%82%E6%9E%9C%E6%9C%89%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%B0%86%E8%AF%A5%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E3%80%82%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20bean%3A%20%20%20%20%20%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%20bean%20%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%20%40param%20beanName%3A%20%E8%AF%A5%20bean%20%E5%9C%A8%20spring%20%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F22%2010%3A39%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20postProcessAfterInitialization(Object%20bean%2C%20String%20beanName)%20throws%20BeansException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%20Bean%20%E5%AF%B9%E8%B1%A1%E7%9A%84%20Class%20%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20Class%3C%3F%3E%20beanClass%20%3D%20bean.getClass()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E8%AF%A5%20Bean%20%E7%B1%BB%E4%B8%8A%E7%9A%84%E2%80%98%40RpcService%E2%80%99%E6%B3%A8%E8%A7%A3%5Cn%20%20%20%20%20%20%20%20RpcService%20rpcService%20%3D%20beanClass.getAnnotation(RpcService.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(rpcService%20!%3D%20null)%20%7B%20%2F%2F%20%E5%A6%82%E6%9E%9C%E8%AF%A5%E7%B1%BB%E4%B8%8A%E9%9D%A2%E6%9C%89%E6%B3%A8%E8%A7%A3%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%B3%A8%E9%87%8A%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Class%3C%3F%3E%20interfaceClass%20%3D%20rpcService.interfaceClass()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(interfaceClass%20%3D%3D%20void.class)%20%7B%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%98%BE%E5%BC%8F%E7%9A%84%E6%8C%87%E6%98%8E%EF%BC%8C%E5%B0%B1%E4%BC%9A%E8%BF%94%E5%9B%9E%E9%BB%98%E8%AE%A4%E7%9A%84void%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%98%BE%E5%BC%8F%E7%9A%84%E6%8C%87%E6%98%8E%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E4%BD%BF%E7%94%A8%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20interfaceClass%20%3D%20beanClass.getInterfaces()%5B0%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%E6%8E%A5%E5%8F%A3%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%90%8D%E7%A7%B0%EF%BC%8C%E4%BB%8E%E6%B3%A8%E8%A7%A3%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%89%88%E6%9C%AC%E5%8F%B7%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20serviceName%20%3D%20interfaceClass.getName()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20String%20serviceVersion%20%3D%20rpcService.serviceVersion()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9C%AC%E5%9C%B0%E6%B3%A8%E5%86%8C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20LocalRegistry.register(serviceName%2C%20beanClass)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20final%20RpcConfig%20rpcConfig%20%3D%20RpcApplication.getRpcConfig()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RegistryConfig%20registryConfig%20%3D%20rpcConfig.getRegistryConfig()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Registry%20registry%20%3D%20RegistryFactory.getInstance(registryConfig.getRegistry())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ServiceMetaInfo%20serviceMetaInfo%20%3D%20new%20ServiceMetaInfo()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceName(serviceName)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceVersion(serviceVersion)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServiceHost(rpcConfig.getServerHost())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20serviceMetaInfo.setServicePort(rpcConfig.getServerPort())%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20registry.register(serviceMetaInfo)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(Exception%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(serviceName%20%2B%20%5C%22%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20BeanPostProcessor.super.postProcessAfterInitialization(bean%2C%20beanName)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22btCRu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u0ab7919d" id="u0ab7919d"><span data-lake-id="u759ee773" id="u759ee773" style="color: rgb(31, 35, 40)">其实上述代码中，绝大多数服务提供者初始化的代码都只需要从之前写好的启动类中复制粘贴，只不过换了一种参数获取方式罢了。</span></p><h5 data-lake-id="oHCC4" id="oHCC4"><span data-lake-id="u7ddd3128" id="u7ddd3128" style="color: rgb(31, 35, 40)">3）Rpc 服务消费者启动类 </span><code data-lake-id="ua8e4653a" id="ua8e4653a"><span data-lake-id="u4a6fb03a" id="u4a6fb03a" style="color: rgb(31, 35, 40)">RpcConsumerBootstrap</span></code><span data-lake-id="u1546194d" id="u1546194d" style="color: rgb(31, 35, 40)">。</span></h5><p data-lake-id="u90a1eec0" id="u90a1eec0"><span data-lake-id="u1008ab81" id="u1008ab81" style="color: rgb(31, 35, 40)">和服务提供者启动类的实现方式类似，在 Bean 初始化后，通过反射获取到 Bean 的所有属性，如果</span><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u1b47c84f" id="u1b47c84f">属性包含 </span></u></span></strong><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u2d842346" id="u2d842346" class="lake-fontsize-10">@RpcReference</span></u></span></strong><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u25622070" id="u25622070"> 注解，那么就为该属性动态生成代理对象并赋值。</span></u></span></strong></p><p data-lake-id="uf88452a7" id="uf88452a7"><span data-lake-id="u029f31d3" id="u029f31d3" style="color: rgb(31, 35, 40)">完整代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.bootstrap%3B%5Cn%5Cnimport%20com.yybf.chenrpc.proxy.ServiceProxyFactory%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.RpcReference%3B%5Cnimport%20lombok.extern.slf4j.Slf4j%3B%5Cnimport%20org.springframework.beans.BeansException%3B%5Cnimport%20org.springframework.beans.factory.config.BeanPostProcessor%3B%5Cn%5Cnimport%20java.lang.reflect.Field%3B%5Cn%5Cn%2F**%5Cn%20*%20Rpc%20%E6%B6%88%E8%B4%B9%E8%80%85%E5%90%AF%E5%8A%A8%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F20%5Cn%20*%2F%5Cn%40Slf4j%5Cnpublic%20class%20RpcConsumerBootStrap%20implements%20BeanPostProcessor%20%7B%5Cn%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20Bean%E5%88%9D%E5%A7%8B%E5%8C%96%E5%90%8E%E6%89%A7%E8%A1%8C%EF%BC%8C%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%5Cn%20%20%20%20%20*%20%E5%AE%83%E4%BC%9A%E6%A3%80%E6%9F%A5%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%20Bean%20%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E4%B8%8A%E9%9D%A2%E6%98%AF%E5%90%A6%E5%B8%A6%E6%9C%89%20%40RpcReference%20%E6%B3%A8%E8%A7%A3%EF%BC%8C%5Cn%20%20%20%20%20*%20%E5%A6%82%E6%9E%9C%E6%9C%89%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%B0%86%E8%AF%A5%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20*%20%E6%9C%89%E7%82%B9%E7%B1%BB%E4%BC%BC%E4%BA%8Espring%20boot%E9%87%8C%E9%9D%A2%E7%9A%84%20%40Resource%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20bean%3A%20%20%20%20%20%E8%A2%AB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%20bean%20%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%20%40param%20beanName%3A%20%E8%AF%A5%20bean%20%E5%9C%A8%20spring%20%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84%E5%90%8D%E7%A7%B0%5Cn%20%20%20%20%20*%20%40return%20java.lang.Object%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F22%2011%3A30%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20Object%20postProcessAfterInitialization(Object%20bean%2C%20String%20beanName)%20throws%20BeansException%20%7B%5Cn%20%20%20%20%20%20%20%20Class%3C%3F%3E%20beanClass%20%3D%20bean.getClass()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20Field%5B%5D%20declaredFields%20%3D%20beanClass.getDeclaredFields()%3B%5Cn%20%20%20%20%20%20%20%20for%20(Field%20field%20%3A%20declaredFields)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20RpcReference%20rpcReference%20%3D%20field.getAnnotation(RpcReference.class)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(rpcReference%20!%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.info(%5C%22%E5%BC%80%E5%A7%8B%E6%B3%A8%E5%85%A5%20%5C%22%20%2B%20field)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%BA%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Class%3C%3F%3E%20interfaceClass%20%3D%20rpcReference.interfaceClass()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(interfaceClass%20%3D%3D%20void.class)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20interfaceClass%20%3D%20field.getType()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.error(%5C%22%E7%B1%BB%E5%9E%8B%EF%BC%9A%5C%22%20%2B%20field.getType())%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.error(%5C%22%E7%94%9F%E6%88%90%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%9A%5C%22%20%2B%20interfaceClass)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%8F%AF%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%BB%A5%E4%BE%BF%E5%90%8E%E7%BB%AD%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20field.setAccessible(true)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Object%20proxy%20%3D%20ServiceProxyFactory.getProxy(interfaceClass)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%BA%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20field.set(bean%2C%20proxy)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.warn(%5C%22%E5%B7%B2%E7%BB%8F%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%20%EF%BC%9A%5C%22%20%2B%20field%20%2B%20%5C%22%5C%5Cn%5C%22%20%2B%20bean%20%2B%20%5C%22%5C%5Cn%5C%22%20%2B%20proxy)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E4%B8%BA%E4%B8%8D%E5%8F%AF%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%BB%A5%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E6%80%A7%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20field.setAccessible(false)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IllegalAccessException%20e)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20RuntimeException(%5C%22%E4%B8%BA%E5%AD%97%E6%AE%B5%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E5%A4%B1%E8%B4%A5%5C%22%20%2B%20e)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20BeanPostProcessor.super.postProcessAfterInitialization(bean%2C%20beanName)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FIxVr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u72da4961" id="u72da4961"><span data-lake-id="u83b8eb54" id="u83b8eb54" style="color: rgb(31, 35, 40)">上述代码中，核心方法是 </span><code data-lake-id="ua34d172b" id="ua34d172b"><span data-lake-id="u316de34a" id="u316de34a" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">beanClass.getDeclaredFields</span></code><span data-lake-id="uf523174e" id="uf523174e" style="color: rgb(31, 35, 40)">，用于获取类中的所有属性。看到这里的同学，必须要把反射的常用语法熟记于心了。</span></p><details data-lake-id="ue94dad76" id="ue94dad76" open="true" class="lake-collapse"><summary data-lake-id="uffc920b8" id="uffc920b8" class="lake-summary"><span data-lake-id="ueb4b09e5" id="ueb4b09e5">关于我在在这里踩得坑QAQ</span></summary><p data-lake-id="u3933fb7d" id="u3933fb7d"><code data-lake-id="u1a9ff150" id="u1a9ff150"><span data-lake-id="u56954748" id="u56954748">getDeclaredFields()</span></code><span data-lake-id="u5657f813" id="u5657f813"> 和 </span><code data-lake-id="uaa339396" id="uaa339396"><span data-lake-id="u166afd7d" id="u166afd7d">getFields()</span></code><span data-lake-id="u44ce4328" id="u44ce4328"> 方法都用于获取类中的字段（成员变量），但它们之间有一些不同之处。</span></p><p data-lake-id="ued10632d" id="ued10632d"><br></p><ol list="uf3a11eea"><li fid="u584b1430" data-lake-id="ucddc090b" id="ucddc090b"><span data-lake-id="u9cc8a7f9" id="u9cc8a7f9"> </span><code data-lake-id="u8ba6d0d9" id="u8ba6d0d9"><span data-lake-id="u91cbe62d" id="u91cbe62d">getDeclaredFields()</span></code><span data-lake-id="u74a42fd6" id="u74a42fd6">： </span></li></ol><ul list="uba6c1279" data-lake-indent="1"><li fid="u66fa7694" data-lake-id="ua156a4e4" id="ua156a4e4"><span data-lake-id="u30611d7c" id="u30611d7c">这个方法返回的是类中声明的所有字段，包括私有字段和继承的字段，但不包括父类中的字段。</span></li><li fid="u66fa7694" data-lake-id="u82c170fa" id="u82c170fa"><span data-lake-id="ufaaffee3" id="ufaaffee3">返回的字段数组中包含了类中所有的字段，无论其访问修饰符是什么。</span></li></ul><ol list="u9d54b433" start="2"><li fid="u820fe447" data-lake-id="u02e0c848" id="u02e0c848"><span data-lake-id="uc60ef7df" id="uc60ef7df"> </span><code data-lake-id="u57f48a80" id="u57f48a80"><span data-lake-id="ufb74397b" id="ufb74397b">getFields()</span></code><span data-lake-id="ue312fe61" id="ue312fe61">： </span></li></ol><ul list="u10249adc" data-lake-indent="1"><li fid="u2aacb32f" data-lake-id="ue2161c88" id="ue2161c88"><span data-lake-id="uc6cf57be" id="uc6cf57be">这个方法返回的是类中所有的公共字段，包括继承的公共字段，但不包括私有字段和受保护的字段。</span></li><li fid="u2aacb32f" data-lake-id="ud528de08" id="ud528de08"><span data-lake-id="ub0b84af5" id="ub0b84af5">返回的字段数组中只包含了类中的公共字段，也就是那些使用 </span><code data-lake-id="ua020ca93" id="ua020ca93"><span data-lake-id="ub372e510" id="ub372e510">public</span></code><span data-lake-id="u5feabf38" id="u5feabf38"> 修饰的字段。</span></li></ul><p data-lake-id="uc0902a27" id="uc0902a27"><br></p><p data-lake-id="u3aaf80dd" id="u3aaf80dd"><span data-lake-id="u91c75f45" id="u91c75f45">总之，</span><code data-lake-id="u51246f3d" id="u51246f3d"><span data-lake-id="uff0584d5" id="uff0584d5">getDeclaredFields()</span></code><span data-lake-id="u578edd95" id="u578edd95"> 方法获取的是类中声明的所有字段，而 </span><code data-lake-id="u4c677646" id="u4c677646"><span data-lake-id="ua4c87a07" id="ua4c87a07">getFields()</span></code><span data-lake-id="u0f1a5be7" id="u0f1a5be7"> 方法获取的是类中所有的公共字段。</span></p><p data-lake-id="u2efccf6e" id="u2efccf6e"><span data-lake-id="ub172cc67" id="ub172cc67">​</span><br></p><p data-lake-id="u0d309392" id="u0d309392"><span data-lake-id="uf2822b26" id="uf2822b26">就因为太依赖自动提示了，应该写</span><code data-lake-id="u05f4d7a5" id="u05f4d7a5"><span data-lake-id="u4b7f57de" id="u4b7f57de">getDeclaredFields</span></code><span data-lake-id="u89117170" id="u89117170">获取所有字段，写成了</span><code data-lake-id="uccf26ef4" id="uccf26ef4"><span data-lake-id="u43d01da5" id="u43d01da5">getFields</span></code><span data-lake-id="uf90e2fb9" id="uf90e2fb9">，导致只能获取类中的公共字段，而我要注入的属性又定义的是私有的字段，所以死活扫描不到，debug de了两天QAQ</span></p></details><p data-lake-id="ubcc6e26a" id="ubcc6e26a"><span data-lake-id="uebabc4f7" id="uebabc4f7" style="color: rgb(31, 35, 40)">​</span><br></p><h5 data-lake-id="LOngD" id="LOngD"><span data-lake-id="ue9c037ba" id="ue9c037ba" style="color: rgb(31, 35, 40)">4）注册已编写的启动类。</span></h5><p data-lake-id="ua79b07a2" id="ua79b07a2"><span data-lake-id="u777bd8dc" id="u777bd8dc" style="color: rgb(31, 35, 40)">最后，别忘了在 Spring 中加载我们已经编写好的启动类。</span></p><p data-lake-id="u9e8ecc23" id="u9e8ecc23"><span data-lake-id="uafa8639c" id="uafa8639c" style="color: rgb(31, 35, 40)">如何加载呢？</span></p><p data-lake-id="u57ae3a67" id="u57ae3a67"><span data-lake-id="u7fe37b71" id="u7fe37b71" style="color: rgb(31, 35, 40)">我们的需求是，仅在用户使用 </span><code data-lake-id="udcef3eb0" id="udcef3eb0"><span data-lake-id="u70858326" id="u70858326" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@EnableRpc</span></code><span data-lake-id="uca98b587" id="uca98b587" style="color: rgb(31, 35, 40)"> 注解时，才启动 RPC 框架。所以，可以通过给 EnableRpc 增加 </span><code data-lake-id="u624562c6" id="u624562c6"><span data-lake-id="ua1adf34e" id="ua1adf34e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@Import</span><span data-lake-id="u20fba18c" id="u20fba18c" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u2f58c046" id="u2f58c046" style="color: rgb(31, 35, 40)">注解，来注册我们自定义的启动类，实现灵活的可选加载。</span></p><p data-lake-id="u291e0411" id="u291e0411"><span data-lake-id="uee296876" id="uee296876" style="color: rgb(31, 35, 40)">修改后的 EnableRpc 注解代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.chenrpc.springboot.starter.annotation%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcConsumerBootStrap%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcInitBootStrap%3B%5Cnimport%20com.yybf.chenrpc.springboot.starter.bootstrap.RpcProviderBootStrap%3B%5Cnimport%20org.springframework.context.annotation.Import%3B%5Cn%5Cnimport%20java.lang.annotation.ElementType%3B%5Cnimport%20java.lang.annotation.Retention%3B%5Cnimport%20java.lang.annotation.RetentionPolicy%3B%5Cnimport%20java.lang.annotation.Target%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%20%E5%90%AF%E7%94%A8%20RPC%20%E6%B3%A8%E8%A7%A3%5Cn%20*%20%40date%202024%2F4%2F20-11%3A36%5Cn%20*%2F%5Cn%40Target(%7BElementType.TYPE%7D)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Import(%7BRpcInitBootStrap.class%2C%20RpcProviderBootStrap.class%2C%20RpcConsumerBootStrap.class%7D)%5Cnpublic%20%40interface%20EnableRpc%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%20%E9%9C%80%E8%A6%81%E5%90%AF%E5%8A%A8%20server%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40return%20boolean%3A%5Cn%20%20%20%20%20*%20%40author%20yangyibufeng%5Cn%20%20%20%20%20*%20%40date%202024%2F4%2F20%2011%3A38%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20boolean%20needServer()%20default%20true%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A642%2C%22to%22%3A731%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22BzUsN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u4a065ef8" id="u4a065ef8"><span data-lake-id="ua769f9d1" id="ua769f9d1" style="color: rgb(31, 35, 40)">至此，一个基于注解驱动的 RPC 框架 Starter 开发完成。</span></p><h2 data-lake-id="nmn6k" id="nmn6k"><span data-lake-id="uc54d5652" id="uc54d5652" style="color: rgba(0, 0, 0, 0.85)">四、测试</span></h2><p data-lake-id="u90756a32" id="u90756a32"><span data-lake-id="uf7a29adf" id="uf7a29adf" style="color: rgb(31, 35, 40)">让我们使用 IDEA 新建 2 个使用 Spring Boot 2 框架的项目。</span></p><ul list="u4277f28d"><li fid="uae5345e5" data-lake-id="u4d0921eb" id="u4d0921eb"><span data-lake-id="u9a9f5c66" id="u9a9f5c66" style="color: rgb(31, 35, 40)">示例 Spring Boot 消费者：example-springboot-consumer</span></li><li fid="uae5345e5" data-lake-id="u62d83550" id="u62d83550"><span data-lake-id="u43ec64ea" id="u43ec64ea" style="color: rgb(31, 35, 40)">示例 Spring Boot 提供者：example-springboot-provider</span></li></ul><p data-lake-id="u17d31ab9" id="u17d31ab9"><span data-lake-id="ubf4b3fe1" id="ubf4b3fe1" style="color: rgb(31, 35, 40)">项目的目录结构如下图：</span></p><p data-lake-id="u37fd7936" id="u37fd7936"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965279283-dd7f3244-8f8e-4c85-ac71-875b20349d4f.png%22%2C%22taskId%22%3A%22u95d4e078-9185-4e46-9552-ebe38a5f96e%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A530%2C%22height%22%3A900%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A294230%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A530%2C%22originHeight%22%3A900%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22C%20D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%20CHEN-RPCD%3A%5C%5CRE%20.IDEA%20CHEN-RPC-CORE%20CHEN-ROC-EASY%20CHEN-RPC-SPRING-BOOT-SARTER%20EXAMPLE-COMMON%20EXAMPLE-CONSUMER%20EXAMPLE-PROVIDER%20EXAMPLE-SPRINGBOOT-CONSUMER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLESPRINGBOOT%20OTCONSUMER%20EXAMPLESERVICELMPL%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20TEST%20TARGET%20GITIGNORE%20HELP.MD%20MD%20M%20POM.XML%20EXAMPLE-SPRINGBOOT-PROVIDER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLESPRINGBOOTPROVIDER%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20USERSERVICELMPL%20TEST%20TARGET%20WOS%20GITIGNORE%20HELP.MD%20POMXML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123%2C%22y%22%3A1%2C%22width%22%3A361%2C%22height%22%3A21%2C%22text%22%3A%22C%20D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC%22%7D%2C%7B%22x%22%3A51%2C%22y%22%3A2%2C%22width%22%3A104%2C%22height%22%3A18%2C%22text%22%3A%22CHEN-RPCD%3A%5C%5CRE%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A28%2C%22width%22%3A34%2C%22height%22%3A14%2C%22text%22%3A%22.IDEA%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A54%2C%22width%22%3A109%2C%22height%22%3A15%2C%22text%22%3A%22CHEN-RPC-CORE%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A77%2C%22width%22%3A108%2C%22height%22%3A16%2C%22text%22%3A%22CHEN-ROC-EASY%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A103%2C%22width%22%3A215%2C%22height%22%3A16%2C%22text%22%3A%22CHEN-RPC-SPRING-BOOT-SARTER%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A129%2C%22width%22%3A144%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLE-COMMON%22%7D%2C%7B%22x%22%3A72%2C%22y%22%3A153%2C%22width%22%3A151%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLE-CONSUMER%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A176%2C%22width%22%3A138%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLE-PROVIDER%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A204%2C%22width%22%3A240%2C%22height%22%3A14%2C%22text%22%3A%22EXAMPLE-SPRINGBOOT-CONSUMER%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A229%2C%22width%22%3A23%2C%22height%22%3A12%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A254%2C%22width%22%3A35%2C%22height%22%3A12%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A141%2C%22y%22%3A279%2C%22width%22%3A29%2C%22height%22%3A13%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A164%2C%22y%22%3A305%2C%22width%22%3A32%2C%22height%22%3A11%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A186%2C%22y%22%3A326%2C%22width%22%3A34%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A207%2C%22y%22%3A353%2C%22width%22%3A143%2C%22height%22%3A16%2C%22text%22%3A%22EXAMPLESPRINGBOOT%22%7D%2C%7B%22x%22%3A345%2C%22y%22%3A354%2C%22width%22%3A81%2C%22height%22%3A13%2C%22text%22%3A%22OTCONSUMER%22%7D%2C%7B%22x%22%3A232%2C%22y%22%3A376%2C%22width%22%3A146%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLESERVICELMPL%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A400%2C%22width%22%3A298%2C%22height%22%3A20%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A429%2C%22width%22%3A29%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A455%2C%22width%22%3A45%2C%22height%22%3A14%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A78%2C%22y%22%3A476%2C%22width%22%3A95%2C%22height%22%3A20%2C%22text%22%3A%22GITIGNORE%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A502%2C%22width%22%3A68%2C%22height%22%3A15%2C%22text%22%3A%22HELP.MD%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A509%2C%22width%22%3A19%2C%22height%22%3A10%2C%22text%22%3A%22MD%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A527%2C%22width%22%3A88%2C%22height%22%3A15%2C%22text%22%3A%22M%20POM.XML%22%7D%2C%7B%22x%22%3A74%2C%22y%22%3A553%2C%22width%22%3A228%2C%22height%22%3A16%2C%22text%22%3A%22EXAMPLE-SPRINGBOOT-PROVIDER%22%7D%2C%7B%22x%22%3A95%2C%22y%22%3A580%2C%22width%22%3A23%2C%22height%22%3A12%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A604%2C%22width%22%3A36%2C%22height%22%3A12%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A139%2C%22y%22%3A628%2C%22width%22%3A31%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A164%2C%22y%22%3A655%2C%22width%22%3A32%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A188%2C%22y%22%3A678%2C%22width%22%3A32%2C%22height%22%3A16%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A207%2C%22y%22%3A702%2C%22width%22%3A210%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDER%22%7D%2C%7B%22x%22%3A231%2C%22y%22%3A726%2C%22width%22%3A293%2C%22height%22%3A16%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%22%7D%2C%7B%22x%22%3A232%2C%22y%22%3A751%2C%22width%22%3A119%2C%22height%22%3A16%2C%22text%22%3A%22USERSERVICELMPL%22%7D%2C%7B%22x%22%3A118%2C%22y%22%3A779%2C%22width%22%3A31%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A804%2C%22width%22%3A46%2C%22height%22%3A14%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A73%2C%22y%22%3A823%2C%22width%22%3A20%2C%22height%22%3A71%2C%22text%22%3A%22WOS%22%7D%2C%7B%22x%22%3A96%2C%22y%22%3A826%2C%22width%22%3A73%2C%22height%22%3A19%2C%22text%22%3A%22GITIGNORE%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A852%2C%22width%22%3A67%2C%22height%22%3A15%2C%22text%22%3A%22HELP.MD%22%7D%2C%7B%22x%22%3A97%2C%22y%22%3A879%2C%22width%22%3A65%2C%22height%22%3A14%2C%22text%22%3A%22POMXML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23444e5a%22%2C%22id%22%3A%22ub2ef280e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uda015e17" id="uda015e17"><span data-lake-id="ud3c02195" id="ud3c02195" style="color: rgb(31, 35, 40)">每个项目都引入依赖：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Echen-rpc-spring-boot-sarter%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E0.0.1-SNAPSHOT%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%5Cn%3Cdependency%3E%5Cn%20%20%3CgroupId%3Ecom.yybf%3C%2FgroupId%3E%5Cn%20%20%3CartifactId%3Eexample-common%3C%2FartifactId%3E%5Cn%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gcPhD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="NO5i8" id="NO5i8"><span data-lake-id="u28824b05" id="u28824b05" style="color: rgb(31, 35, 40)">1）示例服务提供者项目</span></h3><p data-lake-id="u2af220f9" id="u2af220f9"><span data-lake-id="u6303a5da" id="u6303a5da" style="color: rgb(31, 35, 40)">在入口类加上 </span><code data-lake-id="ub39d865b" id="ub39d865b"><span data-lake-id="uc2385b05" id="uc2385b05" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@EnableRpc</span><span data-lake-id="u55481b37" id="u55481b37" style="color: rgb(31, 35, 40)">​</span></code><span data-lake-id="u34839b54" id="u34839b54" style="color: rgb(31, 35, 40)">注解，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.examplespringbootprovider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.EnableRpc%3B%5Cnimport%20org.springframework.boot.SpringApplication%3B%5Cnimport%20org.springframework.boot.autoconfigure.SpringBootApplication%3B%5Cn%5Cn%40SpringBootApplication%5Cn%40EnableRpc%5Cnpublic%20class%20ExampleSpringbootProviderApplication%20%7B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20SpringApplication.run(ExampleSpringbootProviderApplication.class%2C%20args)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A254%2C%22to%22%3A264%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gU80J%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u1b99c3e5" id="u1b99c3e5"><span data-lake-id="u34b78f8f" id="u34b78f8f" style="color: rgb(31, 35, 40)">服务提供者提供一个简单的服务，代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.examplespringbootprovider%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.RpcService%3B%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cnimport%20org.springframework.stereotype.Service%3B%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%A8%E6%88%B7%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E7%B1%BB%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F22%5Cn%20*%2F%5Cn%40Service%5Cn%40RpcService%5Cnpublic%20class%20UserServiceImpl%20implements%20UserService%20%7B%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20User%20getUser(User%20user)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%EF%BC%9A%5C%22%20%2B%20user.getName())%3B%5Cn%20%20%20%20%20%20%20%20return%20user%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A319%2C%22to%22%3A327%2C%22underline%22%3Atrue%7D%2C%7B%22from%22%3A328%2C%22to%22%3A339%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tFFxZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><h3 data-lake-id="niTyP" id="niTyP"><span data-lake-id="u5bebcf31" id="u5bebcf31" style="color: rgb(31, 35, 40)">2）示例服务消费者</span></h3><p data-lake-id="uf07fd13b" id="uf07fd13b"><span data-lake-id="u51589161" id="u51589161" style="color: rgb(31, 35, 40)">在入口类加上 </span><code data-lake-id="u1a408f2f" id="u1a408f2f"><span data-lake-id="u34f38e39" id="u34f38e39" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@EnableRpc(needServer = false)</span></code><span data-lake-id="u1e8cc914" id="u1e8cc914" style="color: rgb(31, 35, 40)"> 注解，</span><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u642fc71c" id="u642fc71c">标识启动 RPC 框架，但不启动服务器。</span></u></span></p><p data-lake-id="udc1fcde7" id="udc1fcde7"><span data-lake-id="u4e2a31d0" id="u4e2a31d0" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.examplespringbootconsumer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.EnableRpc%3B%5Cnimport%20org.springframework.boot.SpringApplication%3B%5Cnimport%20org.springframework.boot.autoconfigure.SpringBootApplication%3B%5Cn%5Cn%40SpringBootApplication%5Cn%40EnableRpc(needServer%20%3D%20false)%20%2F%2F%20%E6%A0%87%E8%AF%86%E5%90%AF%E5%8A%A8%20RPC%20%E6%A1%86%E6%9E%B6%EF%BC%8C%E4%BD%86%E4%B8%8D%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cnpublic%20class%20ExampleSpringbootConsumerApplication%20%7B%5Cn%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20SpringApplication.run(ExampleSpringbootConsumerApplication.class%2C%20args)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yl3At%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="uc512700d" id="uc512700d"><span data-lake-id="ud65c4535" id="ud65c4535" style="color: rgb(31, 35, 40)">消费者编写一个 Spring 的 Bean，</span><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="ufb492673" id="ufb492673">引入 UserService 属性并打上 </span></u></span></strong><code data-lake-id="u65a622c3" id="u65a622c3"><strong><span data-lake-id="u9486c07e" id="u9486c07e" class="lake-fontsize-10" style="color: rgb(31, 35, 40)">@RpcReference</span></strong></code><strong><span style="color: rgb(31, 35, 40)"><u><span data-lake-id="u319ede6c" id="u319ede6c"> 注解</span></u></span></strong><span data-lake-id="u6cdc15e3" id="u6cdc15e3" style="color: rgb(31, 35, 40)">，表示需要使用远程服务提供者的服务。</span></p><p data-lake-id="uf92fa1e4" id="uf92fa1e4"><span data-lake-id="uc23c5fe6" id="uc23c5fe6" style="color: rgb(31, 35, 40)">代码如下：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.examplespringbootconsumer%3B%5Cn%5Cnimport%20com.yybf.chenrpc.springboot.starter.annotation.RpcReference%3B%5Cnimport%20com.yybf.example.common.model.User%3B%5Cnimport%20com.yybf.example.common.service.UserService%3B%5Cnimport%20org.springframework.stereotype.Service%3B%5Cn%5Cnimport%20javax.annotation.Resource%3B%5Cn%5Cn%2F**%5Cn%20*%20%24END%24%5Cn%20*%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40date%202024%2F4%2F22%5Cn%20*%2F%5Cn%40Service%5Cnpublic%20class%20ExampleServiceImpl%20%7B%5Cn%5Cn%20%20%20%20%40RpcReference%5Cn%20%20%20%20private%20UserService%20userService%3B%5Cn%5Cn%20%20%20%20public%20void%20test()%7B%5Cn%20%20%20%20%20%20%20%20User%20user%20%3D%20new%20User()%3B%5Cn%20%20%20%20%20%20%20%20user.setName(%5C%22%E6%9D%A8%E6%AF%85%E4%B8%8D%E9%80%A2%5C%22)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20User%20serviceUser%20%3D%20userService.getUser(user)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ExampleServiceImpl%20-%20test%5C%22%2BserviceUser.getName())%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22customStyle%22%3A%5B%7B%22from%22%3A402%2C%22to%22%3A415%2C%22underline%22%3Atrue%7D%5D%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22c0zKq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u5f38946b" id="u5f38946b"><span data-lake-id="ud45950f6" id="ud45950f6" style="color: rgb(31, 35, 40)">服务消费者编写单元测试，验证能否调用远程服务：</span></p><card type="inline" name="codeblock" value="data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.yybf.examplespringbootconsumer%3B%5Cn%5Cnimport%20org.junit.jupiter.api.Test%3B%5Cnimport%20org.springframework.boot.test.context.SpringBootTest%3B%5Cn%5Cnimport%20javax.annotation.Resource%3B%5Cn%5Cn%2F**%5Cn%20*%20%40author%20yangyibufeng%5Cn%20*%20%40Description%5Cn%20*%20%40date%202024%2F4%2F22-12%3A21%5Cn%20*%2F%5Cn%40SpringBootTest%5Cnclass%20ExampleServiceImplTest%20%7B%5Cn%20%20%20%20%40Resource%5Cn%20%20%20%20private%20ExampleServiceImpl%20exampleService%3B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20void%20test1()%20%7B%5Cn%20%20%20%20%20%20%20%20exampleService.test()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lkxX9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u6980fea6" id="u6980fea6"><span data-lake-id="ud3812e23" id="ud3812e23" style="color: rgb(31, 35, 40)">服务消费者的目录结构如图：</span></p><p data-lake-id="u5303d808" id="u5303d808"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965532471-d35d518c-e8cd-4159-aa3c-320c2c096109.png%22%2C%22taskId%22%3A%22u10f5114f-f685-4472-a789-cccd2709435%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A514%2C%22height%22%3A504%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A178432%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A514%2C%22originHeight%22%3A504%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLE-SPRINGBOOT-CONSUMER%20SRC%20MAIN%20JAVA%20COM%20YYBF%20EXAMPLESPRINGBOOTCONSUMER%20EXAMPLESERVICELMPL%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20TEST%20JAVA%20COM%20YYBF%20EXAMPLESPRINGBOOTCONSUMER%20EXAMPLESERVICELMPLTEST%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20TARGET%20.GITIGNORE%20HELP.MD%20POM.XML%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A54%2C%22y%22%3A6%2C%22width%22%3A241%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLE-SPRINGBOOT-CONSUMER%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A33%2C%22width%22%3A23%2C%22height%22%3A11%2C%22text%22%3A%22SRC%22%7D%2C%7B%22x%22%3A99%2C%22y%22%3A57%2C%22width%22%3A35%2C%22height%22%3A12%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A121%2C%22y%22%3A81%2C%22width%22%3A30%2C%22height%22%3A13%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A142%2C%22y%22%3A108%2C%22width%22%3A34%2C%22height%22%3A11%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A168%2C%22y%22%3A129%2C%22width%22%3A33%2C%22height%22%3A17%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A193%2C%22y%22%3A156%2C%22width%22%3A210%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMER%22%7D%2C%7B%22x%22%3A211%2C%22y%22%3A179%2C%22width%22%3A149%2C%22height%22%3A18%2C%22text%22%3A%22EXAMPLESERVICELMPL%22%7D%2C%7B%22x%22%3A211%2C%22y%22%3A204%2C%22width%22%3A305%2C%22height%22%3A18%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A98%2C%22y%22%3A232%2C%22width%22%3A30%2C%22height%22%3A12%2C%22text%22%3A%22TEST%22%7D%2C%7B%22x%22%3A119%2C%22y%22%3A256%2C%22width%22%3A32%2C%22height%22%3A14%2C%22text%22%3A%22JAVA%22%7D%2C%7B%22x%22%3A144%2C%22y%22%3A283%2C%22width%22%3A32%2C%22height%22%3A12%2C%22text%22%3A%22COM%22%7D%2C%7B%22x%22%3A164%2C%22y%22%3A305%2C%22width%22%3A36%2C%22height%22%3A16%2C%22text%22%3A%22YYBF%22%7D%2C%7B%22x%22%3A192%2C%22y%22%3A332%2C%22width%22%3A208%2C%22height%22%3A13%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMER%22%7D%2C%7B%22x%22%3A210%2C%22y%22%3A356%2C%22width%22%3A180%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLESERVICELMPLTEST%22%7D%2C%7B%22x%22%3A209%2C%22y%22%3A379%2C%22width%22%3A305%2C%22height%22%3A18%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A75%2C%22y%22%3A407%2C%22width%22%3A48%2C%22height%22%3A15%2C%22text%22%3A%22TARGET%22%7D%2C%7B%22x%22%3A77%2C%22y%22%3A430%2C%22width%22%3A72%2C%22height%22%3A17%2C%22text%22%3A%22.GITIGNORE%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A454%2C%22width%22%3A68%2C%22height%22%3A16%2C%22text%22%3A%22HELP.MD%22%7D%2C%7B%22x%22%3A76%2C%22y%22%3A481%2C%22width%22%3A67%2C%22height%22%3A14%2C%22text%22%3A%22POM.XML%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%233a4f4e%22%2C%22id%22%3A%22uffde6b59%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u50adc23d" id="u50adc23d"><span data-lake-id="u812bdf2d" id="u812bdf2d" style="color: rgb(31, 35, 40)">3）启动服务提供者入口类，如下图：</span></p><p data-lake-id="udf2c7b1f" id="udf2c7b1f"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965697439-8fc29c7c-c05b-416a-bc33-3272de56c7cc.png%22%2C%22taskId%22%3A%22u7f296331-3113-4381-a66a-b4d53196d23%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1762%2C%22height%22%3A845%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A918534%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1762%2C%22originHeight%22%3A845%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%B8%89%E4%BA%91%7C(2H%7C%2B%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20ACTUATOR%20C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%20SPRING%20BOOT%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%2011%20(()%20%E5%85%AB%20CE%20(V2.6.13)%20%3A%3A%3A%20SPRING%20BOOT%20%3A%20PROVIDERAPPLICATION%20%3A%20STARTING%202024-04-24%2021%3A33%3A18.168%20%20INFO%2011376%20MAIN%20Y.E.EXAMPLESPRINGBOOTPROV%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20USING%20JAVA%2017.0.10%20ON%20%20ON%20LAPTOP-8FO30RRV%20WI%20%20WITH%20PID%2011376%20(D%3A%5C%5CVESOURCES)IDEA%20CODEYYUPI%2FCTEARPC%5C%5CCHEN-RPCLEXAMPLE-SPRINGBOOT-PROVIDER%5C%5CTARSET)CLASSES%20STARTED%20BY%20L%20D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%20MAIN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20NO%20ACTIVE%20PROFILE%20SET%2C%20FALLING%202024-04-24%2021%3A33%3A18.171%20%20INFO%2011376%20-%20%20BACK%20TO%201%20DEFAULT%20PROFILE%3A%20%5C%22DEFAULT%5C%22%20%3B%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG%202024-04-24%2021%3A33%3A18.496%20%20INFO%2011376%20---%20%5B%20MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%20(AANEECHEN-FR%2C%20VERSION%3BL%2CD%2C%20SERVERIAST-FOCALANCERPART%2C%20SERVERPARTEREROUNDRONDITERSFALIZEREREROUNDROND%20USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-1000000))%20%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC%20MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%202024-04-24%2021%3A33%3A18.499%20INF%20INFO%2011376%20%20REGISTRY.REGISTRY%20%E7%9A%84%20SPI%20%3A%20REGISTRY%20INIT%2CCONFIG%202024-04-24%2021%3A33%3A19.012%20%20INFO%2011376%20%20COM.YYBF.CHENRPC.RPCAPPLICATION%20MAIN%20REGISTRYCONFIG(REGISTRY-ETCD%2C%20ADDRESS%20HTTP%3A%2F%2FLOCAL%20USERNAMENULL%20PASSWORD-NULL%2C%20TIMEOUT-1000000)%20LHOST%3A2380%20%20TCP%20SERVER%20STARTED%20ON%20PORT18080%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20STARTED%2011376%202024-04-24%2021%3A33%3A19%2C758%20%20INFO%2011%20EXAMPLESPRINPBOOTPROVIDERAPPLICATION%20IN%202.946%20SECONDS%20(JVM%20RUNNING%20FOR%203.965)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A44%2C%22y%22%3A30%2C%22width%22%3A200%2C%22height%22%3A29%2C%22text%22%3A%22%E4%B8%89%E4%BA%91%7C(2H%7C%2B%22%7D%2C%7B%22x%22%3A446%2C%22y%22%3A36%2C%22width%22%3A42%2C%22height%22%3A15%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A537%2C%22y%22%3A37%2C%22width%22%3A69%2C%22height%22%3A15%2C%22text%22%3A%22ACTUATOR%22%7D%2C%7B%22x%22%3A443%2C%22y%22%3A65%2C%22width%22%3A517%2C%22height%22%3A21%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%22%7D%2C%7B%22x%22%3A85%2C%22y%22%3A66%2C%22width%22%3A92%2C%22height%22%3A17%2C%22text%22%3A%22SPRING%20BOOT%22%7D%2C%7B%22x%22%3A108%2C%22y%22%3A92%2C%22width%22%3A319%2C%22height%22%3A16%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A110%2C%22y%22%3A118%2C%22width%22%3A300%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A149%2C%22width%22%3A37%2C%22height%22%3A22%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A445%2C%22y%22%3A169%2C%22width%22%3A63%2C%22height%22%3A37%2C%22text%22%3A%22(()%22%7D%2C%7B%22x%22%3A451%2C%22y%22%3A200%2C%22width%22%3A36%2C%22height%22%3A26%2C%22text%22%3A%22%E5%85%AB%22%7D%2C%7B%22x%22%3A4%2C%22y%22%3A267%2C%22width%22%3A22%2C%22height%22%3A23%2C%22text%22%3A%22CE%22%7D%2C%7B%22x%22%3A774%2C%22y%22%3A286%2C%22width%22%3A91%2C%22height%22%3A21%2C%22text%22%3A%22(V2.6.13)%22%7D%2C%7B%22x%22%3A455%2C%22y%22%3A286%2C%22width%22%3A171%2C%22height%22%3A22%2C%22text%22%3A%22%3A%3A%3A%20SPRING%20BOOT%20%3A%22%7D%2C%7B%22x%22%3A1249%2C%22y%22%3A337%2C%22width%22%3A291%2C%22height%22%3A26%2C%22text%22%3A%22PROVIDERAPPLICATION%20%3A%20STARTING%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A337%2C%22width%22%3A352%2C%22height%22%3A23%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.168%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A961%2C%22y%22%3A341%2C%22width%22%3A49%2C%22height%22%3A18%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A1030%2C%22y%22%3A341%2C%22width%22%3A237%2C%22height%22%3A18%2C%22text%22%3A%22Y.E.EXAMPLESPRINGBOOTPROV%22%7D%2C%7B%22x%22%3A455%2C%22y%22%3A367%2C%22width%22%3A578%2C%22height%22%3A21%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20USING%20JAVA%2017.0.10%20ON%22%7D%2C%7B%22x%22%3A1014%2C%22y%22%3A369%2C%22width%22%3A207%2C%22height%22%3A17%2C%22text%22%3A%22%20ON%20LAPTOP-8FO30RRV%20WI%22%7D%2C%7B%22x%22%3A1200%2C%22y%22%3A369%2C%22width%22%3A148%2C%22height%22%3A18%2C%22text%22%3A%22%20WITH%20PID%2011376%22%7D%2C%7B%22x%22%3A459%2C%22y%22%3A394%2C%22width%22%3A1092%2C%22height%22%3A23%2C%22text%22%3A%22(D%3A%5C%5CVESOURCES)IDEA%20CODEYYUPI%2FCTEARPC%5C%5CCHEN-RPCLEXAMPLE-SPRINGBOOT-PROVIDER%5C%5CTARSET)CLASSES%20STARTED%20BY%20L%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A424%2C%22width%22%3A454%2C%22height%22%3A20%2C%22text%22%3A%22D%3A%5C%5CRESOURCES%5C%5CIDEA%20CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%22%7D%2C%7B%22x%22%3A963%2C%22y%22%3A448%2C%22width%22%3A794%2C%22height%22%3A23%2C%22text%22%3A%22MAIN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20NO%20ACTIVE%20PROFILE%20SET%2C%20FALLING%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A451%2C%22width%22%3A370%2C%22height%22%3A20%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.171%20%20INFO%2011376%20-%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A478%2C%22width%22%3A367%2C%22height%22%3A19%2C%22text%22%3A%22%20BACK%20TO%201%20DEFAULT%20PROFILE%3A%20%5C%22DEFAULT%5C%22%22%7D%2C%7B%22x%22%3A1450%2C%22y%22%3A500%2C%22width%22%3A282%2C%22height%22%3A27%2C%22text%22%3A%22%3B%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG%22%7D%2C%7B%22x%22%3A445%2C%22y%22%3A506%2C%22width%22%3A403%2C%22height%22%3A20%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.496%20%20INFO%2011376%20---%20%5B%22%7D%2C%7B%22x%22%3A949%2C%22y%22%3A506%2C%22width%22%3A396%2C%22height%22%3A19%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A459%2C%22y%22%3A531%2C%22width%22%3A1221%2C%22height%22%3A24%2C%22text%22%3A%22(AANEECHEN-FR%2C%20VERSION%3BL%2CD%2C%20SERVERIAST-FOCALANCERPART%2C%20SERVERPARTEREROUNDRONDITERSFALIZEREREROUNDROND%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A586%2C%22width%22%3A473%2C%22height%22%3A26%2C%22text%22%3A%22USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-1000000))%22%7D%2C%7B%22x%22%3A1449%2C%22y%22%3A615%2C%22width%22%3A271%2C%22height%22%3A25%2C%22text%22%3A%22%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC%22%7D%2C%7B%22x%22%3A964%2C%22y%22%3A616%2C%22width%22%3A367%2C%22height%22%3A21%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A616%2C%22width%22%3A275%2C%22height%22%3A20%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.499%20INF%22%7D%2C%7B%22x%22%3A699%2C%22y%22%3A618%2C%22width%22%3A102%2C%22height%22%3A17%2C%22text%22%3A%22INFO%2011376%22%7D%2C%7B%22x%22%3A459%2C%22y%22%3A642%2C%22width%22%3A248%2C%22height%22%3A25%2C%22text%22%3A%22%20REGISTRY.REGISTRY%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A1399%2C%22y%22%3A669%2C%22width%22%3A265%2C%22height%22%3A22%2C%22text%22%3A%22%3A%20REGISTRY%20INIT%2CCONFIG%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A668%2C%22width%22%3A353%2C%22height%22%3A23%2C%22text%22%3A%222024-04-24%2021%3A33%3A19.012%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A1025%2C%22y%22%3A671%2C%22width%22%3A315%2C%22height%22%3A19%2C%22text%22%3A%22%20COM.YYBF.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A964%2C%22y%22%3A673%2C%22width%22%3A46%2C%22height%22%3A16%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A454%2C%22y%22%3A698%2C%22width%22%3A495%2C%22height%22%3A22%2C%22text%22%3A%22REGISTRYCONFIG(REGISTRY-ETCD%2C%20ADDRESS%20HTTP%3A%2F%2FLOCAL%22%7D%2C%7B%22x%22%3A1069%2C%22y%22%3A700%2C%22width%22%3A127%2C%22height%22%3A17%2C%22text%22%3A%22USERNAMENULL%22%7D%2C%7B%22x%22%3A1212%2C%22y%22%3A700%2C%22width%22%3A315%2C%22height%22%3A18%2C%22text%22%3A%22PASSWORD-NULL%2C%20TIMEOUT-1000000)%22%7D%2C%7B%22x%22%3A958%2C%22y%22%3A701%2C%22width%22%3A94%2C%22height%22%3A15%2C%22text%22%3A%22LHOST%3A2380%22%7D%2C%7B%22x%22%3A445%2C%22y%22%3A724%2C%22width%22%3A311%2C%22height%22%3A22%2C%22text%22%3A%22%20TCP%20SERVER%20STARTED%20ON%20PORT18080%22%7D%2C%7B%22x%22%3A1037%2C%22y%22%3A752%2C%22width%22%3A493%2C%22height%22%3A22%2C%22text%22%3A%22Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20STARTED%22%7D%2C%7B%22x%22%3A736%2C%22y%22%3A754%2C%22width%22%3A62%2C%22height%22%3A17%2C%22text%22%3A%2211376%22%7D%2C%7B%22x%22%3A444%2C%22y%22%3A754%2C%22width%22%3A309%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A33%3A19%2C758%20%20INFO%2011%22%7D%2C%7B%22x%22%3A458%2C%22y%22%3A780%2C%22width%22%3A767%2C%22height%22%3A19%2C%22text%22%3A%22EXAMPLESPRINPBOOTPROVIDERAPPLICATION%20IN%202.946%20SECONDS%20(JVM%20RUNNING%20FOR%203.965)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23414a55%22%2C%22id%22%3A%22u9897d2c5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uaf3c0a8c" id="uaf3c0a8c"><br></p><p data-lake-id="u4c7bdc33" id="u4c7bdc33"><span data-lake-id="uf67651d5" id="uf67651d5" style="color: rgb(31, 35, 40)">启动服务消费者的入口类，如下图：</span></p><p data-lake-id="ue7fffc8b" id="ue7fffc8b"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965787237-e663170c-2754-4928-b6a7-08830154060a.png%22%2C%22taskId%22%3A%22u4da9c981-a19b-4877-8a20-bc006a712d9%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1735%2C%22height%22%3A722%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A811884%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1735%2C%22originHeight%22%3A722%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20%E6%9C%8D%E5%8A%A1%3A%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20ACTUATOR%20C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%20((%E5%85%AB%20%E5%85%AB%20O%20F%2F%2F-%2F_%20%3A%3A%20SPRING%20BOOT%20%3A%3A%20(V2.6.13)%202024-04-24%2021%3A34%3A34.909%20%20INFO%2023688%20D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%202024-04-24%2021%3A34%3A34%2C911%20%20INFO%2023688%20---%20%5B%20MAIN%5D%20COM.YYBF.CHEL%202024-04-24%2021%3A34%3A35.204%20%20INFO%2023688%20-.%20%3B%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG(NAME-CHEN-PPC%2CVERSION-1.0%2C%20.CHENRPC.RPCAPPLICATION%20LOADBALANCEREROUNDROBIN%2C%20RETRYSIRATEBYENO%2C%20TOLERANTSTRATEGYFAILSAFE%2C%20REGISTRYCONFIG-REGISTRYCONFIB%20SERVERHOST-LOCALHOST%2C%20SERVERPORT-18080%2C%20MOCK-FALSE%2C%20SERIALIZER%E4%B8%89JDK%2C%20(REGISTRY-ETCD%2C%20ADDRESS-HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20USERNAMEENULL%2C%20PASSWORDENULL%2C%20TIMEOUT-1000000))%20%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20%E7%9A%84%20SPI%202024-04-24%2021%3A34%3A35.206%20%20INFO%2023688%20MAIN%20COM.YYBF.CHENRPC.SPI.SPILOADER%202024-04-24%2021%3A34%3A35.609%20%20INFO%2023688%20-%201%20COM.YYBF.CHENRPC.RPCAPPLICATION%20MAINL%20C%20%3B%20REGISTRY%20INIT%2CCONFIG%20-%20REGISTRYCONFIG(REGISTRY-ETCD%2C%20ADDRESS-HTTP%3A%2F%2F1OCALHOST%3A2380%2C%20USERNAMEENULL%2C%20PASSWORDENULL%2C%20TIMEOUT-1000000000)%20%3A%E4%B8%8D%E5%90%AF%E5%8A%A8SERVER%202024-04-24%2021%3A34%3A35.610%20%20INFO%2023688%20-%20MAIN%5D%20C.Y.C.S.S.BOOTSTRAP.RPCINITBOOTSTRAP%20ON%20%3A%20STARTED%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20IN%201%20Y.E.EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20%3A%201%20IN%201.244%20SECONDS%20(JVM%202024-04-24%2021%3A34%3A35.827%20%20INFO%2023688%20MAIN%20RUNNING%20FOR%201.817)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A80%2C%22y%22%3A2%2C%22width%22%3A313%2C%22height%22%3A17%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A1%2C%22y%22%3A1%2C%22width%22%3A33%2C%22height%22%3A16%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%3A%22%7D%2C%7B%22x%22%3A453%2C%22y%22%3A4%2C%22width%22%3A302%2C%22height%22%3A14%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A37%2C%22width%22%3A42%2C%22height%22%3A17%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A138%2C%22y%22%3A37%2C%22width%22%3A61%2C%22height%22%3A16%2C%22text%22%3A%22ACTUATOR%22%7D%2C%7B%22x%22%3A40%2C%22y%22%3A67%2C%22width%22%3A516%2C%22height%22%3A21%2C%22text%22%3A%22C%3A%5C%5CUSERS%5C%5CLENOVO%5C%5C.JDKS%5C%5CCORRETTO-17.0.10%5C%5CBIN%5C%5CJAVA.EXE%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A174%2C%22width%22%3A62%2C%22height%22%3A27%2C%22text%22%3A%22((%E5%85%AB%22%7D%2C%7B%22x%22%3A51%2C%22y%22%3A204%2C%22width%22%3A35%2C%22height%22%3A21%2C%22text%22%3A%22%E5%85%AB%22%7D%2C%7B%22x%22%3A3%2C%22y%22%3A207%2C%22width%22%3A19%2C%22height%22%3A19%2C%22text%22%3A%22O%22%7D%2C%7B%22x%22%3A337%2C%22y%22%3A256%2C%22width%22%3A111%2C%22height%22%3A26%2C%22text%22%3A%22F%2F%2F-%2F_%22%7D%2C%7B%22x%22%3A50%2C%22y%22%3A286%2C%22width%22%3A173%2C%22height%22%3A20%2C%22text%22%3A%22%3A%3A%20SPRING%20BOOT%20%3A%3A%22%7D%2C%7B%22x%22%3A372%2C%22y%22%3A287%2C%22width%22%3A90%2C%22height%22%3A19%2C%22text%22%3A%22(V2.6.13)%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A341%2C%22width%22%3A356%2C%22height%22%3A18%2C%22text%22%3A%222024-04-24%2021%3A34%3A34.909%20%20INFO%2023688%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A396%2C%22width%22%3A456%2C%22height%22%3A22%2C%22text%22%3A%22D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%5C%5CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A423%2C%22width%22%3A406%2C%22height%22%3A20%2C%22text%22%3A%222024-04-24%2021%3A34%3A34%2C911%20%20INFO%2023688%20---%20%5B%22%7D%2C%7B%22x%22%3A551%2C%22y%22%3A451%2C%22width%22%3A187%2C%22height%22%3A22%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHEL%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A450%2C%22width%22%3A365%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A34%3A35.204%20%20INFO%2023688%20-.%22%7D%2C%7B%22x%22%3A979%2C%22y%22%3A452%2C%22width%22%3A644%2C%22height%22%3A20%2C%22text%22%3A%22%3B%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG(NAME-CHEN-PPC%2CVERSION-1.0%2C%22%7D%2C%7B%22x%22%3A710%2C%22y%22%3A453%2C%22width%22%3A217%2C%22height%22%3A17%2C%22text%22%3A%22.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A742%2C%22y%22%3A478%2C%22width%22%3A977%2C%22height%22%3A22%2C%22text%22%3A%22LOADBALANCEREROUNDROBIN%2C%20RETRYSIRATEBYENO%2C%20TOLERANTSTRATEGYFAILSAFE%2C%20REGISTRYCONFIG-REGISTRYCONFIB%22%7D%2C%7B%22x%22%3A53%2C%22y%22%3A480%2C%22width%22%3A672%2C%22height%22%3A23%2C%22text%22%3A%22SERVERHOST-LOCALHOST%2C%20SERVERPORT-18080%2C%20MOCK-FALSE%2C%20SERIALIZER%E4%B8%89JDK%2C%22%7D%2C%7B%22x%22%3A58%2C%22y%22%3A504%2C%22width%22%3A754%2C%22height%22%3A25%2C%22text%22%3A%22(REGISTRY-ETCD%2C%20ADDRESS-HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20USERNAMEENULL%2C%20PASSWORDENULL%2C%22%7D%2C%7B%22x%22%3A827%2C%22y%22%3A508%2C%22width%22%3A161%2C%22height%22%3A17%2C%22text%22%3A%22TIMEOUT-1000000))%22%7D%2C%7B%22x%22%3A1048%2C%22y%22%3A533%2C%22width%22%3A515%2C%22height%22%3A24%2C%22text%22%3A%22%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A41%2C%22y%22%3A535%2C%22width%22%3A344%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A34%3A35.206%20%20INFO%2023688%22%7D%2C%7B%22x%22%3A557%2C%22y%22%3A537%2C%22width%22%3A61%2C%22height%22%3A17%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A629%2C%22y%22%3A537%2C%22width%22%3A296%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A42%2C%22y%22%3A560%2C%22width%22%3A359%2C%22height%22%3A21%2C%22text%22%3A%222024-04-24%2021%3A34%3A35.609%20%20INFO%2023688%20-%22%7D%2C%7B%22x%22%3A614%2C%22y%22%3A562%2C%22width%22%3A322%2C%22height%22%3A18%2C%22text%22%3A%221%20COM.YYBF.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A558%2C%22y%22%3A563%2C%22width%22%3A74%2C%22height%22%3A16%2C%22text%22%3A%22MAINL%20C%22%7D%2C%7B%22x%22%3A1041%2C%22y%22%3A562%2C%22width%22%3A531%2C%22height%22%3A25%2C%22text%22%3A%22%3B%20REGISTRY%20INIT%2CCONFIG%20-%20REGISTRYCONFIG(REGISTRY-ETCD%2C%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A590%2C%22width%22%3A769%2C%22height%22%3A21%2C%22text%22%3A%22ADDRESS-HTTP%3A%2F%2F1OCALHOST%3A2380%2C%20USERNAMEENULL%2C%20PASSWORDENULL%2C%20TIMEOUT-1000000000)%22%7D%2C%7B%22x%22%3A1040%2C%22y%22%3A614%2C%22width%22%3A140%2C%22height%22%3A21%2C%22text%22%3A%22%3A%E4%B8%8D%E5%90%AF%E5%8A%A8SERVER%22%7D%2C%7B%22x%22%3A43%2C%22y%22%3A617%2C%22width%22%3A358%2C%22height%22%3A18%2C%22text%22%3A%222024-04-24%2021%3A34%3A35.610%20%20INFO%2023688%20-%22%7D%2C%7B%22x%22%3A551%2C%22y%22%3A618%2C%22width%22%3A434%2C%22height%22%3A20%2C%22text%22%3A%22MAIN%5D%20C.Y.C.S.S.BOOTSTRAP.RPCINITBOOTSTRAP%22%7D%2C%7B%22x%22%3A1009%2C%22y%22%3A644%2C%22width%22%3A524%2C%22height%22%3A20%2C%22text%22%3A%22ON%20%3A%20STARTED%20EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20IN%201%22%7D%2C%7B%22x%22%3A626%2C%22y%22%3A643%2C%22width%22%3A417%2C%22height%22%3A21%2C%22text%22%3A%22Y.E.EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20%3A%22%7D%2C%7B%22x%22%3A1495%2C%22y%22%3A645%2C%22width%22%3A223%2C%22height%22%3A19%2C%22text%22%3A%221%20IN%201.244%20SECONDS%20(JVM%22%7D%2C%7B%22x%22%3A42%2C%22y%22%3A646%2C%22width%22%3A353%2C%22height%22%3A17%2C%22text%22%3A%222024-04-24%2021%3A34%3A35.827%20%20INFO%2023688%22%7D%2C%7B%22x%22%3A562%2C%22y%22%3A646%2C%22width%22%3A46%2C%22height%22%3A17%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A52%2C%22y%22%3A672%2C%22width%22%3A183%2C%22height%22%3A19%2C%22text%22%3A%22RUNNING%20FOR%201.817)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23414b56%22%2C%22id%22%3A%22u48502a31%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uf7ce54e2" id="uf7ce54e2"><span data-lake-id="u655c8835" id="u655c8835" style="color: rgb(31, 35, 40)">可以看到 server 并没有启动，符合预期。</span></p><p data-lake-id="u3918e28d" id="u3918e28d"><span data-lake-id="u35287358" id="u35287358" style="color: rgb(31, 35, 40)">最后，执行服务消费者的单元测试，验证能否跑通整个流程。</span></p><p data-lake-id="u27b6484b" id="u27b6484b"><span data-lake-id="u1417c9f3" id="u1417c9f3" style="color: rgb(31, 35, 40)">如下图，调用成功：</span></p><p data-lake-id="uc42a6ffa" id="uc42a6ffa"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965826956-fc879237-7508-4924-a9fa-ac5179b5141b.png%22%2C%22taskId%22%3A%22u09f60e9d-b433-44ed-84eb-43e25197f64%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1720%2C%22height%22%3A510%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A604407%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1720%2C%22originHeight%22%3A510%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22QUICKPROVIDER%20EXAMPLESERVICELMPITEST.TEST1%20%E4%B8%89%E6%B1%81%E5%8A%B2%20%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-1%E7%A7%92272%E6%AF%AB%E7%A7%92%20%3B%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.SERIALIZER%3F%202024-04-24%2021%3A36%3A53.362%20%20INFO%2027160%20EXAMPLESERVICELMPLTEST%201%E7%A7%92272%E6%AF%AB%E7%A7%92%20MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%20%201%E7%A7%92%20272%E6%AF%AB%E7%A7%92%20TEST10%20%20S.SERIALIZER%20%E7%9A%84%20SPI%20SERVICEPROXY%3A%20%E6%89%80%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%3A%20COM.WBF.CHENRDC.SERIALIZER.JDKSERIALIZER%405EED6DFB%20ETCDREGISTRY%20---%2F%20SERVICEKEY%3A%20COM.YYBF.EXAMPLE.COMMON.SERVICE.USERVICE%3A1.9%20%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.LOADBALANCER%202024-04-24%2021%3A36%3A53.867%20%20INFO%2027160%20%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%20MAIN%5D%20CON%20%2CLOADBALANCER%20%E7%9A%84%20SPI%20%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.FAULT.RETRY%20INFO%2027160%20MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%202024-04-24%2021%3A36%3A53%2C870%20.RETRYSTRATEGY%20%E7%9A%84%20SPI%20%20CONNECTED%20TO%20TCP%20SERVER!%20%20EXCEPTION-NULL)%20EXAMPLESERVICEIMPL%20-%20TEST%E6%9D%A8%E6%AF%85%E4%B8%8D%E9%80%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A49%2C%22y%22%3A1%2C%22width%22%3A100%2C%22height%22%3A14%2C%22text%22%3A%22QUICKPROVIDER%22%7D%2C%7B%22x%22%3A216%2C%22y%22%3A1%2C%22width%22%3A224%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLESERVICELMPITEST.TEST1%22%7D%2C%7B%22x%22%3A38%2C%22y%22%3A30%2C%22width%22%3A127%2C%22height%22%3A23%2C%22text%22%3A%22%E4%B8%89%E6%B1%81%E5%8A%B2%22%7D%2C%7B%22x%22%3A331%2C%22y%22%3A31%2C%22width%22%3A276%2C%22height%22%3A19%2C%22text%22%3A%22%E6%B5%8B%E8%AF%95%E5%B7%B2%E9%80%9A%E8%BF%87%3A1%E5%85%B11%E4%B8%AA%E6%B5%8B%E8%AF%95-1%E7%A7%92272%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A1318%2C%22y%22%3A62%2C%22width%22%3A396%2C%22height%22%3A26%2C%22text%22%3A%22%3B%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.SERIALIZER%3F%22%7D%2C%7B%22x%22%3A320%2C%22y%22%3A64%2C%22width%22%3A356%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A36%3A53.362%20%20INFO%2027160%22%7D%2C%7B%22x%22%3A39%2C%22y%22%3A63%2C%22width%22%3A264%2C%22height%22%3A19%2C%22text%22%3A%22EXAMPLESERVICELMPLTEST%201%E7%A7%92272%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A837%2C%22y%22%3A63%2C%22width%22%3A368%2C%22height%22%3A23%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A185%2C%22y%22%3A89%2C%22width%22%3A114%2C%22height%22%3A18%2C%22text%22%3A%22%201%E7%A7%92%20272%E6%AF%AB%E7%A7%92%22%7D%2C%7B%22x%22%3A61%2C%22y%22%3A92%2C%22width%22%3A52%2C%22height%22%3A17%2C%22text%22%3A%22TEST10%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A92%2C%22width%22%3A188%2C%22height%22%3A21%2C%22text%22%3A%22%20S.SERIALIZER%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A319%2C%22y%22%3A118%2C%22width%22%3A751%2C%22height%22%3A20%2C%22text%22%3A%22SERVICEPROXY%3A%20%E6%89%80%E5%88%97%E5%8C%96%E5%99%A8%E4%B8%BA%3A%20COM.WBF.CHENRDC.SERIALIZER.JDKSERIALIZER%405EED6DFB%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A147%2C%22width%22%3A769%2C%22height%22%3A19%2C%22text%22%3A%22ETCDREGISTRY%20---%2F%20SERVICEKEY%3A%20COM.YYBF.EXAMPLE.COMMON.SERVICE.USERVICE%3A1.9%22%7D%2C%7B%22x%22%3A1330%2C%22y%22%3A173%2C%22width%22%3A388%2C%22height%22%3A24%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.LOADBALANCER%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A175%2C%22width%22%3A355%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A36%3A53.867%20%20INFO%2027160%22%7D%2C%7B%22x%22%3A892%2C%22y%22%3A174%2C%22width%22%3A312%2C%22height%22%3A20%2C%22text%22%3A%22%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A833%2C%22y%22%3A176%2C%22width%22%3A89%2C%22height%22%3A20%2C%22text%22%3A%22MAIN%5D%20CON%22%7D%2C%7B%22x%22%3A340%2C%22y%22%3A203%2C%22width%22%3A185%2C%22height%22%3A18%2C%22text%22%3A%22%2CLOADBALANCER%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A1329%2C%22y%22%3A228%2C%22width%22%3A385%2C%22height%22%3A22%2C%22text%22%3A%22%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.FAULT.RETRY%22%7D%2C%7B%22x%22%3A567%2C%22y%22%3A230%2C%22width%22%3A109%2C%22height%22%3A18%2C%22text%22%3A%22INFO%2027160%22%7D%2C%7B%22x%22%3A838%2C%22y%22%3A229%2C%22width%22%3A366%2C%22height%22%3A19%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A321%2C%22y%22%3A231%2C%22width%22%3A237%2C%22height%22%3A17%2C%22text%22%3A%222024-04-24%2021%3A36%3A53%2C870%22%7D%2C%7B%22x%22%3A337%2C%22y%22%3A258%2C%22width%22%3A201%2C%22height%22%3A19%2C%22text%22%3A%22.RETRYSTRATEGY%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A319%2C%22y%22%3A284%2C%22width%22%3A239%2C%22height%22%3A21%2C%22text%22%3A%22%20CONNECTED%20TO%20TCP%20SERVER!%22%7D%2C%7B%22x%22%3A329%2C%22y%22%3A423%2C%22width%22%3A153%2C%22height%22%3A19%2C%22text%22%3A%22%20EXCEPTION-NULL)%22%7D%2C%7B%22x%22%3A319%2C%22y%22%3A449%2C%22width%22%3A326%2C%22height%22%3A21%2C%22text%22%3A%22EXAMPLESERVICEIMPL%20-%20TEST%E6%9D%A8%E6%AF%85%E4%B8%8D%E9%80%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23404954%22%2C%22id%22%3A%22ud2b7b5c8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ud8f0f471" id="ud8f0f471"><span data-lake-id="uaf4d58d7" id="uaf4d58d7" style="color: rgb(31, 35, 40)">服务提供者也收到了调用：</span></p><p data-lake-id="ueb790974" id="ueb790974"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2024%2Fpng%2F35273292%2F1713965858186-90833600-6eda-4bce-930b-83863da185a8.png%22%2C%22taskId%22%3A%22uf68acaca-3fb2-4f00-a6ed-51cc0d56aa2%22%2C%22clientId%22%3A%22u57bc2970-9f6b-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1755%2C%22height%22%3A815%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A922198%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1755%2C%22originHeight%22%3A815%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%E6%8E%A7%E5%88%B6%E5%8F%B0%20(()%20))))%20%2F%2F%2F%2F-%2F%20SPRING%20BOOT%20%3A%20(V2.6.13)%20IN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20STARTING%20EXAN%202024-04-24%2021%3A33%3A18.168%20%20INFO%2011376%20EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20USING%20JAVA%2017.0.10%20ON%20MAINLY%20STARTED%20BY%20LENOVO%20IN%20D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%7CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%20E%20PROFILE%20SET%2C%20FALLING%20BACK%20TO%201%20DEFAULT%20PROFILE%3A%20%5C%22DEFAULT%5C%22%20MAIN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20NO%20ACTIVE%20PROFI%202024-04-24%2021%3A33%3A18.171%20%20INFO%2011376%20%3A%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG(NAME-CHEN-RPC%2C%20VERSION-1.0.%20MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%202024-04-24%2021%3A33%3A18.496%20%20INFO%2011376%20(REGISTRY-ETCD%2C%20ADDRESS%20HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20%200%2C%20USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-100000))%20%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20%E7%9A%84%20SPI%20MAIN%202024-04-24%2021%3A33%3A18.499%20%20INFO%2011376%20COM.YYBF.CHENRPC.SPI.SPILOADER%20%20AN%20%3A%20REGISTRY%20INIT%2CCONFIG%20-%20REGISTRYCONFIG(REGISTRY-ETCD%2C%202024-04-24%2021%3A33%3A19.012%20%20INFO%2011376%20MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%20ADDRESS%20HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20USERN%2080%2C%20USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-1000000)%20TCP%20SERVER%20STARTED%20ON%20PORT18080%202024-04-24%2021%3A33%3A19.758%20%20INFO%201%200%2011376%20IN%202.046%20SECONDS%20(JVM%20RUNNING%20FOR%203.965)%20INTER%20TCPSERVERHANDLER%20%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20%E7%9A%84%20SPI%202024-04-2A%2021%3A36%3A54.081%20INFO%2011376%20---%20%5BNTLOOP-THREAD-O%5D%20COM.YYBF.CHENRPC.SPILOADER%20%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%3A%E6%9D%A8%E6%AF%85%E4%B8%8D%E9%80%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A9%2C%22y%22%3A-5%2C%22width%22%3A354%2C%22height%22%3A24%2C%22text%22%3A%22EXAMPLESPRINGBOOTCONSUMERAPPLICATION%22%7D%2C%7B%22x%22%3A413%2C%22y%22%3A0%2C%22width%22%3A316%2C%22height%22%3A15%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A33%2C%22width%22%3A39%2C%22height%22%3A17%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%8F%B0%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A117%2C%22width%22%3A67%2C%22height%22%3A25%2C%22text%22%3A%22(()%22%7D%2C%7B%22x%22%3A352%2C%22y%22%3A144%2C%22width%22%3A82%2C%22height%22%3A25%2C%22text%22%3A%22))))%22%7D%2C%7B%22x%22%3A324%2C%22y%22%3A200%2C%22width%22%3A94%2C%22height%22%3A24%2C%22text%22%3A%22%2F%2F%2F%2F-%2F%22%7D%2C%7B%22x%22%3A45%2C%22y%22%3A230%2C%22width%22%3A132%2C%22height%22%3A18%2C%22text%22%3A%22SPRING%20BOOT%20%3A%22%7D%2C%7B%22x%22%3A347%2C%22y%22%3A229%2C%22width%22%3A86%2C%22height%22%3A19%2C%22text%22%3A%22(V2.6.13)%22%7D%2C%7B%22x%22%3A563%2C%22y%22%3A282%2C%22width%22%3A578%2C%22height%22%3A22%2C%22text%22%3A%22IN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20STARTING%20EXAN%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A284%2C%22width%22%3A355%2C%22height%22%3A18%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.168%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A1119%2C%22y%22%3A285%2C%22width%22%3A570%2C%22height%22%3A18%2C%22text%22%3A%22EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20USING%20JAVA%2017.0.10%20ON%22%7D%2C%7B%22x%22%3A521%2C%22y%22%3A285%2C%22width%22%3A77%2C%22height%22%3A15%2C%22text%22%3A%22MAINLY%22%7D%2C%7B%22x%22%3A1231%2C%22y%22%3A312%2C%22width%22%3A203%2C%22height%22%3A19%2C%22text%22%3A%22STARTED%20BY%20LENOVO%20IN%22%7D%2C%7B%22x%22%3A23%2C%22y%22%3A339%2C%22width%22%3A454%2C%22height%22%3A21%2C%22text%22%3A%22D%3A%5C%5CRESOURCES%5C%5CIDEA_CODE%7CYUPI%5C%5CCHENRPC%5C%5CCHEN-RPC)%22%7D%2C%7B%22x%22%3A1116%2C%22y%22%3A365%2C%22width%22%3A580%2C%22height%22%3A20%2C%22text%22%3A%22E%20PROFILE%20SET%2C%20FALLING%20BACK%20TO%201%20DEFAULT%20PROFILE%3A%20%5C%22DEFAULT%5C%22%22%7D%2C%7B%22x%22%3A533%2C%22y%22%3A363%2C%22width%22%3A630%2C%22height%22%3A24%2C%22text%22%3A%22MAIN%5D%20Y.E.EXAMPLESPRINGBOOTPROVIDERAPPLICATION%20%3A%20NO%20ACTIVE%20PROFI%22%7D%2C%7B%22x%22%3A12%2C%22y%22%3A367%2C%22width%22%3A353%2C%22height%22%3A18%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.171%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A1015%2C%22y%22%3A392%2C%22width%22%3A555%2C%22height%22%3A20%2C%22text%22%3A%22%3A%20RPC%20INIT%2CCONFIG%20-%20RPCCONFIG(NAME-CHEN-RPC%2C%20VERSION-1.0.%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A394%2C%22width%22%3A375%2C%22height%22%3A19%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A394%2C%22width%22%3A353%2C%22height%22%3A20%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.496%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A27%2C%22y%22%3A449%2C%22width%22%3A466%2C%22height%22%3A20%2C%22text%22%3A%22(REGISTRY-ETCD%2C%20ADDRESS%20HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20%22%7D%2C%7B%22x%22%3A475%2C%22y%22%3A449%2C%22width%22%3A486%2C%22height%22%3A22%2C%22text%22%3A%220%2C%20USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-100000))%22%7D%2C%7B%22x%22%3A1018%2C%22y%22%3A476%2C%22width%22%3A518%2C%22height%22%3A20%2C%22text%22%3A%22%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.REGISTRY.REGISTRY%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A535%2C%22y%22%3A477%2C%22width%22%3A45%2C%22height%22%3A18%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A12%2C%22y%22%3A477%2C%22width%22%3A356%2C%22height%22%3A18%2C%22text%22%3A%222024-04-24%2021%3A33%3A18.499%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A591%2C%22y%22%3A478%2C%22width%22%3A303%2C%22height%22%3A18%2C%22text%22%3A%22COM.YYBF.CHENRPC.SPI.SPILOADER%22%7D%2C%7B%22x%22%3A924%2C%22y%22%3A501%2C%22width%22%3A619%2C%22height%22%3A22%2C%22text%22%3A%22%20AN%20%3A%20REGISTRY%20INIT%2CCONFIG%20-%20REGISTRYCONFIG(REGISTRY-ETCD%2C%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A504%2C%22width%22%3A353%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A33%3A19.012%20%20INFO%2011376%22%7D%2C%7B%22x%22%3A531%2C%22y%22%3A504%2C%22width%22%3A377%2C%22height%22%3A18%2C%22text%22%3A%22MAIN%5D%20COM.YYBF.CHENRPC.RPCAPPLICATION%22%7D%2C%7B%22x%22%3A19%2C%22y%22%3A531%2C%22width%22%3A363%2C%22height%22%3A20%2C%22text%22%3A%22ADDRESS%20HTTP%3A%2F%2FLOCALHOST%3A2380%2C%20USERN%22%7D%2C%7B%22x%22%3A306%2C%22y%22%3A532%2C%22width%22%3A489%2C%22height%22%3A18%2C%22text%22%3A%2280%2C%20USERNAME-NULL%2C%20PASSWORD-NULL%2C%20TIMEOUT-1000000)%22%7D%2C%7B%22x%22%3A13%2C%22y%22%3A559%2C%22width%22%3A310%2C%22height%22%3A19%2C%22text%22%3A%22TCP%20SERVER%20STARTED%20ON%20PORT18080%22%7D%2C%7B%22x%22%3A13%2C%22y%22%3A587%2C%22width%22%3A304%2C%22height%22%3A19%2C%22text%22%3A%222024-04-24%2021%3A33%3A19.758%20%20INFO%201%22%7D%2C%7B%22x%22%3A299%2C%22y%22%3A587%2C%22width%22%3A71%2C%22height%22%3A17%2C%22text%22%3A%220%2011376%22%7D%2C%7B%22x%22%3A1470%2C%22y%22%3A587%2C%22width%22%3A218%2C%22height%22%3A19%2C%22text%22%3A%22IN%202.046%20SECONDS%20(JVM%22%7D%2C%7B%22x%22%3A24%2C%22y%22%3A615%2C%22width%22%3A179%2C%22height%22%3A18%2C%22text%22%3A%22RUNNING%20FOR%203.965)%22%7D%2C%7B%22x%22%3A15%2C%22y%22%3A642%2C%22width%22%3A221%2C%22height%22%3A18%2C%22text%22%3A%22INTER%20TCPSERVERHANDLER%22%7D%2C%7B%22x%22%3A1018%2C%22y%22%3A666%2C%22width%22%3A557%2C%22height%22%3A22%2C%22text%22%3A%22%3A%E5%8A%A0%E8%BD%BD%E7%B1%BB%E5%9E%8B%E4%B8%BA%20COM.YYBF.CHENRPC.SERIALIZER.SERIALIZER%20%E7%9A%84%20SPI%22%7D%2C%7B%22x%22%3A16%2C%22y%22%3A669%2C%22width%22%3A878%2C%22height%22%3A21%2C%22text%22%3A%222024-04-2A%2021%3A36%3A54.081%20INFO%2011376%20---%20%5BNTLOOP-THREAD-O%5D%20COM.YYBF.CHENRPC.SPILOADER%22%7D%2C%7B%22x%22%3A14%2C%22y%22%3A696%2C%22width%22%3A166%2C%22height%22%3A19%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%3A%E6%9D%A8%E6%AF%85%E4%B8%8D%E9%80%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23414b56%22%2C%22id%22%3A%22u4829a299%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="u7d258ec9" id="u7d258ec9"><span data-lake-id="u3cc62ef0" id="u3cc62ef0" style="color: rgb(31, 35, 40)">至此就能够通过使用注解的方式，轻松地给项目引入 RPC 框架了~</span></p><h2 data-lake-id="syNX2" id="syNX2"><span data-lake-id="u7fd9641a" id="u7fd9641a" style="color: rgba(0, 0, 0, 0.85)">五、扩展</span></h2><p data-lake-id="ucdcdd837" id="ucdcdd837"><span data-lake-id="ue41ae759" id="ue41ae759" style="color: rgb(31, 35, 40)">1）Spring Boot Starter 项目支持读取 yml / yaml 配置文件来启动 RPC 框架。</span></p><p data-lake-id="u6c0c06bd" id="u6c0c06bd"><span data-lake-id="u0da030f8" id="u0da030f8" style="color: rgb(31, 35, 40)">参考思路：像读取 properties 文件一样，提供一个工具类来读取 yml 配置。</span></p><p data-lake-id="ue037b97b" id="ue037b97b"><span data-lake-id="u7fb472f4" id="u7fb472f4" style="color: rgb(31, 35, 40)">服务提供者启动逻辑也可以改 bean 后置执行为 “使用组件扫描”。</span></p>